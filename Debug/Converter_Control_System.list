
Converter_Control_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e38  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006048  08006048  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006048  08006048  00007048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006050  08006050  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006050  08006050  00007050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006054  08006054  00007054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006058  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000010  08006064  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08006064  00008478  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a08  00000000  00000000  0000803a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8f  00000000  00000000  0001ba42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db1  00000000  00000000  0001f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002914f  00000000  00000000  00020411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e43  00000000  00000000  00049560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103c6a  00000000  00000000  0005e3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016200d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  00162050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00166908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08006018 	.word	0x08006018

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08006018 	.word	0x08006018

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <SetStepFlag>:

static volatile uint8_t errorCode = 0;

//TODO Unify setStepFlag functions in one function for readability

void SetStepFlag(void) {
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
    stepFlag = 1;
 8000568:	4b03      	ldr	r3, [pc, #12]	@ (8000578 <SetStepFlag+0x14>)
 800056a:	2201      	movs	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	2000002c 	.word	0x2000002c

0800057c <GetStepFlag>:


uint8_t GetStepFlag(void) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
    uint8_t buf_flag = stepFlag;
 8000582:	4b06      	ldr	r3, [pc, #24]	@ (800059c <GetStepFlag+0x20>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
    stepFlag = 0;
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <GetStepFlag+0x20>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
    return buf_flag;
 800058e:	79fb      	ldrb	r3, [r7, #7]
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	2000002c 	.word	0x2000002c

080005a0 <GetModeFlag>:
	modeFlag = mode;
}


uint8_t GetModeFlag(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
    uint8_t buf_flag = modeFlag;
 80005a6:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <GetModeFlag+0x1c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
    return buf_flag;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	2000002e 	.word	0x2000002e

080005c0 <SetLedFlag>:


void SetLedFlag(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
    ledFlag = 1;
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <SetLedFlag+0x14>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	2000002f 	.word	0x2000002f

080005d8 <GetLedFlag>:


uint8_t GetLedFlag(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
    uint8_t buf_flag = ledFlag;
 80005de:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <GetLedFlag+0x20>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
    ledFlag = 0;
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <GetLedFlag+0x20>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
    return buf_flag;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	2000002f 	.word	0x2000002f

080005fc <SetErrorCode>:


void SetErrorCode(uint8_t Error)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	errorCode &= ~(1 << Error);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	b25b      	sxtb	r3, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	b25a      	sxtb	r2, r3
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <SetErrorCode+0x54>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	b25b      	sxtb	r3, r3
 800061c:	4013      	ands	r3, r2
 800061e:	b25b      	sxtb	r3, r3
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <SetErrorCode+0x54>)
 8000624:	701a      	strb	r2, [r3, #0]
    errorCode |= (1 << Error);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2201      	movs	r2, #1
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	b25a      	sxtb	r2, r3
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <SetErrorCode+0x54>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	b25b      	sxtb	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <SetErrorCode+0x54>)
 8000640:	701a      	strb	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000031 	.word	0x20000031

08000654 <ResetErrorCode>:


void ResetErrorCode(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	errorCode = 0;
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <ResetErrorCode+0x14>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000031 	.word	0x20000031

0800066c <GetErrorCode>:


uint8_t GetErrorCode(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
    uint8_t buf_flag = errorCode;
 8000672:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <GetErrorCode+0x1c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
    return buf_flag;
 8000678:	79fb      	ldrb	r3, [r7, #7]
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000031 	.word	0x20000031

0800068c <SetHandlerStepFlag>:


void SetHandlerStepFlag(void) {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	handlerStepFlag = 1;
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <SetHandlerStepFlag+0x14>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	2000002d 	.word	0x2000002d

080006a4 <GetHandlerStepFlag>:


uint8_t GetHandlerStepFlag(void) {
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
    uint8_t buf_flag = handlerStepFlag;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <GetHandlerStepFlag+0x20>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
    handlerStepFlag = 0;
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <GetHandlerStepFlag+0x20>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
    return buf_flag;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	2000002d 	.word	0x2000002d

080006c8 <SetDebugStepFlag>:

void SetDebugStepFlag(void) {
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	debugStepFlag = 1;
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <SetDebugStepFlag+0x14>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000030 	.word	0x20000030

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f001 f9f7 	bl	8001ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f8b0 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 fc6c 	bl	8000fc8 <MX_GPIO_Init>
  MX_TIM6_Init();
 80006f0:	f000 fb86 	bl	8000e00 <MX_TIM6_Init>
  MX_TIM7_Init();
 80006f4:	f000 fbba 	bl	8000e6c <MX_TIM7_Init>
  MX_TIM1_Init();
 80006f8:	f000 fa28 	bl	8000b4c <MX_TIM1_Init>
  MX_TIM3_Init();
 80006fc:	f000 fac8 	bl	8000c90 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000700:	f000 fb22 	bl	8000d48 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000704:	f000 fbea 	bl	8000edc <MX_TIM12_Init>
  MX_USART3_UART_Init();
 8000708:	f000 fc2e 	bl	8000f68 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800070c:	f000 f90e 	bl	800092c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000710:	f000 f95e 	bl	80009d0 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000714:	f000 f9ae 	bl	8000a74 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000718:	f000 f9e2 	bl	8000ae0 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  initProcess();//<------- Initialization
 800071c:	f000 fd38 	bl	8001190 <initProcess>

  HAL_TIM_Base_Start_IT(&htim6);
 8000720:	483d      	ldr	r0, [pc, #244]	@ (8000818 <main+0x138>)
 8000722:	f003 fa51 	bl	8003bc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000726:	483d      	ldr	r0, [pc, #244]	@ (800081c <main+0x13c>)
 8000728:	f003 fa4e 	bl	8003bc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800072c:	2108      	movs	r1, #8
 800072e:	483c      	ldr	r0, [pc, #240]	@ (8000820 <main+0x140>)
 8000730:	f003 fb1a 	bl	8003d68 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000734:	2104      	movs	r1, #4
 8000736:	483b      	ldr	r0, [pc, #236]	@ (8000824 <main+0x144>)
 8000738:	f003 fb16 	bl	8003d68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800073c:	2100      	movs	r1, #0
 800073e:	483a      	ldr	r0, [pc, #232]	@ (8000828 <main+0x148>)
 8000740:	f003 fb12 	bl	8003d68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000744:	2100      	movs	r1, #0
 8000746:	4839      	ldr	r0, [pc, #228]	@ (800082c <main+0x14c>)
 8000748:	f003 fb0e 	bl	8003d68 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800074c:	2100      	movs	r1, #0
 800074e:	4837      	ldr	r0, [pc, #220]	@ (800082c <main+0x14c>)
 8000750:	f004 f9f8 	bl	8004b44 <HAL_TIMEx_PWMN_Start>

  TIM3->CCR3 = 9830;
 8000754:	4b36      	ldr	r3, [pc, #216]	@ (8000830 <main+0x150>)
 8000756:	f242 6266 	movw	r2, #9830	@ 0x2666
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM4->CCR2 = 9830;
 800075c:	4b35      	ldr	r3, [pc, #212]	@ (8000834 <main+0x154>)
 800075e:	f242 6266 	movw	r2, #9830	@ 0x2666
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
  DischargeDuty_Signals.InductorCurrent = 2500;
 8000764:	4934      	ldr	r1, [pc, #208]	@ (8000838 <main+0x158>)
 8000766:	a32a      	add	r3, pc, #168	@ (adr r3, 8000810 <main+0x130>)
 8000768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800076c:	e9c1 2300 	strd	r2, r3, [r1]
  DischargeDuty_Signals.OutputVoltage = 800;
 8000770:	4931      	ldr	r1, [pc, #196]	@ (8000838 <main+0x158>)
 8000772:	f04f 0200 	mov.w	r2, #0
 8000776:	4b31      	ldr	r3, [pc, #196]	@ (800083c <main+0x15c>)
 8000778:	e9c1 2302 	strd	r2, r3, [r1, #8]
  DischargeDuty_Signals.targetVoltageDischarge = 1200;
 800077c:	492e      	ldr	r1, [pc, #184]	@ (8000838 <main+0x158>)
 800077e:	f04f 0200 	mov.w	r2, #0
 8000782:	4b2f      	ldr	r3, [pc, #188]	@ (8000840 <main+0x160>)
 8000784:	e9c1 2304 	strd	r2, r3, [r1, #16]
  TIM1->CCR1 = 40000;
 8000788:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <main+0x164>)
 800078a:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  readCAN_Process();
 8000790:	f000 fd4c 	bl	800122c <readCAN_Process>
switch(systemState)
 8000794:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <main+0x168>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d006      	beq.n	80007aa <main+0xca>
 800079c:	2b02      	cmp	r3, #2
 800079e:	dc1a      	bgt.n	80007d6 <main+0xf6>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00b      	beq.n	80007bc <main+0xdc>
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d00f      	beq.n	80007c8 <main+0xe8>
 80007a8:	e015      	b.n	80007d6 <main+0xf6>
{
case STATE_START:
	sensProcess();
 80007aa:	f000 fd31 	bl	8001210 <sensProcess>
	errProcess();
 80007ae:	f000 fd73 	bl	8001298 <errProcess>
	sendCAN_Process();
 80007b2:	f000 fd34 	bl	800121e <sendCAN_Process>
	calcProcess();
 80007b6:	f000 fcf3 	bl	80011a0 <calcProcess>
	continue;
 80007ba:	e027      	b.n	800080c <main+0x12c>
case STATE_IDLE:
	  sensProcess();
 80007bc:	f000 fd28 	bl	8001210 <sensProcess>
	  errProcess();
 80007c0:	f000 fd6a 	bl	8001298 <errProcess>
	  sendCAN_Process();
 80007c4:	f000 fd2b 	bl	800121e <sendCAN_Process>
case STATE_PRESTART:
	  if (errProcess())
 80007c8:	f000 fd66 	bl	8001298 <errProcess>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d119      	bne.n	8000806 <main+0x126>
	  {
		  continue;
	  }
    prechargeProcess();
 80007d2:	f000 fd32 	bl	800123a <prechargeProcess>

}


      if (systemState == STATE_IDLE)
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <main+0x168>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d105      	bne.n	80007ea <main+0x10a>
      {
    	  sensProcess();
 80007de:	f000 fd17 	bl	8001210 <sensProcess>
    	  errProcess();
 80007e2:	f000 fd59 	bl	8001298 <errProcess>
    	  sendCAN_Process();
 80007e6:	f000 fd1a 	bl	800121e <sendCAN_Process>
      }

      if (systemState == STATE_PRESTART)
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <main+0x168>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d106      	bne.n	8000800 <main+0x120>
      {
    	  if (errProcess())
 80007f2:	f000 fd51 	bl	8001298 <errProcess>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d106      	bne.n	800080a <main+0x12a>
    	  {
    		  continue;
    	  }
          prechargeProcess();
 80007fc:	f000 fd1d 	bl	800123a <prechargeProcess>
      }


	  ledProcess();
 8000800:	f000 fd22 	bl	8001248 <ledProcess>
 8000804:	e7c4      	b.n	8000790 <main+0xb0>
		  continue;
 8000806:	bf00      	nop
 8000808:	e7c2      	b.n	8000790 <main+0xb0>
    		  continue;
 800080a:	bf00      	nop
  {
 800080c:	e7c0      	b.n	8000790 <main+0xb0>
 800080e:	bf00      	nop
 8000810:	00000000 	.word	0x00000000
 8000814:	40a38800 	.word	0x40a38800
 8000818:	200001f8 	.word	0x200001f8
 800081c:	20000244 	.word	0x20000244
 8000820:	20000160 	.word	0x20000160
 8000824:	200001ac 	.word	0x200001ac
 8000828:	20000290 	.word	0x20000290
 800082c:	20000114 	.word	0x20000114
 8000830:	40000400 	.word	0x40000400
 8000834:	40000800 	.word	0x40000800
 8000838:	200003c8 	.word	0x200003c8
 800083c:	40890000 	.word	0x40890000
 8000840:	4092c000 	.word	0x4092c000
 8000844:	40010000 	.word	0x40010000
 8000848:	20000364 	.word	0x20000364

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	@ 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2234      	movs	r2, #52	@ 0x34
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f005 fbb0 	bl	8005fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000870:	f001 fff6 	bl	8002860 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <SystemClock_Config+0xd8>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	4a2a      	ldr	r2, [pc, #168]	@ (8000924 <SystemClock_Config+0xd8>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000880:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <SystemClock_Config+0xd8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <SystemClock_Config+0xdc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a25      	ldr	r2, [pc, #148]	@ (8000928 <SystemClock_Config+0xdc>)
 8000892:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <SystemClock_Config+0xdc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008bc:	23d8      	movs	r3, #216	@ 0xd8
 80008be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 f825 	bl	8002920 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008dc:	f000 fc52 	bl	8001184 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e0:	f001 ffce 	bl	8002880 <HAL_PWREx_EnableOverDrive>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ea:	f000 fc4b 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000904:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2107      	movs	r1, #7
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fab5 	bl	8002e7c <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000918:	f000 fc34 	bl	8001184 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <MX_ADC1_Init+0x98>)
 8000940:	4a21      	ldr	r2, [pc, #132]	@ (80009c8 <MX_ADC1_Init+0x9c>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <MX_ADC1_Init+0x98>)
 8000946:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094c:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <MX_ADC1_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <MX_ADC1_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <MX_ADC1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <MX_ADC1_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <MX_ADC1_Init+0x98>)
 800096e:	4a17      	ldr	r2, [pc, #92]	@ (80009cc <MX_ADC1_Init+0xa0>)
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_ADC1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_ADC1_Init+0x98>)
 800097a:	2201      	movs	r2, #1
 800097c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_ADC1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_ADC1_Init+0x98>)
 8000988:	2201      	movs	r2, #1
 800098a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	480d      	ldr	r0, [pc, #52]	@ (80009c4 <MX_ADC1_Init+0x98>)
 800098e:	f001 f8ff 	bl	8001b90 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000998:	f000 fbf4 	bl	8001184 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_ADC1_Init+0x98>)
 80009ae:	f001 f933 	bl	8001c18 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b8:	f000 fbe4 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000034 	.word	0x20000034
 80009c8:	40012000 	.word	0x40012000
 80009cc:	0f000001 	.word	0x0f000001

080009d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <MX_ADC2_Init+0x98>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <MX_ADC2_Init+0x9c>)
 80009e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_ADC2_Init+0x98>)
 80009ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_ADC2_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <MX_ADC2_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_ADC2_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <MX_ADC2_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_ADC2_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_ADC2_Init+0x98>)
 8000a12:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <MX_ADC2_Init+0xa0>)
 8000a14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_ADC2_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_ADC2_Init+0x98>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_ADC2_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_ADC2_Init+0x98>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a30:	480d      	ldr	r0, [pc, #52]	@ (8000a68 <MX_ADC2_Init+0x98>)
 8000a32:	f001 f8ad 	bl	8001b90 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000a3c:	f000 fba2 	bl	8001184 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a40:	2303      	movs	r3, #3
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_ADC2_Init+0x98>)
 8000a52:	f001 f8e1 	bl	8001c18 <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000a5c:	f000 fb92 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	40012100 	.word	0x40012100
 8000a70:	0f000001 	.word	0x0f000001

08000a74 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000a7a:	4a18      	ldr	r2, [pc, #96]	@ (8000adc <MX_CAN1_Init+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000a80:	2210      	movs	r2, #16
 8000a82:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000a92:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a96:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_CAN1_Init+0x64>)
 8000ac4:	f001 faf8 	bl	80020b8 <HAL_CAN_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000ace:	f000 fb59 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000c4 	.word	0x200000c4
 8000adc:	40006400 	.word	0x40006400

08000ae0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000ae6:	4a18      	ldr	r2, [pc, #96]	@ (8000b48 <MX_CAN2_Init+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000aec:	2210      	movs	r2, #16
 8000aee:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000afe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b02:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_CAN2_Init+0x64>)
 8000b30:	f001 fac2 	bl	80020b8 <HAL_CAN_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000b3a:	f000 fb23 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000ec 	.word	0x200000ec
 8000b48:	40006800 	.word	0x40006800

08000b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b096      	sub	sp, #88	@ 0x58
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	222c      	movs	r2, #44	@ 0x2c
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f005 fa21 	bl	8005fc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b7e:	4b42      	ldr	r3, [pc, #264]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000b80:	4a42      	ldr	r2, [pc, #264]	@ (8000c8c <MX_TIM1_Init+0x140>)
 8000b82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000b84:	4b40      	ldr	r3, [pc, #256]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000b86:	220f      	movs	r2, #15
 8000b88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62499;
 8000b90:	4b3d      	ldr	r3, [pc, #244]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000b92:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000b96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b3b      	ldr	r3, [pc, #236]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b38      	ldr	r3, [pc, #224]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000baa:	4837      	ldr	r0, [pc, #220]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000bac:	f003 f884 	bl	8003cb8 <HAL_TIM_PWM_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 fae5 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	482e      	ldr	r0, [pc, #184]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000bce:	f004 f8d9 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bd8:	f000 fad4 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bdc:	2360      	movs	r3, #96	@ 0x60
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 31250;
 8000be0:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8000be4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be6:	2300      	movs	r3, #0
 8000be8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000bf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4820      	ldr	r0, [pc, #128]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000c06:	f003 fb31 	bl	800426c <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000c10:	f000 fab8 	bl	8001184 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c20:	2204      	movs	r2, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4818      	ldr	r0, [pc, #96]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000c26:	f003 fb21 	bl	800426c <HAL_TIM_PWM_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000c30:	f000 faa8 	bl	8001184 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000c40:	23ff      	movs	r3, #255	@ 0xff
 8000c42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4807      	ldr	r0, [pc, #28]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000c6a:	f004 f919 	bl	8004ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000c74:	f000 fa86 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <MX_TIM1_Init+0x13c>)
 8000c7a:	f000 fd45 	bl	8001708 <HAL_TIM_MspPostInit>

}
 8000c7e:	bf00      	nop
 8000c80:	3758      	adds	r7, #88	@ 0x58
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000114 	.word	0x20000114
 8000c8c:	40010000 	.word	0x40010000

08000c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	615a      	str	r2, [r3, #20]
 8000cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000cb6:	4a23      	ldr	r2, [pc, #140]	@ (8000d44 <MX_TIM3_Init+0xb4>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1647;
 8000cba:	4b21      	ldr	r3, [pc, #132]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000cbc:	f240 626f 	movw	r2, #1647	@ 0x66f
 8000cc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65532;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000cca:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8000cce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cdc:	4818      	ldr	r0, [pc, #96]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000cde:	f002 ffeb 	bl	8003cb8 <HAL_TIM_PWM_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 fa4c 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4811      	ldr	r0, [pc, #68]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000cfc:	f004 f842 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000d06:	f000 fa3d 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0a:	2360      	movs	r3, #96	@ 0x60
 8000d0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000d22:	f003 faa3 	bl	800426c <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000d2c:	f000 fa2a 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d30:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <MX_TIM3_Init+0xb0>)
 8000d32:	f000 fce9 	bl	8001708 <HAL_TIM_MspPostInit>

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	@ 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000160 	.word	0x20000160
 8000d44:	40000400 	.word	0x40000400

08000d48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	@ 0x28
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000d6e:	4a23      	ldr	r2, [pc, #140]	@ (8000dfc <MX_TIM4_Init+0xb4>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1647;
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000d74:	f240 626f 	movw	r2, #1647	@ 0x66f
 8000d78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65532;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000d82:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8000d86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d94:	4818      	ldr	r0, [pc, #96]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000d96:	f002 ff8f 	bl	8003cb8 <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000da0:	f000 f9f0 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4811      	ldr	r0, [pc, #68]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000db4:	f003 ffe6 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000dbe:	f000 f9e1 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc2:	2360      	movs	r3, #96	@ 0x60
 8000dc4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4807      	ldr	r0, [pc, #28]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000dda:	f003 fa47 	bl	800426c <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000de4:	f000 f9ce 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000de8:	4803      	ldr	r0, [pc, #12]	@ (8000df8 <MX_TIM4_Init+0xb0>)
 8000dea:	f000 fc8d 	bl	8001708 <HAL_TIM_MspPostInit>

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	@ 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001ac 	.word	0x200001ac
 8000dfc:	40000800 	.word	0x40000800

08000e00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e10:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <MX_TIM6_Init+0x64>)
 8000e12:	4a15      	ldr	r2, [pc, #84]	@ (8000e68 <MX_TIM6_Init+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <MX_TIM6_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_TIM6_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10799;
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <MX_TIM6_Init+0x64>)
 8000e24:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8000e28:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_TIM6_Init+0x64>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <MX_TIM6_Init+0x64>)
 8000e32:	f002 fe71 	bl	8003b18 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e3c:	f000 f9a2 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_TIM6_Init+0x64>)
 8000e4e:	f003 ff99 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e58:	f000 f994 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200001f8 	.word	0x200001f8
 8000e68:	40001000 	.word	0x40001000

08000e6c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <MX_TIM7_Init+0x68>)
 8000e7e:	4a16      	ldr	r2, [pc, #88]	@ (8000ed8 <MX_TIM7_Init+0x6c>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1727;
 8000e82:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <MX_TIM7_Init+0x68>)
 8000e84:	f240 62bf 	movw	r2, #1727	@ 0x6bf
 8000e88:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <MX_TIM7_Init+0x68>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 8000e90:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <MX_TIM7_Init+0x68>)
 8000e92:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000e96:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <MX_TIM7_Init+0x68>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e9e:	480d      	ldr	r0, [pc, #52]	@ (8000ed4 <MX_TIM7_Init+0x68>)
 8000ea0:	f002 fe3a 	bl	8003b18 <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000eaa:	f000 f96b 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	@ (8000ed4 <MX_TIM7_Init+0x68>)
 8000ebc:	f003 ff62 	bl	8004d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000ec6:	f000 f95d 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000244 	.word	0x20000244
 8000ed8:	40001400 	.word	0x40001400

08000edc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <MX_TIM12_Init+0x84>)
 8000ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f64 <MX_TIM12_Init+0x88>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3295;
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <MX_TIM12_Init+0x84>)
 8000efc:	f640 42df 	movw	r2, #3295	@ 0xcdf
 8000f00:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <MX_TIM12_Init+0x84>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65532;
 8000f08:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <MX_TIM12_Init+0x84>)
 8000f0a:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8000f0e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_TIM12_Init+0x84>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <MX_TIM12_Init+0x84>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000f1c:	4810      	ldr	r0, [pc, #64]	@ (8000f60 <MX_TIM12_Init+0x84>)
 8000f1e:	f002 fecb 	bl	8003cb8 <HAL_TIM_PWM_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM12_Init+0x50>
  {
    Error_Handler();
 8000f28:	f000 f92c 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2c:	2360      	movs	r3, #96	@ 0x60
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4619      	mov	r1, r3
 8000f42:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <MX_TIM12_Init+0x84>)
 8000f44:	f003 f992 	bl	800426c <HAL_TIM_PWM_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000f4e:	f000 f919 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000f52:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <MX_TIM12_Init+0x84>)
 8000f54:	f000 fbd8 	bl	8001708 <HAL_TIM_MspPostInit>

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000290 	.word	0x20000290
 8000f64:	40001800 	.word	0x40001800

08000f68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000f6e:	4a15      	ldr	r2, [pc, #84]	@ (8000fc4 <MX_USART3_UART_Init+0x5c>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000f74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000f88:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000f8c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000f90:	220c      	movs	r2, #12
 8000f92:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <MX_USART3_UART_Init+0x58>)
 8000fae:	f004 f838 	bl	8005022 <HAL_UART_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8000fb8:	f000 f8e4 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200002dc 	.word	0x200002dc
 8000fc4:	40004800 	.word	0x40004800

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	@ 0x38
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b63      	ldr	r3, [pc, #396]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a62      	ldr	r2, [pc, #392]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b60      	ldr	r3, [pc, #384]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8000ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b5a      	ldr	r3, [pc, #360]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b57      	ldr	r3, [pc, #348]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a56      	ldr	r2, [pc, #344]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b54      	ldr	r3, [pc, #336]	@ (800116c <MX_GPIO_Init+0x1a4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b51      	ldr	r3, [pc, #324]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a50      	ldr	r2, [pc, #320]	@ (800116c <MX_GPIO_Init+0x1a4>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b4e      	ldr	r3, [pc, #312]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103e:	4b4b      	ldr	r3, [pc, #300]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a4a      	ldr	r2, [pc, #296]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b48      	ldr	r3, [pc, #288]	@ (800116c <MX_GPIO_Init+0x1a4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001056:	4b45      	ldr	r3, [pc, #276]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a44      	ldr	r2, [pc, #272]	@ (800116c <MX_GPIO_Init+0x1a4>)
 800105c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b42      	ldr	r3, [pc, #264]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106e:	4b3f      	ldr	r3, [pc, #252]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a3e      	ldr	r2, [pc, #248]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b3c      	ldr	r3, [pc, #240]	@ (800116c <MX_GPIO_Init+0x1a4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	4b39      	ldr	r3, [pc, #228]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a38      	ldr	r2, [pc, #224]	@ (800116c <MX_GPIO_Init+0x1a4>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b36      	ldr	r3, [pc, #216]	@ (800116c <MX_GPIO_Init+0x1a4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_BTN_GPIO_Port, USER_BTN_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a4:	4832      	ldr	r0, [pc, #200]	@ (8001170 <MX_GPIO_Init+0x1a8>)
 80010a6:	f001 fbc1 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GATE_GPIO_Port, RELAY_GATE_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b0:	4830      	ldr	r0, [pc, #192]	@ (8001174 <MX_GPIO_Init+0x1ac>)
 80010b2:	f001 fbbb 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	482f      	ldr	r0, [pc, #188]	@ (8001178 <MX_GPIO_Init+0x1b0>)
 80010bc:	f001 fbb6 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80010c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d6:	4619      	mov	r1, r3
 80010d8:	4825      	ldr	r0, [pc, #148]	@ (8001170 <MX_GPIO_Init+0x1a8>)
 80010da:	f001 f9fb 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : H8_ERR_Pin H1_ERR_Pin H2_ERR_Pin H3_ERR_Pin */
  GPIO_InitStruct.Pin = H8_ERR_Pin|H1_ERR_Pin|H2_ERR_Pin|H3_ERR_Pin;
 80010de:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4822      	ldr	r0, [pc, #136]	@ (800117c <MX_GPIO_Init+0x1b4>)
 80010f4:	f001 f9ee 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : H4_ERR_Pin H5_ERR_Pin */
  GPIO_InitStruct.Pin = H4_ERR_Pin|H5_ERR_Pin;
 80010f8:	2303      	movs	r3, #3
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	481d      	ldr	r0, [pc, #116]	@ (8001180 <MX_GPIO_Init+0x1b8>)
 800110c:	f001 f9e2 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : H6_ERR_Pin H7_ERR_Pin */
  GPIO_InitStruct.Pin = H6_ERR_Pin|H7_ERR_Pin;
 8001110:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	4814      	ldr	r0, [pc, #80]	@ (8001178 <MX_GPIO_Init+0x1b0>)
 8001126:	f001 f9d5 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_GATE_Pin */
  GPIO_InitStruct.Pin = RELAY_GATE_Pin;
 800112a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RELAY_GATE_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	480c      	ldr	r0, [pc, #48]	@ (8001174 <MX_GPIO_Init+0x1ac>)
 8001144:	f001 f9c6 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001148:	2301      	movs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	@ (8001178 <MX_GPIO_Init+0x1b0>)
 8001160:	f001 f9b8 	bl	80024d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001164:	bf00      	nop
 8001166:	3738      	adds	r7, #56	@ 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800
 8001174:	40020c00 	.word	0x40020c00
 8001178:	40021000 	.word	0x40021000
 800117c:	40021400 	.word	0x40021400
 8001180:	40021800 	.word	0x40021800

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <Error_Handler+0x8>

08001190 <initProcess>:

extern UART_HandleTypeDef huart3;


void initProcess()
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	//TODO Add initialization for system if needed
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <calcProcess>:


void calcProcess()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

	if (GetStepFlag())
 80011a4:	f7ff f9ea 	bl	800057c <GetStepFlag>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d02c      	beq.n	8001208 <calcProcess+0x68>
	{
		if (lastMode != GetModeFlag())
 80011ae:	f7ff f9f7 	bl	80005a0 <GetModeFlag>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <calcProcess+0x6c>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	429a      	cmp	r2, r3
 80011be:	d001      	beq.n	80011c4 <calcProcess+0x24>
		{
			modeReset();
 80011c0:	f000 f8a4 	bl	800130c <modeReset>
		}
		if (GetModeFlag() == DISCHARGE)
 80011c4:	f7ff f9ec 	bl	80005a0 <GetModeFlag>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d105      	bne.n	80011da <calcProcess+0x3a>
		{
			DischargeDuty_step();
 80011ce:	f004 fd1f 	bl	8005c10 <DischargeDuty_step>
			lastMode = DISCHARGE;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <calcProcess+0x6c>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
		{
			//TODO Add mode error flag to flag.c file
			SetErrorCode(MODE_ERROR);
		}
	}
}
 80011d8:	e016      	b.n	8001208 <calcProcess+0x68>
		else if (GetModeFlag() == CHARGE)
 80011da:	f7ff f9e1 	bl	80005a0 <GetModeFlag>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d105      	bne.n	80011f0 <calcProcess+0x50>
			ChargeDuty_step();
 80011e4:	f004 fbec 	bl	80059c0 <ChargeDuty_step>
			lastMode = CHARGE;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <calcProcess+0x6c>)
 80011ea:	2202      	movs	r2, #2
 80011ec:	701a      	strb	r2, [r3, #0]
}
 80011ee:	e00b      	b.n	8001208 <calcProcess+0x68>
		else if (GetModeFlag() == NO_MODE)
 80011f0:	f7ff f9d6 	bl	80005a0 <GetModeFlag>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d103      	bne.n	8001202 <calcProcess+0x62>
			lastMode = NO_MODE;
 80011fa:	4b04      	ldr	r3, [pc, #16]	@ (800120c <calcProcess+0x6c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
}
 8001200:	e002      	b.n	8001208 <calcProcess+0x68>
			SetErrorCode(MODE_ERROR);
 8001202:	2003      	movs	r0, #3
 8001204:	f7ff f9fa 	bl	80005fc <SetErrorCode>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000365 	.word	0x20000365

08001210 <sensProcess>:


void sensProcess()
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	//TODO Read values from sensor and write them to corresponding variables
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <sendCAN_Process>:


void sendCAN_Process()
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
	//TODO Add CAN communication and others if needed
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <readCAN_Process>:

void readCAN_Process()
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	//TODO Add CAN communication and others if needed
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <prechargeProcess>:

void prechargeProcess()
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
	//TODO Add relay switching process
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <ledProcess>:


void ledProcess()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	if (GetLedFlag())
 800124c:	f7ff f9c4 	bl	80005d8 <GetLedFlag>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d017      	beq.n	8001286 <ledProcess+0x3e>
	{
		ledBlueOn();
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <ledProcess+0x44>)
 8001258:	f242 6266 	movw	r2, #9830	@ 0x2666
 800125c:	639a      	str	r2, [r3, #56]	@ 0x38
		if (GetErrorCode() == NO_ERROR)
 800125e:	f7ff fa05 	bl	800066c <GetErrorCode>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d107      	bne.n	8001278 <ledProcess+0x30>
		{
			ledGreenOn();
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <ledProcess+0x48>)
 800126a:	f242 6266 	movw	r2, #9830	@ 0x2666
 800126e:	63da      	str	r2, [r3, #60]	@ 0x3c
			ledRedOff();
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <ledProcess+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	635a      	str	r2, [r3, #52]	@ 0x34
		{
			ledRedOn();
			ledGreenOff();
		}
	}
}
 8001276:	e006      	b.n	8001286 <ledProcess+0x3e>
			ledRedOn();
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <ledProcess+0x4c>)
 800127a:	f242 6266 	movw	r2, #9830	@ 0x2666
 800127e:	635a      	str	r2, [r3, #52]	@ 0x34
			ledGreenOff();
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <ledProcess+0x48>)
 8001282:	2200      	movs	r2, #0
 8001284:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40000800 	.word	0x40000800
 8001290:	40000400 	.word	0x40000400
 8001294:	40001800 	.word	0x40001800

08001298 <errProcess>:


int errProcess()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	//TODO Add a timer for setting handler flag
	if (GetHandlerStepFlag())
 800129c:	f7ff fa02 	bl	80006a4 <GetHandlerStepFlag>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d02d      	beq.n	8001302 <errProcess+0x6a>
	{
		errorHandler_step();
 80012a6:	f004 fe0b 	bl	8005ec0 <errorHandler_step>
		if (errorHandler_Signals.underVoltage)
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <errProcess+0x70>)
 80012ac:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80012b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	d006      	beq.n	80012c8 <errProcess+0x30>
		{
			SetErrorCode(UNDERVOLTAGE_ERROR);
 80012ba:	2002      	movs	r0, #2
 80012bc:	f7ff f99e 	bl	80005fc <SetErrorCode>
			pwmStop();
 80012c0:	f000 f84c 	bl	800135c <pwmStop>
			return 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e01c      	b.n	8001302 <errProcess+0x6a>
		}
		if (errorHandler_Signals.overCurrent)
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <errProcess+0x70>)
 80012ca:	ed93 7b08 	vldr	d7, [r3, #32]
 80012ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	d006      	beq.n	80012e6 <errProcess+0x4e>
		{
			SetErrorCode(OVERCURRENT_ERROR);
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff f98f 	bl	80005fc <SetErrorCode>
			pwmStop();
 80012de:	f000 f83d 	bl	800135c <pwmStop>
			return 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00d      	b.n	8001302 <errProcess+0x6a>
		}
		if (errorHandler_Signals.readyState)
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <errProcess+0x70>)
 80012e8:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80012ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	d003      	beq.n	80012fe <errProcess+0x66>
		{
			ResetErrorCode();
 80012f6:	f7ff f9ad 	bl	8000654 <ResetErrorCode>
			return 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e001      	b.n	8001302 <errProcess+0x6a>
		}
		return 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	e7ff      	b.n	8001302 <errProcess+0x6a>
	}
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000440 	.word	0x20000440

0800130c <modeReset>:
	}
}


void modeReset() //Integrator value reset function
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	rtDW.DischargeIntegrator_DSTATE = 0;
 8001310:	4910      	ldr	r1, [pc, #64]	@ (8001354 <modeReset+0x48>)
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtDW.DischargeIntegrator1_DSTATE = 0;
 800131e:	490d      	ldr	r1, [pc, #52]	@ (8001354 <modeReset+0x48>)
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e9c1 2306 	strd	r2, r3, [r1, #24]

	rtDW1.ChargeIntegrator_DSTATE = 0;
 800132c:	490a      	ldr	r1, [pc, #40]	@ (8001358 <modeReset+0x4c>)
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtDW1.ChargeIntegrator1_DSTATE = 0;
 800133a:	4907      	ldr	r1, [pc, #28]	@ (8001358 <modeReset+0x4c>)
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//TODO What else should be reseted in the case of mode change?
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000400 	.word	0x20000400
 8001358:	200003a8 	.word	0x200003a8

0800135c <pwmStop>:

}


void pwmStop()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	ResetErrorCode();
 8001360:	f7ff f978 	bl	8000654 <ResetErrorCode>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001364:	2100      	movs	r1, #0
 8001366:	4804      	ldr	r0, [pc, #16]	@ (8001378 <pwmStop+0x1c>)
 8001368:	f002 fdf8 	bl	8003f5c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800136c:	2100      	movs	r1, #0
 800136e:	4802      	ldr	r0, [pc, #8]	@ (8001378 <pwmStop+0x1c>)
 8001370:	f003 fcaa 	bl	8004cc8 <HAL_TIMEx_PWMN_Stop>

	//TODO Should we set duty to zero in case of pwm stopping?
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000114 	.word	0x20000114

0800137c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_MspInit+0x44>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	4a0e      	ldr	r2, [pc, #56]	@ (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	@ 0x40
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_MspInit+0x44>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_MspInit+0x44>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_MspInit+0x44>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	@ 0x30
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a2a      	ldr	r2, [pc, #168]	@ (800148c <HAL_ADC_MspInit+0xc8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d124      	bne.n	8001430 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	4a29      	ldr	r2, [pc, #164]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f2:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001416:	2307      	movs	r3, #7
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	481a      	ldr	r0, [pc, #104]	@ (8001494 <HAL_ADC_MspInit+0xd0>)
 800142a:	f001 f853 	bl	80024d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 800142e:	e028      	b.n	8001482 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a18      	ldr	r2, [pc, #96]	@ (8001498 <HAL_ADC_MspInit+0xd4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d123      	bne.n	8001482 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	4a14      	ldr	r2, [pc, #80]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 8001440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001444:	6453      	str	r3, [r2, #68]	@ 0x44
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a0e      	ldr	r2, [pc, #56]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <HAL_ADC_MspInit+0xcc>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800146a:	2318      	movs	r3, #24
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	@ (8001494 <HAL_ADC_MspInit+0xd0>)
 800147e:	f001 f829 	bl	80024d4 <HAL_GPIO_Init>
}
 8001482:	bf00      	nop
 8001484:	3730      	adds	r7, #48	@ 0x30
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40012000 	.word	0x40012000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000
 8001498:	40012100 	.word	0x40012100

0800149c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	@ 0x30
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a3e      	ldr	r2, [pc, #248]	@ (80015b4 <HAL_CAN_MspInit+0x118>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d132      	bne.n	8001524 <HAL_CAN_MspInit+0x88>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014be:	4b3e      	ldr	r3, [pc, #248]	@ (80015b8 <HAL_CAN_MspInit+0x11c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	4a3c      	ldr	r2, [pc, #240]	@ (80015b8 <HAL_CAN_MspInit+0x11c>)
 80014c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014c8:	4b3b      	ldr	r3, [pc, #236]	@ (80015b8 <HAL_CAN_MspInit+0x11c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d10b      	bne.n	80014e8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014d0:	4b3a      	ldr	r3, [pc, #232]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	4a39      	ldr	r2, [pc, #228]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 80014d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014da:	6413      	str	r3, [r2, #64]	@ 0x40
 80014dc:	4b37      	ldr	r3, [pc, #220]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	4a33      	ldr	r2, [pc, #204]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f4:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001500:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001512:	2309      	movs	r3, #9
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4828      	ldr	r0, [pc, #160]	@ (80015c0 <HAL_CAN_MspInit+0x124>)
 800151e:	f000 ffd9 	bl	80024d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001522:	e042      	b.n	80015aa <HAL_CAN_MspInit+0x10e>
  else if(hcan->Instance==CAN2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <HAL_CAN_MspInit+0x128>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d13d      	bne.n	80015aa <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800152e:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a22      	ldr	r2, [pc, #136]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 8001534:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_CAN_MspInit+0x11c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <HAL_CAN_MspInit+0x11c>)
 800154e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001550:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_CAN_MspInit+0x11c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10b      	bne.n	8001570 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	4a17      	ldr	r2, [pc, #92]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 800155e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001562:	6413      	str	r3, [r2, #64]	@ 0x40
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	4a11      	ldr	r2, [pc, #68]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	6313      	str	r3, [r2, #48]	@ 0x30
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <HAL_CAN_MspInit+0x120>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001588:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800159a:	2309      	movs	r3, #9
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <HAL_CAN_MspInit+0x12c>)
 80015a6:	f000 ff95 	bl	80024d4 <HAL_GPIO_Init>
}
 80015aa:	bf00      	nop
 80015ac:	3730      	adds	r7, #48	@ 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40006400 	.word	0x40006400
 80015b8:	20000368 	.word	0x20000368
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40006800 	.word	0x40006800
 80015c8:	40020400 	.word	0x40020400

080015cc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a25      	ldr	r2, [pc, #148]	@ (8001670 <HAL_TIM_PWM_MspInit+0xa4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10c      	bne.n	80015f8 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015de:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a24      	ldr	r2, [pc, #144]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 80015f6:	e034      	b.n	8001662 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001678 <HAL_TIM_PWM_MspInit+0xac>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10c      	bne.n	800161c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a1b      	ldr	r2, [pc, #108]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
}
 800161a:	e022      	b.n	8001662 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM4)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a16      	ldr	r2, [pc, #88]	@ (800167c <HAL_TIM_PWM_MspInit+0xb0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10c      	bne.n	8001640 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6413      	str	r3, [r2, #64]	@ 0x40
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
}
 800163e:	e010      	b.n	8001662 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM12)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <HAL_TIM_PWM_MspInit+0xb4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10b      	bne.n	8001662 <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 8001650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001654:	6413      	str	r3, [r2, #64]	@ 0x40
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <HAL_TIM_PWM_MspInit+0xa8>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
}
 8001662:	bf00      	nop
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40010000 	.word	0x40010000
 8001674:	40023800 	.word	0x40023800
 8001678:	40000400 	.word	0x40000400
 800167c:	40000800 	.word	0x40000800
 8001680:	40001800 	.word	0x40001800

08001684 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1a      	ldr	r2, [pc, #104]	@ (80016fc <HAL_TIM_Base_MspInit+0x78>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d114      	bne.n	80016c0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_TIM_Base_MspInit+0x7c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	4a19      	ldr	r2, [pc, #100]	@ (8001700 <HAL_TIM_Base_MspInit+0x7c>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <HAL_TIM_Base_MspInit+0x7c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2036      	movs	r0, #54	@ 0x36
 80016b4:	f000 fed7 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b8:	2036      	movs	r0, #54	@ 0x36
 80016ba:	f000 fef0 	bl	800249e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 80016be:	e018      	b.n	80016f2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001704 <HAL_TIM_Base_MspInit+0x80>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d113      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_TIM_Base_MspInit+0x7c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001700 <HAL_TIM_Base_MspInit+0x7c>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_TIM_Base_MspInit+0x7c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2037      	movs	r0, #55	@ 0x37
 80016e8:	f000 febd 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016ec:	2037      	movs	r0, #55	@ 0x37
 80016ee:	f000 fed6 	bl	800249e <HAL_NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40001000 	.word	0x40001000
 8001700:	40023800 	.word	0x40023800
 8001704:	40001400 	.word	0x40001400

08001708 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	@ 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a53      	ldr	r2, [pc, #332]	@ (8001874 <HAL_TIM_MspPostInit+0x16c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d139      	bne.n	800179e <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b53      	ldr	r3, [pc, #332]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a52      	ldr	r2, [pc, #328]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b50      	ldr	r3, [pc, #320]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001742:	4b4d      	ldr	r3, [pc, #308]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a4c      	ldr	r2, [pc, #304]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b4a      	ldr	r3, [pc, #296]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697b      	ldr	r3, [r7, #20]
    PA7     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800175a:	2380      	movs	r3, #128	@ 0x80
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800176a:	2301      	movs	r3, #1
 800176c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4841      	ldr	r0, [pc, #260]	@ (800187c <HAL_TIM_MspPostInit+0x174>)
 8001776:	f000 fead 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800177a:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800178c:	2301      	movs	r3, #1
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	483a      	ldr	r0, [pc, #232]	@ (8001880 <HAL_TIM_MspPostInit+0x178>)
 8001798:	f000 fe9c 	bl	80024d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800179c:	e065      	b.n	800186a <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM3)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a38      	ldr	r2, [pc, #224]	@ (8001884 <HAL_TIM_MspPostInit+0x17c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d11c      	bne.n	80017e2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	4a32      	ldr	r2, [pc, #200]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b4:	4b30      	ldr	r3, [pc, #192]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LD1_GREEN_Pin;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d0:	2302      	movs	r3, #2
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LD1_GREEN_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	482b      	ldr	r0, [pc, #172]	@ (8001888 <HAL_TIM_MspPostInit+0x180>)
 80017dc:	f000 fe7a 	bl	80024d4 <HAL_GPIO_Init>
}
 80017e0:	e043      	b.n	800186a <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM4)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a29      	ldr	r2, [pc, #164]	@ (800188c <HAL_TIM_MspPostInit+0x184>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d11c      	bne.n	8001826 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LD2_BLUE_Pin;
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001814:	2302      	movs	r3, #2
 8001816:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LD2_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	481a      	ldr	r0, [pc, #104]	@ (8001888 <HAL_TIM_MspPostInit+0x180>)
 8001820:	f000 fe58 	bl	80024d4 <HAL_GPIO_Init>
}
 8001824:	e021      	b.n	800186a <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM12)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a19      	ldr	r2, [pc, #100]	@ (8001890 <HAL_TIM_MspPostInit+0x188>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d11c      	bne.n	800186a <HAL_TIM_MspPostInit+0x162>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	4a10      	ldr	r2, [pc, #64]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	6313      	str	r3, [r2, #48]	@ 0x30
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <HAL_TIM_MspPostInit+0x170>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LD3_RED_Pin;
 8001848:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800185a:	2309      	movs	r3, #9
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LD3_RED_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4808      	ldr	r0, [pc, #32]	@ (8001888 <HAL_TIM_MspPostInit+0x180>)
 8001866:	f000 fe35 	bl	80024d4 <HAL_GPIO_Init>
}
 800186a:	bf00      	nop
 800186c:	3730      	adds	r7, #48	@ 0x30
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010000 	.word	0x40010000
 8001878:	40023800 	.word	0x40023800
 800187c:	40020000 	.word	0x40020000
 8001880:	40021000 	.word	0x40021000
 8001884:	40000400 	.word	0x40000400
 8001888:	40020400 	.word	0x40020400
 800188c:	40000800 	.word	0x40000800
 8001890:	40001800 	.word	0x40001800

08001894 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b0ae      	sub	sp, #184	@ 0xb8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2290      	movs	r2, #144	@ 0x90
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 fb83 	bl	8005fc0 <memset>
  if(huart->Instance==USART3)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a33      	ldr	r2, [pc, #204]	@ (800198c <HAL_UART_MspInit+0xf8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d15e      	bne.n	8001982 <HAL_UART_MspInit+0xee>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 fcf8 	bl	80032c8 <HAL_RCCEx_PeriphCLKConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018de:	f7ff fc51 	bl	8001184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_UART_MspInit+0xfc>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001990 <HAL_UART_MspInit+0xfc>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ee:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <HAL_UART_MspInit+0xfc>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <HAL_UART_MspInit+0xfc>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a24      	ldr	r2, [pc, #144]	@ (8001990 <HAL_UART_MspInit+0xfc>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <HAL_UART_MspInit+0xfc>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <HAL_UART_MspInit+0xfc>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a1e      	ldr	r2, [pc, #120]	@ (8001990 <HAL_UART_MspInit+0xfc>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <HAL_UART_MspInit+0xfc>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800192a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800192e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001944:	2307      	movs	r3, #7
 8001946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800194e:	4619      	mov	r1, r3
 8001950:	4810      	ldr	r0, [pc, #64]	@ (8001994 <HAL_UART_MspInit+0x100>)
 8001952:	f000 fdbf 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001956:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800195a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001970:	2307      	movs	r3, #7
 8001972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001976:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800197a:	4619      	mov	r1, r3
 800197c:	4806      	ldr	r0, [pc, #24]	@ (8001998 <HAL_UART_MspInit+0x104>)
 800197e:	f000 fda9 	bl	80024d4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001982:	bf00      	nop
 8001984:	37b8      	adds	r7, #184	@ 0xb8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40004800 	.word	0x40004800
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400
 8001998:	40020c00 	.word	0x40020c00

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f2:	f000 f8ad 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM6_DAC_IRQHandler+0x10>)
 8001a02:	f002 fb2b 	bl	800405c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  	 //HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200001f8 	.word	0x200001f8

08001a10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM7_IRQHandler+0x10>)
 8001a16:	f002 fb21 	bl	800405c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000244 	.word	0x20000244

08001a24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a09      	ldr	r2, [pc, #36]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		SetStepFlag();
 8001a36:	f7fe fd95 	bl	8000564 <SetStepFlag>
	}
	if(htim->Instance == TIM7)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d105      	bne.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		SetLedFlag();
 8001a44:	f7fe fdbc 	bl	80005c0 <SetLedFlag>
		SetDebugStepFlag();
 8001a48:	f7fe fe3e 	bl	80006c8 <SetDebugStepFlag>

		//TODO Change to specific timer for handler
		SetHandlerStepFlag();
 8001a4c:	f7fe fe1e 	bl	800068c <SetHandlerStepFlag>
	}
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40001000 	.word	0x40001000
 8001a5c:	40001400 	.word	0x40001400

08001a60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001abc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a88:	f7ff ffea 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	@ (8001ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f004 fa8d 	bl	8005fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7fe fe13 	bl	80006e0 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ac8:	08006058 	.word	0x08006058
  ldr r2, =_sbss
 8001acc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ad0:	20000478 	.word	0x20000478

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>

08001ad6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ada:	2003      	movs	r0, #3
 8001adc:	f000 fcb8 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae0:	200f      	movs	r0, #15
 8001ae2:	f000 f805 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae6:	f7ff fc49 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fcd3 	bl	80024ba <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 fc9b 	bl	8002466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	@ (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008
 8001b74:	2000036c 	.word	0x2000036c

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	2000036c 	.word	0x2000036c

08001b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e031      	b.n	8001c0a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fc08 	bl	80013c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d116      	bne.n	8001bfc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <HAL_ADC_Init+0x84>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	f043 0202 	orr.w	r2, r3, #2
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f970 	bl	8001ec4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bfa:	e001      	b.n	8001c00 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	ffffeefd 	.word	0xffffeefd

08001c18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1c>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e136      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x28a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d93a      	bls.n	8001cba <HAL_ADC_ConfigChannel+0xa2>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c4c:	d035      	beq.n	8001cba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68d9      	ldr	r1, [r3, #12]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	3b1e      	subs	r3, #30
 8001c64:	2207      	movs	r2, #7
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	400a      	ands	r2, r1
 8001c72:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a8d      	ldr	r2, [pc, #564]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x298>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10a      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68d9      	ldr	r1, [r3, #12]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	061a      	lsls	r2, r3, #24
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c92:	e035      	b.n	8001d00 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68d9      	ldr	r1, [r3, #12]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4403      	add	r3, r0
 8001cac:	3b1e      	subs	r3, #30
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb8:	e022      	b.n	8001d00 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6919      	ldr	r1, [r3, #16]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	2207      	movs	r2, #7
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	400a      	ands	r2, r1
 8001cdc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6919      	ldr	r1, [r3, #16]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4403      	add	r3, r0
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	d824      	bhi.n	8001d52 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	3b05      	subs	r3, #5
 8001d1a:	221f      	movs	r2, #31
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43da      	mvns	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	400a      	ands	r2, r1
 8001d28:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b05      	subs	r3, #5
 8001d44:	fa00 f203 	lsl.w	r2, r0, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d50:	e04c      	b.n	8001dec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d824      	bhi.n	8001da4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b23      	subs	r3, #35	@ 0x23
 8001d6c:	221f      	movs	r2, #31
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	400a      	ands	r2, r1
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b23      	subs	r3, #35	@ 0x23
 8001d96:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001da2:	e023      	b.n	8001dec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	3b41      	subs	r3, #65	@ 0x41
 8001db6:	221f      	movs	r2, #31
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b41      	subs	r3, #65	@ 0x41
 8001de0:	fa00 f203 	lsl.w	r2, r0, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a30      	ldr	r2, [pc, #192]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x29c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d10a      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1f4>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e00:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e06:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e0a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a28      	ldr	r2, [pc, #160]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x29c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10f      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x21e>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d10b      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001e1e:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a25      	ldr	r2, [pc, #148]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e28:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e2a:	4b23      	ldr	r3, [pc, #140]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a22      	ldr	r2, [pc, #136]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e34:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x29c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d12b      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x280>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x298>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d003      	beq.n	8001e52 <HAL_ADC_ConfigChannel+0x23a>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b11      	cmp	r3, #17
 8001e50:	d122      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e52:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a18      	ldr	r2, [pc, #96]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e58:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e5c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4a15      	ldr	r2, [pc, #84]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e68:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a10      	ldr	r2, [pc, #64]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x298>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d111      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <HAL_ADC_ConfigChannel+0x2a4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a11      	ldr	r2, [pc, #68]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9a      	lsrs	r2, r3, #18
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e8a:	e002      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f9      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	10000012 	.word	0x10000012
 8001eb4:	40012000 	.word	0x40012000
 8001eb8:	40012300 	.word	0x40012300
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	431bde83 	.word	0x431bde83

08001ec4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ecc:	4b78      	ldr	r3, [pc, #480]	@ (80020b0 <ADC_Init+0x1ec>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a77      	ldr	r2, [pc, #476]	@ (80020b0 <ADC_Init+0x1ec>)
 8001ed2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001ed6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ed8:	4b75      	ldr	r3, [pc, #468]	@ (80020b0 <ADC_Init+0x1ec>)
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4973      	ldr	r1, [pc, #460]	@ (80020b0 <ADC_Init+0x1ec>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ef4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	021a      	lsls	r2, r3, #8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f52:	4a58      	ldr	r2, [pc, #352]	@ (80020b4 <ADC_Init+0x1f0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d022      	beq.n	8001f9e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6899      	ldr	r1, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	e00f      	b.n	8001fbe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0202 	bic.w	r2, r2, #2
 8001fcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6899      	ldr	r1, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	005a      	lsls	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ffa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800200a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	3b01      	subs	r3, #1
 8002018:	035a      	lsls	r2, r3, #13
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	e007      	b.n	8002034 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002032:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	3b01      	subs	r3, #1
 8002050:	051a      	lsls	r2, r3, #20
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6899      	ldr	r1, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002076:	025a      	lsls	r2, r3, #9
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800208e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6899      	ldr	r1, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	029a      	lsls	r2, r3, #10
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40012300 	.word	0x40012300
 80020b4:	0f000001 	.word	0x0f000001

080020b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0ed      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff f9e0 	bl	800149c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7ff fd44 	bl	8001b78 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020f2:	e012      	b.n	800211a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020f4:	f7ff fd40 	bl	8001b78 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b0a      	cmp	r3, #10
 8002100:	d90b      	bls.n	800211a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2205      	movs	r2, #5
 8002112:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0c5      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0e5      	beq.n	80020f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0202 	bic.w	r2, r2, #2
 8002136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002138:	f7ff fd1e 	bl	8001b78 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800213e:	e012      	b.n	8002166 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002140:	f7ff fd1a 	bl	8001b78 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b0a      	cmp	r3, #10
 800214c:	d90b      	bls.n	8002166 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2205      	movs	r2, #5
 800215e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e09f      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e5      	bne.n	8002140 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7e1b      	ldrb	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d108      	bne.n	800218e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e007      	b.n	800219e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7e5b      	ldrb	r3, [r3, #25]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e007      	b.n	80021c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e9b      	ldrb	r3, [r3, #26]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e007      	b.n	80021f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0220 	bic.w	r2, r2, #32
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7edb      	ldrb	r3, [r3, #27]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0210 	bic.w	r2, r2, #16
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e007      	b.n	800221c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0210 	orr.w	r2, r2, #16
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7f1b      	ldrb	r3, [r3, #28]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0208 	orr.w	r2, r2, #8
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e007      	b.n	8002246 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0208 	bic.w	r2, r2, #8
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7f5b      	ldrb	r3, [r3, #29]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0204 	orr.w	r2, r2, #4
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	ea42 0103 	orr.w	r1, r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <__NVIC_SetPriorityGrouping+0x40>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022de:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <__NVIC_SetPriorityGrouping+0x40>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00
 80022f4:	05fa0000 	.word	0x05fa0000

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	@ (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	@ (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	@ (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	@ 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f7ff ff8e 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff29 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff3e 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff8e 	bl	80023a4 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5d 	bl	8002350 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff31 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffa2 	bl	800240c <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	@ 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	e175      	b.n	80027e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024f4:	2201      	movs	r2, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	f040 8164 	bne.w	80027da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d005      	beq.n	800252a <HAL_GPIO_Init+0x56>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d130      	bne.n	800258c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 0201 	and.w	r2, r3, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b03      	cmp	r3, #3
 8002596:	d017      	beq.n	80025c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d123      	bne.n	800261c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	08da      	lsrs	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3208      	adds	r2, #8
 80025dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	08da      	lsrs	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3208      	adds	r2, #8
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0203 	and.w	r2, r3, #3
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80be 	beq.w	80027da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265e:	4b66      	ldr	r3, [pc, #408]	@ (80027f8 <HAL_GPIO_Init+0x324>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	4a65      	ldr	r2, [pc, #404]	@ (80027f8 <HAL_GPIO_Init+0x324>)
 8002664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002668:	6453      	str	r3, [r2, #68]	@ 0x44
 800266a:	4b63      	ldr	r3, [pc, #396]	@ (80027f8 <HAL_GPIO_Init+0x324>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002676:	4a61      	ldr	r2, [pc, #388]	@ (80027fc <HAL_GPIO_Init+0x328>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3302      	adds	r3, #2
 800267e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	220f      	movs	r2, #15
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a58      	ldr	r2, [pc, #352]	@ (8002800 <HAL_GPIO_Init+0x32c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d037      	beq.n	8002712 <HAL_GPIO_Init+0x23e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a57      	ldr	r2, [pc, #348]	@ (8002804 <HAL_GPIO_Init+0x330>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d031      	beq.n	800270e <HAL_GPIO_Init+0x23a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a56      	ldr	r2, [pc, #344]	@ (8002808 <HAL_GPIO_Init+0x334>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d02b      	beq.n	800270a <HAL_GPIO_Init+0x236>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a55      	ldr	r2, [pc, #340]	@ (800280c <HAL_GPIO_Init+0x338>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d025      	beq.n	8002706 <HAL_GPIO_Init+0x232>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a54      	ldr	r2, [pc, #336]	@ (8002810 <HAL_GPIO_Init+0x33c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01f      	beq.n	8002702 <HAL_GPIO_Init+0x22e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a53      	ldr	r2, [pc, #332]	@ (8002814 <HAL_GPIO_Init+0x340>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d019      	beq.n	80026fe <HAL_GPIO_Init+0x22a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a52      	ldr	r2, [pc, #328]	@ (8002818 <HAL_GPIO_Init+0x344>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0x226>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a51      	ldr	r2, [pc, #324]	@ (800281c <HAL_GPIO_Init+0x348>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00d      	beq.n	80026f6 <HAL_GPIO_Init+0x222>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a50      	ldr	r2, [pc, #320]	@ (8002820 <HAL_GPIO_Init+0x34c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <HAL_GPIO_Init+0x21e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002824 <HAL_GPIO_Init+0x350>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_GPIO_Init+0x21a>
 80026ea:	2309      	movs	r3, #9
 80026ec:	e012      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026ee:	230a      	movs	r3, #10
 80026f0:	e010      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026f2:	2308      	movs	r3, #8
 80026f4:	e00e      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026f6:	2307      	movs	r3, #7
 80026f8:	e00c      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026fa:	2306      	movs	r3, #6
 80026fc:	e00a      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026fe:	2305      	movs	r3, #5
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x240>
 8002702:	2304      	movs	r3, #4
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x240>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x240>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x240>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x240>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	@ (80027fc <HAL_GPIO_Init+0x328>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b3d      	ldr	r3, [pc, #244]	@ (8002828 <HAL_GPIO_Init+0x354>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a34      	ldr	r2, [pc, #208]	@ (8002828 <HAL_GPIO_Init+0x354>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b32      	ldr	r3, [pc, #200]	@ (8002828 <HAL_GPIO_Init+0x354>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <HAL_GPIO_Init+0x354>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <HAL_GPIO_Init+0x354>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002828 <HAL_GPIO_Init+0x354>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002828 <HAL_GPIO_Init+0x354>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a14      	ldr	r2, [pc, #80]	@ (8002828 <HAL_GPIO_Init+0x354>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f ae86 	bls.w	80024f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40021400 	.word	0x40021400
 8002818:	40021800 	.word	0x40021800
 800281c:	40021c00 	.word	0x40021c00
 8002820:	40022000 	.word	0x40022000
 8002824:	40022400 	.word	0x40022400
 8002828:	40013c00 	.word	0x40013c00

0800282c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
 8002838:	4613      	mov	r3, r2
 800283a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800283c:	787b      	ldrb	r3, [r7, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002848:	e003      	b.n	8002852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	041a      	lsls	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a04      	ldr	r2, [pc, #16]	@ (800287c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40007000 	.word	0x40007000

08002880 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	4b23      	ldr	r3, [pc, #140]	@ (8002918 <HAL_PWREx_EnableOverDrive+0x98>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	4a22      	ldr	r2, [pc, #136]	@ (8002918 <HAL_PWREx_EnableOverDrive+0x98>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002894:	6413      	str	r3, [r2, #64]	@ 0x40
 8002896:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <HAL_PWREx_EnableOverDrive+0x98>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028a2:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ae:	f7ff f963 	bl	8001b78 <HAL_GetTick>
 80028b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028b4:	e009      	b.n	80028ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028b6:	f7ff f95f 	bl	8001b78 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028c4:	d901      	bls.n	80028ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e022      	b.n	8002910 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028ca:	4b14      	ldr	r3, [pc, #80]	@ (800291c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028d6:	d1ee      	bne.n	80028b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028d8:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0f      	ldr	r2, [pc, #60]	@ (800291c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e4:	f7ff f948 	bl	8001b78 <HAL_GetTick>
 80028e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028ea:	e009      	b.n	8002900 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028ec:	f7ff f944 	bl	8001b78 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028fa:	d901      	bls.n	8002900 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e007      	b.n	8002910 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800290c:	d1ee      	bne.n	80028ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000

08002920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e29b      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002944:	4b96      	ldr	r3, [pc, #600]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b04      	cmp	r3, #4
 800294e:	d00c      	beq.n	800296a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002950:	4b93      	ldr	r3, [pc, #588]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b08      	cmp	r3, #8
 800295a:	d112      	bne.n	8002982 <HAL_RCC_OscConfig+0x62>
 800295c:	4b90      	ldr	r3, [pc, #576]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002968:	d10b      	bne.n	8002982 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x130>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d168      	bne.n	8002a50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e275      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x7a>
 800298c:	4b84      	ldr	r3, [pc, #528]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a83      	ldr	r2, [pc, #524]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e02e      	b.n	80029f8 <HAL_RCC_OscConfig+0xd8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x9c>
 80029a2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xd8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0xc0>
 80029c6:	4b76      	ldr	r3, [pc, #472]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a75      	ldr	r2, [pc, #468]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b73      	ldr	r3, [pc, #460]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a72      	ldr	r2, [pc, #456]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xd8>
 80029e0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6b      	ldr	r2, [pc, #428]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7ff f8ba 	bl	8001b78 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a08:	f7ff f8b6 	bl	8001b78 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	@ 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e229      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b61      	ldr	r3, [pc, #388]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe8>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff f8a6 	bl	8001b78 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7ff f8a2 	bl	8001b78 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	@ 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e215      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	4b57      	ldr	r3, [pc, #348]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x110>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d069      	beq.n	8002b32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a5e:	4b50      	ldr	r3, [pc, #320]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d11c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x190>
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x17a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1e9      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	493d      	ldr	r1, [pc, #244]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e040      	b.n	8002b32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d023      	beq.n	8002b00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b39      	ldr	r3, [pc, #228]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a38      	ldr	r2, [pc, #224]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7ff f858 	bl	8001b78 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002acc:	f7ff f854 	bl	8001b78 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1c7      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b30      	ldr	r3, [pc, #192]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4929      	ldr	r1, [pc, #164]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]
 8002afe:	e018      	b.n	8002b32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a26      	ldr	r2, [pc, #152]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7ff f834 	bl	8001b78 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b14:	f7ff f830 	bl	8001b78 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1a3      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d038      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d019      	beq.n	8002b7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b46:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7ff f811 	bl	8001b78 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5a:	f7ff f80d 	bl	8001b78 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e180      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x23a>
 8002b78:	e01a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_RCC_OscConfig+0x280>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fff7 	bl	8001b78 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fff3 	bl	8001b78 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d903      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e166      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
 8002ba0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ee      	bne.n	8002b8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a4 	beq.w	8002d06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbe:	4b8c      	ldr	r3, [pc, #560]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	4b89      	ldr	r3, [pc, #548]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	4a88      	ldr	r2, [pc, #544]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd6:	4b86      	ldr	r3, [pc, #536]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be6:	4b83      	ldr	r3, [pc, #524]	@ (8002df4 <HAL_RCC_OscConfig+0x4d4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d118      	bne.n	8002c24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bf2:	4b80      	ldr	r3, [pc, #512]	@ (8002df4 <HAL_RCC_OscConfig+0x4d4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7f      	ldr	r2, [pc, #508]	@ (8002df4 <HAL_RCC_OscConfig+0x4d4>)
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfe:	f7fe ffbb 	bl	8001b78 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c06:	f7fe ffb7 	bl	8001b78 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	@ 0x64
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e12a      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c18:	4b76      	ldr	r3, [pc, #472]	@ (8002df4 <HAL_RCC_OscConfig+0x4d4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x31a>
 8002c2c:	4b70      	ldr	r3, [pc, #448]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c30:	4a6f      	ldr	r2, [pc, #444]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c38:	e02d      	b.n	8002c96 <HAL_RCC_OscConfig+0x376>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x33c>
 8002c42:	4b6b      	ldr	r3, [pc, #428]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c46:	4a6a      	ldr	r2, [pc, #424]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4e:	4b68      	ldr	r3, [pc, #416]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	4a67      	ldr	r2, [pc, #412]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c54:	f023 0304 	bic.w	r3, r3, #4
 8002c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5a:	e01c      	b.n	8002c96 <HAL_RCC_OscConfig+0x376>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x35e>
 8002c64:	4b62      	ldr	r3, [pc, #392]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c68:	4a61      	ldr	r2, [pc, #388]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c70:	4b5f      	ldr	r3, [pc, #380]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c74:	4a5e      	ldr	r2, [pc, #376]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7c:	e00b      	b.n	8002c96 <HAL_RCC_OscConfig+0x376>
 8002c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	4a5b      	ldr	r2, [pc, #364]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8a:	4b59      	ldr	r3, [pc, #356]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	4a58      	ldr	r2, [pc, #352]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d015      	beq.n	8002cca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7fe ff6b 	bl	8001b78 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe ff67 	bl	8001b78 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0d8      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ee      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x386>
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe ff55 	bl	8001b78 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe ff51 	bl	8001b78 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0c2      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	4b41      	ldr	r3, [pc, #260]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	4a3c      	ldr	r2, [pc, #240]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d04:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80ae 	beq.w	8002e6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d10:	4b37      	ldr	r3, [pc, #220]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d06d      	beq.n	8002df8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d14b      	bne.n	8002dbc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b32      	ldr	r3, [pc, #200]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a31      	ldr	r2, [pc, #196]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe ff22 	bl	8001b78 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe ff1e 	bl	8001b78 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e091      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	019b      	lsls	r3, r3, #6
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	071b      	lsls	r3, r3, #28
 8002d82:	491b      	ldr	r1, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fef0 	bl	8001b78 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe feec 	bl	8001b78 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e05f      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x47c>
 8002dba:	e057      	b.n	8002e6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fed6 	bl	8001b78 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe fed2 	bl	8001b78 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e045      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de2:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4b0>
 8002dee:	e03d      	b.n	8002e6c <HAL_RCC_OscConfig+0x54c>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002df8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e78 <HAL_RCC_OscConfig+0x558>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d030      	beq.n	8002e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d129      	bne.n	8002e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d122      	bne.n	8002e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d119      	bne.n	8002e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d10f      	bne.n	8002e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0d0      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b6a      	ldr	r3, [pc, #424]	@ (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d910      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b67      	ldr	r3, [pc, #412]	@ (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 020f 	bic.w	r2, r3, #15
 8002eaa:	4965      	ldr	r1, [pc, #404]	@ (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	@ (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b8      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002edc:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a58      	ldr	r2, [pc, #352]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef4:	4b53      	ldr	r3, [pc, #332]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002efa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002efe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b50      	ldr	r3, [pc, #320]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	494d      	ldr	r1, [pc, #308]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d040      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b47      	ldr	r3, [pc, #284]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d115      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3e:	4b41      	ldr	r3, [pc, #260]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e073      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06b      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b39      	ldr	r3, [pc, #228]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4936      	ldr	r1, [pc, #216]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fe fe02 	bl	8001b78 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe fdfe 	bl	8001b78 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e053      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b27      	ldr	r3, [pc, #156]	@ (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d210      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b24      	ldr	r3, [pc, #144]	@ (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 020f 	bic.w	r2, r3, #15
 8002fb6:	4922      	ldr	r1, [pc, #136]	@ (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4916      	ldr	r1, [pc, #88]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ffa:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	490e      	ldr	r1, [pc, #56]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300e:	f000 f821 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8003012:	4602      	mov	r2, r0
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	490a      	ldr	r1, [pc, #40]	@ (8003048 <HAL_RCC_ClockConfig+0x1cc>)
 8003020:	5ccb      	ldrb	r3, [r1, r3]
 8003022:	fa22 f303 	lsr.w	r3, r2, r3
 8003026:	4a09      	ldr	r2, [pc, #36]	@ (800304c <HAL_RCC_ClockConfig+0x1d0>)
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_RCC_ClockConfig+0x1d4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fd5e 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023c00 	.word	0x40023c00
 8003044:	40023800 	.word	0x40023800
 8003048:	08006030 	.word	0x08006030
 800304c:	20000000 	.word	0x20000000
 8003050:	20000004 	.word	0x20000004

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003058:	b094      	sub	sp, #80	@ 0x50
 800305a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003060:	2300      	movs	r3, #0
 8003062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003064:	2300      	movs	r3, #0
 8003066:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306c:	4b79      	ldr	r3, [pc, #484]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d00d      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x40>
 8003078:	2b08      	cmp	r3, #8
 800307a:	f200 80e1 	bhi.w	8003240 <HAL_RCC_GetSysClockFreq+0x1ec>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x34>
 8003082:	2b04      	cmp	r3, #4
 8003084:	d003      	beq.n	800308e <HAL_RCC_GetSysClockFreq+0x3a>
 8003086:	e0db      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003088:	4b73      	ldr	r3, [pc, #460]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x204>)
 800308a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800308c:	e0db      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800308e:	4b73      	ldr	r3, [pc, #460]	@ (800325c <HAL_RCC_GetSysClockFreq+0x208>)
 8003090:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003092:	e0d8      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003094:	4b6f      	ldr	r3, [pc, #444]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800309c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800309e:	4b6d      	ldr	r3, [pc, #436]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d063      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	099b      	lsrs	r3, r3, #6
 80030b0:	2200      	movs	r2, #0
 80030b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030be:	2300      	movs	r3, #0
 80030c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	f04f 0000 	mov.w	r0, #0
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	0159      	lsls	r1, r3, #5
 80030d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d8:	0150      	lsls	r0, r2, #5
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4621      	mov	r1, r4
 80030e0:	1a51      	subs	r1, r2, r1
 80030e2:	6139      	str	r1, [r7, #16]
 80030e4:	4629      	mov	r1, r5
 80030e6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f8:	4659      	mov	r1, fp
 80030fa:	018b      	lsls	r3, r1, #6
 80030fc:	4651      	mov	r1, sl
 80030fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003102:	4651      	mov	r1, sl
 8003104:	018a      	lsls	r2, r1, #6
 8003106:	4651      	mov	r1, sl
 8003108:	ebb2 0801 	subs.w	r8, r2, r1
 800310c:	4659      	mov	r1, fp
 800310e:	eb63 0901 	sbc.w	r9, r3, r1
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800311e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003126:	4690      	mov	r8, r2
 8003128:	4699      	mov	r9, r3
 800312a:	4623      	mov	r3, r4
 800312c:	eb18 0303 	adds.w	r3, r8, r3
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	462b      	mov	r3, r5
 8003134:	eb49 0303 	adc.w	r3, r9, r3
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003146:	4629      	mov	r1, r5
 8003148:	024b      	lsls	r3, r1, #9
 800314a:	4621      	mov	r1, r4
 800314c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003150:	4621      	mov	r1, r4
 8003152:	024a      	lsls	r2, r1, #9
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315a:	2200      	movs	r2, #0
 800315c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800315e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003164:	f7fd f868 	bl	8000238 <__aeabi_uldivmod>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4613      	mov	r3, r2
 800316e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003170:	e058      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003172:	4b38      	ldr	r3, [pc, #224]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	2200      	movs	r2, #0
 800317a:	4618      	mov	r0, r3
 800317c:	4611      	mov	r1, r2
 800317e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
 8003188:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800318c:	4642      	mov	r2, r8
 800318e:	464b      	mov	r3, r9
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	0159      	lsls	r1, r3, #5
 800319a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800319e:	0150      	lsls	r0, r2, #5
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4641      	mov	r1, r8
 80031a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80031aa:	4649      	mov	r1, r9
 80031ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031c4:	ebb2 040a 	subs.w	r4, r2, sl
 80031c8:	eb63 050b 	sbc.w	r5, r3, fp
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	00eb      	lsls	r3, r5, #3
 80031d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031da:	00e2      	lsls	r2, r4, #3
 80031dc:	4614      	mov	r4, r2
 80031de:	461d      	mov	r5, r3
 80031e0:	4643      	mov	r3, r8
 80031e2:	18e3      	adds	r3, r4, r3
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	464b      	mov	r3, r9
 80031e8:	eb45 0303 	adc.w	r3, r5, r3
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031fa:	4629      	mov	r1, r5
 80031fc:	028b      	lsls	r3, r1, #10
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003204:	4621      	mov	r1, r4
 8003206:	028a      	lsls	r2, r1, #10
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320e:	2200      	movs	r2, #0
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	61fa      	str	r2, [r7, #28]
 8003214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003218:	f7fd f80e 	bl	8000238 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003224:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x200>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003234:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x204>)
 8003242:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003248:	4618      	mov	r0, r3
 800324a:	3750      	adds	r7, #80	@ 0x50
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200

08003260 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	@ (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	08006040 	.word	0x08006040

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffdc 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0b5b      	lsrs	r3, r3, #13
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	@ (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08006040 	.word	0x08006040

080032c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032f0:	4b69      	ldr	r3, [pc, #420]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a68      	ldr	r2, [pc, #416]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80032fa:	6093      	str	r3, [r2, #8]
 80032fc:	4b66      	ldr	r3, [pc, #408]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003304:	4964      	ldr	r1, [pc, #400]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003312:	2301      	movs	r3, #1
 8003314:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d017      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003322:	4b5d      	ldr	r3, [pc, #372]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003328:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003330:	4959      	ldr	r1, [pc, #356]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003340:	d101      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d017      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800335e:	4b4e      	ldr	r3, [pc, #312]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003364:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	494a      	ldr	r1, [pc, #296]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800337c:	d101      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800337e:	2301      	movs	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800338a:	2301      	movs	r3, #1
 800338c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800339a:	2301      	movs	r3, #1
 800339c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 808b 	beq.w	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	4a39      	ldr	r2, [pc, #228]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b8:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033c4:	4b35      	ldr	r3, [pc, #212]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a34      	ldr	r2, [pc, #208]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d0:	f7fe fbd2 	bl	8001b78 <HAL_GetTick>
 80033d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fe fbce 	bl	8001b78 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e38f      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ea:	4b2c      	ldr	r3, [pc, #176]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033f6:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d035      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	429a      	cmp	r2, r3
 8003412:	d02e      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003414:	4b20      	ldr	r3, [pc, #128]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800341e:	4b1e      	ldr	r3, [pc, #120]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	4a1d      	ldr	r2, [pc, #116]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003428:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800342a:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	4a1a      	ldr	r2, [pc, #104]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003434:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003436:	4a18      	ldr	r2, [pc, #96]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800343c:	4b16      	ldr	r3, [pc, #88]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d114      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fb96 	bl	8001b78 <HAL_GetTick>
 800344c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344e:	e00a      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fe fb92 	bl	8001b78 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e351      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0ee      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800347a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800347e:	d111      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800348e:	400b      	ands	r3, r1
 8003490:	4901      	ldr	r1, [pc, #4]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
 8003496:	e00b      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000
 80034a0:	0ffffcff 	.word	0x0ffffcff
 80034a4:	4bac      	ldr	r3, [pc, #688]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4aab      	ldr	r2, [pc, #684]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034aa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80034ae:	6093      	str	r3, [r2, #8]
 80034b0:	4ba9      	ldr	r3, [pc, #676]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034bc:	49a6      	ldr	r1, [pc, #664]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d010      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034ce:	4ba2      	ldr	r3, [pc, #648]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034d4:	4aa0      	ldr	r2, [pc, #640]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80034de:	4b9e      	ldr	r3, [pc, #632]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	499b      	ldr	r1, [pc, #620]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034fc:	4b96      	ldr	r3, [pc, #600]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800350a:	4993      	ldr	r1, [pc, #588]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800351e:	4b8e      	ldr	r3, [pc, #568]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003524:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800352c:	498a      	ldr	r1, [pc, #552]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003540:	4b85      	ldr	r3, [pc, #532]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800354e:	4982      	ldr	r1, [pc, #520]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003562:	4b7d      	ldr	r3, [pc, #500]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003568:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	4979      	ldr	r1, [pc, #484]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003584:	4b74      	ldr	r3, [pc, #464]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003592:	4971      	ldr	r1, [pc, #452]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ac:	f023 020c 	bic.w	r2, r3, #12
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035b4:	4968      	ldr	r1, [pc, #416]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035c8:	4b63      	ldr	r3, [pc, #396]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d6:	4960      	ldr	r1, [pc, #384]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	4957      	ldr	r1, [pc, #348]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800360c:	4b52      	ldr	r3, [pc, #328]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	494f      	ldr	r1, [pc, #316]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800362e:	4b4a      	ldr	r3, [pc, #296]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003634:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363c:	4946      	ldr	r1, [pc, #280]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003650:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365e:	493e      	ldr	r1, [pc, #248]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003672:	4b39      	ldr	r3, [pc, #228]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003678:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003680:	4935      	ldr	r1, [pc, #212]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003694:	4b30      	ldr	r3, [pc, #192]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036a2:	492d      	ldr	r1, [pc, #180]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d011      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036b6:	4b28      	ldr	r3, [pc, #160]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036bc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036c4:	4924      	ldr	r1, [pc, #144]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d4:	d101      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036f6:	4b18      	ldr	r3, [pc, #96]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003704:	4914      	ldr	r1, [pc, #80]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003718:	4b0f      	ldr	r3, [pc, #60]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003728:	490b      	ldr	r1, [pc, #44]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800374c:	4902      	ldr	r1, [pc, #8]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003754:	e002      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003768:	4b8a      	ldr	r3, [pc, #552]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800376a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800376e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003778:	4986      	ldr	r1, [pc, #536]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800378c:	4b81      	ldr	r3, [pc, #516]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003792:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800379c:	497d      	ldr	r1, [pc, #500]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d006      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80d6 	beq.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037b8:	4b76      	ldr	r3, [pc, #472]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a75      	ldr	r2, [pc, #468]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c4:	f7fe f9d8 	bl	8001b78 <HAL_GetTick>
 80037c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037cc:	f7fe f9d4 	bl	8001b78 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	@ 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e195      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037de:	4b6d      	ldr	r3, [pc, #436]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d021      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11d      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037fe:	4b65      	ldr	r3, [pc, #404]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800380c:	4b61      	ldr	r3, [pc, #388]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003812:	0e1b      	lsrs	r3, r3, #24
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	019a      	lsls	r2, r3, #6
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	431a      	orrs	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	061b      	lsls	r3, r3, #24
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	071b      	lsls	r3, r3, #28
 8003832:	4958      	ldr	r1, [pc, #352]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800384e:	d00a      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003858:	2b00      	cmp	r3, #0
 800385a:	d02e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003864:	d129      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003866:	4b4b      	ldr	r3, [pc, #300]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003874:	4b47      	ldr	r3, [pc, #284]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800387a:	0f1b      	lsrs	r3, r3, #28
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	019a      	lsls	r2, r3, #6
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	061b      	lsls	r3, r3, #24
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	493e      	ldr	r1, [pc, #248]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038a8:	f023 021f 	bic.w	r2, r3, #31
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	3b01      	subs	r3, #1
 80038b2:	4938      	ldr	r1, [pc, #224]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01d      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038c6:	4b33      	ldr	r3, [pc, #204]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038cc:	0e1b      	lsrs	r3, r3, #24
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038da:	0f1b      	lsrs	r3, r3, #28
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	019a      	lsls	r2, r3, #6
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	431a      	orrs	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	071b      	lsls	r3, r3, #28
 80038fa:	4926      	ldr	r1, [pc, #152]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d011      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	019a      	lsls	r2, r3, #6
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	071b      	lsls	r3, r3, #28
 800392a:	491a      	ldr	r1, [pc, #104]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003932:	4b18      	ldr	r3, [pc, #96]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a17      	ldr	r2, [pc, #92]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003938:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800393c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393e:	f7fe f91b 	bl	8001b78 <HAL_GetTick>
 8003942:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003946:	f7fe f917 	bl	8001b78 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b64      	cmp	r3, #100	@ 0x64
 8003952:	d901      	bls.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0d8      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003958:	4b0e      	ldr	r3, [pc, #56]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b01      	cmp	r3, #1
 8003968:	f040 80ce 	bne.w	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800396c:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a08      	ldr	r2, [pc, #32]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003978:	f7fe f8fe 	bl	8001b78 <HAL_GetTick>
 800397c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800397e:	e00b      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003980:	f7fe f8fa 	bl	8001b78 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d904      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0bb      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003998:	4b5e      	ldr	r3, [pc, #376]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a4:	d0ec      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02e      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d12a      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039ce:	4b51      	ldr	r3, [pc, #324]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	0f1b      	lsrs	r3, r3, #28
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	019a      	lsls	r2, r3, #6
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	431a      	orrs	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	071b      	lsls	r3, r3, #28
 8003a02:	4944      	ldr	r1, [pc, #272]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a0a:	4b42      	ldr	r3, [pc, #264]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a10:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	493d      	ldr	r1, [pc, #244]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d022      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a38:	d11d      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a3a:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a40:	0e1b      	lsrs	r3, r3, #24
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a48:	4b32      	ldr	r3, [pc, #200]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4e:	0f1b      	lsrs	r3, r3, #28
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	019a      	lsls	r2, r3, #6
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	431a      	orrs	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	061b      	lsls	r3, r3, #24
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	071b      	lsls	r3, r3, #28
 8003a6e:	4929      	ldr	r1, [pc, #164]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a82:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a88:	0e1b      	lsrs	r3, r3, #24
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	0c1b      	lsrs	r3, r3, #16
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	019a      	lsls	r2, r3, #6
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	071b      	lsls	r3, r3, #28
 8003ab6:	4917      	ldr	r1, [pc, #92]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	4911      	ldr	r1, [pc, #68]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae0:	f7fe f84a 	bl	8001b78 <HAL_GetTick>
 8003ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ae8:	f7fe f846 	bl	8001b78 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	@ 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e007      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b06:	d1ef      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800

08003b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e049      	b.n	8003bbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fda0 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4619      	mov	r1, r3
 8003b56:	4610      	mov	r0, r2
 8003b58:	f000 fcc4 	bl	80044e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e054      	b.n	8003c8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a26      	ldr	r2, [pc, #152]	@ (8003c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d022      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0a:	d01d      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a22      	ldr	r2, [pc, #136]	@ (8003c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d018      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d013      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00e      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1c      	ldr	r2, [pc, #112]	@ (8003cac <HAL_TIM_Base_Start_IT+0xe4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d115      	bne.n	8003c74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <HAL_TIM_Base_Start_IT+0xec>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d015      	beq.n	8003c86 <HAL_TIM_Base_Start_IT+0xbe>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c60:	d011      	beq.n	8003c86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c72:	e008      	b.n	8003c86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e000      	b.n	8003c88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800
 8003ca4:	40000c00 	.word	0x40000c00
 8003ca8:	40010400 	.word	0x40010400
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40001800 	.word	0x40001800
 8003cb4:	00010007 	.word	0x00010007

08003cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e049      	b.n	8003d5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fc74 	bl	80015cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f000 fbf4 	bl	80044e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_TIM_PWM_Start+0x24>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e03c      	b.n	8003e06 <HAL_TIM_PWM_Start+0x9e>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d109      	bne.n	8003da6 <HAL_TIM_PWM_Start+0x3e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e02f      	b.n	8003e06 <HAL_TIM_PWM_Start+0x9e>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d109      	bne.n	8003dc0 <HAL_TIM_PWM_Start+0x58>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e022      	b.n	8003e06 <HAL_TIM_PWM_Start+0x9e>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d109      	bne.n	8003dda <HAL_TIM_PWM_Start+0x72>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	e015      	b.n	8003e06 <HAL_TIM_PWM_Start+0x9e>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start+0x8c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e008      	b.n	8003e06 <HAL_TIM_PWM_Start+0x9e>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e092      	b.n	8003f34 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <HAL_TIM_PWM_Start+0xb6>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e1c:	e023      	b.n	8003e66 <HAL_TIM_PWM_Start+0xfe>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d104      	bne.n	8003e2e <HAL_TIM_PWM_Start+0xc6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e2c:	e01b      	b.n	8003e66 <HAL_TIM_PWM_Start+0xfe>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Start+0xd6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e3c:	e013      	b.n	8003e66 <HAL_TIM_PWM_Start+0xfe>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Start+0xe6>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e4c:	e00b      	b.n	8003e66 <HAL_TIM_PWM_Start+0xfe>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start+0xf6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e5c:	e003      	b.n	8003e66 <HAL_TIM_PWM_Start+0xfe>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	6839      	ldr	r1, [r7, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fe42 	bl	8004af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <HAL_TIM_PWM_Start+0x1d4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIM_PWM_Start+0x120>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2f      	ldr	r2, [pc, #188]	@ (8003f40 <HAL_TIM_PWM_Start+0x1d8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_TIM_PWM_Start+0x124>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_TIM_PWM_Start+0x126>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <HAL_TIM_PWM_Start+0x1d4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x18a>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x18a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a22      	ldr	r2, [pc, #136]	@ (8003f44 <HAL_TIM_PWM_Start+0x1dc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x18a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	@ (8003f48 <HAL_TIM_PWM_Start+0x1e0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x18a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1f      	ldr	r2, [pc, #124]	@ (8003f4c <HAL_TIM_PWM_Start+0x1e4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x18a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a19      	ldr	r2, [pc, #100]	@ (8003f40 <HAL_TIM_PWM_Start+0x1d8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x18a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f50 <HAL_TIM_PWM_Start+0x1e8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x18a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <HAL_TIM_PWM_Start+0x1ec>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d115      	bne.n	8003f1e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	4b17      	ldr	r3, [pc, #92]	@ (8003f58 <HAL_TIM_PWM_Start+0x1f0>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b06      	cmp	r3, #6
 8003f02:	d015      	beq.n	8003f30 <HAL_TIM_PWM_Start+0x1c8>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f0a:	d011      	beq.n	8003f30 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1c:	e008      	b.n	8003f30 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e000      	b.n	8003f32 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010400 	.word	0x40010400
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40001800 	.word	0x40001800
 8003f58:	00010007 	.word	0x00010007

08003f5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fdc2 	bl	8004af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a36      	ldr	r2, [pc, #216]	@ (8004054 <HAL_TIM_PWM_Stop+0xf8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_TIM_PWM_Stop+0x2c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a35      	ldr	r2, [pc, #212]	@ (8004058 <HAL_TIM_PWM_Stop+0xfc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d101      	bne.n	8003f8c <HAL_TIM_PWM_Stop+0x30>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_TIM_PWM_Stop+0x32>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d017      	beq.n	8003fc2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_TIM_PWM_Stop+0x66>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <HAL_TIM_PWM_Stop+0x66>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_TIM_PWM_Stop+0x96>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <HAL_TIM_PWM_Stop+0x96>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_PWM_Stop+0xa6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004000:	e023      	b.n	800404a <HAL_TIM_PWM_Stop+0xee>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b04      	cmp	r3, #4
 8004006:	d104      	bne.n	8004012 <HAL_TIM_PWM_Stop+0xb6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004010:	e01b      	b.n	800404a <HAL_TIM_PWM_Stop+0xee>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d104      	bne.n	8004022 <HAL_TIM_PWM_Stop+0xc6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004020:	e013      	b.n	800404a <HAL_TIM_PWM_Stop+0xee>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d104      	bne.n	8004032 <HAL_TIM_PWM_Stop+0xd6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004030:	e00b      	b.n	800404a <HAL_TIM_PWM_Stop+0xee>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b10      	cmp	r3, #16
 8004036:	d104      	bne.n	8004042 <HAL_TIM_PWM_Stop+0xe6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004040:	e003      	b.n	800404a <HAL_TIM_PWM_Stop+0xee>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40010000 	.word	0x40010000
 8004058:	40010400 	.word	0x40010400

0800405c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d020      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0202 	mvn.w	r2, #2
 8004090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9fe 	bl	80044a8 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f9f0 	bl	8004494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fa01 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d020      	beq.n	800410c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01b      	beq.n	800410c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0204 	mvn.w	r2, #4
 80040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f9d8 	bl	80044a8 <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f9ca 	bl	8004494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f9db 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0208 	mvn.w	r2, #8
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f9b2 	bl	80044a8 <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9a4 	bl	8004494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f9b5 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	d020      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0210 	mvn.w	r2, #16
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2208      	movs	r2, #8
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f98c 	bl	80044a8 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f97e 	bl	8004494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f98f 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00c      	beq.n	80041c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d007      	beq.n	80041c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0201 	mvn.w	r2, #1
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd fc2e 	bl	8001a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00c      	beq.n	80041f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d007      	beq.n	80041f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80041ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fedd 	bl	8004fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00c      	beq.n	800421a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fed5 	bl	8004fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00c      	beq.n	800423e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f949 	bl	80044d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00c      	beq.n	8004262 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f06f 0220 	mvn.w	r2, #32
 800425a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fe9d 	bl	8004f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004286:	2302      	movs	r3, #2
 8004288:	e0ff      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b14      	cmp	r3, #20
 8004296:	f200 80f0 	bhi.w	800447a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800429a:	a201      	add	r2, pc, #4	@ (adr r2, 80042a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042f5 	.word	0x080042f5
 80042a4:	0800447b 	.word	0x0800447b
 80042a8:	0800447b 	.word	0x0800447b
 80042ac:	0800447b 	.word	0x0800447b
 80042b0:	08004335 	.word	0x08004335
 80042b4:	0800447b 	.word	0x0800447b
 80042b8:	0800447b 	.word	0x0800447b
 80042bc:	0800447b 	.word	0x0800447b
 80042c0:	08004377 	.word	0x08004377
 80042c4:	0800447b 	.word	0x0800447b
 80042c8:	0800447b 	.word	0x0800447b
 80042cc:	0800447b 	.word	0x0800447b
 80042d0:	080043b7 	.word	0x080043b7
 80042d4:	0800447b 	.word	0x0800447b
 80042d8:	0800447b 	.word	0x0800447b
 80042dc:	0800447b 	.word	0x0800447b
 80042e0:	080043f9 	.word	0x080043f9
 80042e4:	0800447b 	.word	0x0800447b
 80042e8:	0800447b 	.word	0x0800447b
 80042ec:	0800447b 	.word	0x0800447b
 80042f0:	08004439 	.word	0x08004439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f99e 	bl	800463c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0208 	orr.w	r2, r2, #8
 800430e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0204 	bic.w	r2, r2, #4
 800431e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6999      	ldr	r1, [r3, #24]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	619a      	str	r2, [r3, #24]
      break;
 8004332:	e0a5      	b.n	8004480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f9f0 	bl	8004720 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800434e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800435e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6999      	ldr	r1, [r3, #24]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	021a      	lsls	r2, r3, #8
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	619a      	str	r2, [r3, #24]
      break;
 8004374:	e084      	b.n	8004480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fa47 	bl	8004810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0208 	orr.w	r2, r2, #8
 8004390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0204 	bic.w	r2, r2, #4
 80043a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69d9      	ldr	r1, [r3, #28]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	61da      	str	r2, [r3, #28]
      break;
 80043b4:	e064      	b.n	8004480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fa9d 	bl	80048fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69d9      	ldr	r1, [r3, #28]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	021a      	lsls	r2, r3, #8
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	61da      	str	r2, [r3, #28]
      break;
 80043f6:	e043      	b.n	8004480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fad4 	bl	80049ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0208 	orr.w	r2, r2, #8
 8004412:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0204 	bic.w	r2, r2, #4
 8004422:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004436:	e023      	b.n	8004480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fb06 	bl	8004a50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004452:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004462:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004478:	e002      	b.n	8004480 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	75fb      	strb	r3, [r7, #23]
      break;
 800447e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004488:	7dfb      	ldrb	r3, [r7, #23]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop

08004494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a46      	ldr	r2, [pc, #280]	@ (8004610 <TIM_Base_SetConfig+0x12c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004502:	d00f      	beq.n	8004524 <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a43      	ldr	r2, [pc, #268]	@ (8004614 <TIM_Base_SetConfig+0x130>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00b      	beq.n	8004524 <TIM_Base_SetConfig+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a42      	ldr	r2, [pc, #264]	@ (8004618 <TIM_Base_SetConfig+0x134>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a41      	ldr	r2, [pc, #260]	@ (800461c <TIM_Base_SetConfig+0x138>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0x40>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a40      	ldr	r2, [pc, #256]	@ (8004620 <TIM_Base_SetConfig+0x13c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d108      	bne.n	8004536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a35      	ldr	r2, [pc, #212]	@ (8004610 <TIM_Base_SetConfig+0x12c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d02b      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004544:	d027      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a32      	ldr	r2, [pc, #200]	@ (8004614 <TIM_Base_SetConfig+0x130>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d023      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a31      	ldr	r2, [pc, #196]	@ (8004618 <TIM_Base_SetConfig+0x134>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01f      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a30      	ldr	r2, [pc, #192]	@ (800461c <TIM_Base_SetConfig+0x138>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d01b      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2f      	ldr	r2, [pc, #188]	@ (8004620 <TIM_Base_SetConfig+0x13c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d017      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2e      	ldr	r2, [pc, #184]	@ (8004624 <TIM_Base_SetConfig+0x140>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2d      	ldr	r2, [pc, #180]	@ (8004628 <TIM_Base_SetConfig+0x144>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00f      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a2c      	ldr	r2, [pc, #176]	@ (800462c <TIM_Base_SetConfig+0x148>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00b      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2b      	ldr	r2, [pc, #172]	@ (8004630 <TIM_Base_SetConfig+0x14c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2a      	ldr	r2, [pc, #168]	@ (8004634 <TIM_Base_SetConfig+0x150>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a29      	ldr	r2, [pc, #164]	@ (8004638 <TIM_Base_SetConfig+0x154>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d108      	bne.n	80045a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800459c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a10      	ldr	r2, [pc, #64]	@ (8004610 <TIM_Base_SetConfig+0x12c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0xf8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <TIM_Base_SetConfig+0x13c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]
  }
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40010000 	.word	0x40010000
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800
 800461c:	40000c00 	.word	0x40000c00
 8004620:	40010400 	.word	0x40010400
 8004624:	40014000 	.word	0x40014000
 8004628:	40014400 	.word	0x40014400
 800462c:	40014800 	.word	0x40014800
 8004630:	40001800 	.word	0x40001800
 8004634:	40001c00 	.word	0x40001c00
 8004638:	40002000 	.word	0x40002000

0800463c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f023 0201 	bic.w	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4b2b      	ldr	r3, [pc, #172]	@ (8004714 <TIM_OC1_SetConfig+0xd8>)
 8004668:	4013      	ands	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0303 	bic.w	r3, r3, #3
 8004672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f023 0302 	bic.w	r3, r3, #2
 8004684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a21      	ldr	r2, [pc, #132]	@ (8004718 <TIM_OC1_SetConfig+0xdc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_OC1_SetConfig+0x64>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a20      	ldr	r2, [pc, #128]	@ (800471c <TIM_OC1_SetConfig+0xe0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10c      	bne.n	80046ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f023 0308 	bic.w	r3, r3, #8
 80046a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f023 0304 	bic.w	r3, r3, #4
 80046b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a16      	ldr	r2, [pc, #88]	@ (8004718 <TIM_OC1_SetConfig+0xdc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_OC1_SetConfig+0x8e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a15      	ldr	r2, [pc, #84]	@ (800471c <TIM_OC1_SetConfig+0xe0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d111      	bne.n	80046ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	621a      	str	r2, [r3, #32]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	fffeff8f 	.word	0xfffeff8f
 8004718:	40010000 	.word	0x40010000
 800471c:	40010400 	.word	0x40010400

08004720 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f023 0210 	bic.w	r2, r3, #16
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4b2e      	ldr	r3, [pc, #184]	@ (8004804 <TIM_OC2_SetConfig+0xe4>)
 800474c:	4013      	ands	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f023 0320 	bic.w	r3, r3, #32
 800476a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a23      	ldr	r2, [pc, #140]	@ (8004808 <TIM_OC2_SetConfig+0xe8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_OC2_SetConfig+0x68>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a22      	ldr	r2, [pc, #136]	@ (800480c <TIM_OC2_SetConfig+0xec>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d10d      	bne.n	80047a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800478e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <TIM_OC2_SetConfig+0xe8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_OC2_SetConfig+0x94>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a17      	ldr	r2, [pc, #92]	@ (800480c <TIM_OC2_SetConfig+0xec>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d113      	bne.n	80047dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	621a      	str	r2, [r3, #32]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	feff8fff 	.word	0xfeff8fff
 8004808:	40010000 	.word	0x40010000
 800480c:	40010400 	.word	0x40010400

08004810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4b2d      	ldr	r3, [pc, #180]	@ (80048f0 <TIM_OC3_SetConfig+0xe0>)
 800483c:	4013      	ands	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a22      	ldr	r2, [pc, #136]	@ (80048f4 <TIM_OC3_SetConfig+0xe4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_OC3_SetConfig+0x66>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a21      	ldr	r2, [pc, #132]	@ (80048f8 <TIM_OC3_SetConfig+0xe8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d10d      	bne.n	8004892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800487c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a17      	ldr	r2, [pc, #92]	@ (80048f4 <TIM_OC3_SetConfig+0xe4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_OC3_SetConfig+0x92>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a16      	ldr	r2, [pc, #88]	@ (80048f8 <TIM_OC3_SetConfig+0xe8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d113      	bne.n	80048ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	621a      	str	r2, [r3, #32]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	fffeff8f 	.word	0xfffeff8f
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40010400 	.word	0x40010400

080048fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4b1e      	ldr	r3, [pc, #120]	@ (80049a0 <TIM_OC4_SetConfig+0xa4>)
 8004928:	4013      	ands	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a13      	ldr	r2, [pc, #76]	@ (80049a4 <TIM_OC4_SetConfig+0xa8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_OC4_SetConfig+0x68>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a12      	ldr	r2, [pc, #72]	@ (80049a8 <TIM_OC4_SetConfig+0xac>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d109      	bne.n	8004978 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800496a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	019b      	lsls	r3, r3, #6
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	feff8fff 	.word	0xfeff8fff
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010400 	.word	0x40010400

080049ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a44 <TIM_OC5_SetConfig+0x98>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80049ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a12      	ldr	r2, [pc, #72]	@ (8004a48 <TIM_OC5_SetConfig+0x9c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC5_SetConfig+0x5e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a11      	ldr	r2, [pc, #68]	@ (8004a4c <TIM_OC5_SetConfig+0xa0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d109      	bne.n	8004a1e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	fffeff8f 	.word	0xfffeff8f
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40010400 	.word	0x40010400

08004a50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <TIM_OC6_SetConfig+0x9c>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	051b      	lsls	r3, r3, #20
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a13      	ldr	r2, [pc, #76]	@ (8004af0 <TIM_OC6_SetConfig+0xa0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC6_SetConfig+0x60>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a12      	ldr	r2, [pc, #72]	@ (8004af4 <TIM_OC6_SetConfig+0xa4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d109      	bne.n	8004ac4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	feff8fff 	.word	0xfeff8fff
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40010400 	.word	0x40010400

08004af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1a      	ldr	r2, [r3, #32]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1a      	ldr	r2, [r3, #32]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <HAL_TIMEx_PWMN_Start+0x24>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e022      	b.n	8004bae <HAL_TIMEx_PWMN_Start+0x6a>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d109      	bne.n	8004b82 <HAL_TIMEx_PWMN_Start+0x3e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	bf14      	ite	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	2300      	moveq	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	e015      	b.n	8004bae <HAL_TIMEx_PWMN_Start+0x6a>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d109      	bne.n	8004b9c <HAL_TIMEx_PWMN_Start+0x58>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	bf14      	ite	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	2300      	moveq	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e008      	b.n	8004bae <HAL_TIMEx_PWMN_Start+0x6a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e073      	b.n	8004c9e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIMEx_PWMN_Start+0x82>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc4:	e013      	b.n	8004bee <HAL_TIMEx_PWMN_Start+0xaa>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIMEx_PWMN_Start+0x92>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bd4:	e00b      	b.n	8004bee <HAL_TIMEx_PWMN_Start+0xaa>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d104      	bne.n	8004be6 <HAL_TIMEx_PWMN_Start+0xa2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004be4:	e003      	b.n	8004bee <HAL_TIMEx_PWMN_Start+0xaa>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f9ee 	bl	8004fd8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a25      	ldr	r2, [pc, #148]	@ (8004ca8 <HAL_TIMEx_PWMN_Start+0x164>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d022      	beq.n	8004c5c <HAL_TIMEx_PWMN_Start+0x118>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1e:	d01d      	beq.n	8004c5c <HAL_TIMEx_PWMN_Start+0x118>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a21      	ldr	r2, [pc, #132]	@ (8004cac <HAL_TIMEx_PWMN_Start+0x168>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d018      	beq.n	8004c5c <HAL_TIMEx_PWMN_Start+0x118>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a20      	ldr	r2, [pc, #128]	@ (8004cb0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_TIMEx_PWMN_Start+0x118>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb4 <HAL_TIMEx_PWMN_Start+0x170>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_TIMEx_PWMN_Start+0x118>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb8 <HAL_TIMEx_PWMN_Start+0x174>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_TIMEx_PWMN_Start+0x118>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cbc <HAL_TIMEx_PWMN_Start+0x178>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIMEx_PWMN_Start+0x118>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d115      	bne.n	8004c88 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	4b18      	ldr	r3, [pc, #96]	@ (8004cc4 <HAL_TIMEx_PWMN_Start+0x180>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d015      	beq.n	8004c9a <HAL_TIMEx_PWMN_Start+0x156>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c74:	d011      	beq.n	8004c9a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c86:	e008      	b.n	8004c9a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e000      	b.n	8004c9c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	40000800 	.word	0x40000800
 8004cb4:	40000c00 	.word	0x40000c00
 8004cb8:	40010400 	.word	0x40010400
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40001800 	.word	0x40001800
 8004cc4:	00010007 	.word	0x00010007

08004cc8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	6839      	ldr	r1, [r7, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f97c 	bl	8004fd8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10f      	bne.n	8004d10 <HAL_TIMEx_PWMN_Stop+0x48>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6a1a      	ldr	r2, [r3, #32]
 8004cf6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIMEx_PWMN_Stop+0x48>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6a1a      	ldr	r2, [r3, #32]
 8004d16:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <HAL_TIMEx_PWMN_Stop+0x78>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6a1a      	ldr	r2, [r3, #32]
 8004d26:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIMEx_PWMN_Stop+0x78>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d104      	bne.n	8004d50 <HAL_TIMEx_PWMN_Stop+0x88>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d4e:	e013      	b.n	8004d78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d104      	bne.n	8004d60 <HAL_TIMEx_PWMN_Stop+0x98>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d5e:	e00b      	b.n	8004d78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d104      	bne.n	8004d70 <HAL_TIMEx_PWMN_Stop+0xa8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d6e:	e003      	b.n	8004d78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e06d      	b.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a30      	ldr	r2, [pc, #192]	@ (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2f      	ldr	r2, [pc, #188]	@ (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d108      	bne.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004dd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a20      	ldr	r2, [pc, #128]	@ (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d022      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0e:	d01d      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1d      	ldr	r2, [pc, #116]	@ (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d018      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d013      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1a      	ldr	r2, [pc, #104]	@ (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00e      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a15      	ldr	r2, [pc, #84]	@ (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d009      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a16      	ldr	r2, [pc, #88]	@ (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d10c      	bne.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40010400 	.word	0x40010400
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40001800 	.word	0x40001800

08004ea0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e065      	b.n	8004f88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a16      	ldr	r2, [pc, #88]	@ (8004f94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d004      	beq.n	8004f4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a14      	ldr	r2, [pc, #80]	@ (8004f98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d115      	bne.n	8004f76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	051b      	lsls	r3, r3, #20
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40010400 	.word	0x40010400

08004f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	2204      	movs	r2, #4
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	431a      	orrs	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e040      	b.n	80050b6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7fc fc25 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2224      	movs	r2, #36	@ 0x24
 800504e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0201 	bic.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fa8d 	bl	8005588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f826 	bl	80050c0 <UART_SetConfig>
 8005074:	4603      	mov	r3, r0
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e01b      	b.n	80050b6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800508c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800509c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fb0c 	bl	80056cc <UART_CheckIdleState>
 80050b4:	4603      	mov	r3, r0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4ba6      	ldr	r3, [pc, #664]	@ (8005384 <UART_SetConfig+0x2c4>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	6979      	ldr	r1, [r7, #20]
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	430a      	orrs	r2, r1
 8005130:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a94      	ldr	r2, [pc, #592]	@ (8005388 <UART_SetConfig+0x2c8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d120      	bne.n	800517e <UART_SetConfig+0xbe>
 800513c:	4b93      	ldr	r3, [pc, #588]	@ (800538c <UART_SetConfig+0x2cc>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b03      	cmp	r3, #3
 8005148:	d816      	bhi.n	8005178 <UART_SetConfig+0xb8>
 800514a:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <UART_SetConfig+0x90>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005161 	.word	0x08005161
 8005154:	0800516d 	.word	0x0800516d
 8005158:	08005167 	.word	0x08005167
 800515c:	08005173 	.word	0x08005173
 8005160:	2301      	movs	r3, #1
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	e150      	b.n	8005408 <UART_SetConfig+0x348>
 8005166:	2302      	movs	r3, #2
 8005168:	77fb      	strb	r3, [r7, #31]
 800516a:	e14d      	b.n	8005408 <UART_SetConfig+0x348>
 800516c:	2304      	movs	r3, #4
 800516e:	77fb      	strb	r3, [r7, #31]
 8005170:	e14a      	b.n	8005408 <UART_SetConfig+0x348>
 8005172:	2308      	movs	r3, #8
 8005174:	77fb      	strb	r3, [r7, #31]
 8005176:	e147      	b.n	8005408 <UART_SetConfig+0x348>
 8005178:	2310      	movs	r3, #16
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e144      	b.n	8005408 <UART_SetConfig+0x348>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a83      	ldr	r2, [pc, #524]	@ (8005390 <UART_SetConfig+0x2d0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d132      	bne.n	80051ee <UART_SetConfig+0x12e>
 8005188:	4b80      	ldr	r3, [pc, #512]	@ (800538c <UART_SetConfig+0x2cc>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b0c      	cmp	r3, #12
 8005194:	d828      	bhi.n	80051e8 <UART_SetConfig+0x128>
 8005196:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <UART_SetConfig+0xdc>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080051e9 	.word	0x080051e9
 80051a4:	080051e9 	.word	0x080051e9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051dd 	.word	0x080051dd
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	080051e9 	.word	0x080051e9
 80051b8:	080051e9 	.word	0x080051e9
 80051bc:	080051d7 	.word	0x080051d7
 80051c0:	080051e9 	.word	0x080051e9
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051e9 	.word	0x080051e9
 80051cc:	080051e3 	.word	0x080051e3
 80051d0:	2300      	movs	r3, #0
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e118      	b.n	8005408 <UART_SetConfig+0x348>
 80051d6:	2302      	movs	r3, #2
 80051d8:	77fb      	strb	r3, [r7, #31]
 80051da:	e115      	b.n	8005408 <UART_SetConfig+0x348>
 80051dc:	2304      	movs	r3, #4
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e112      	b.n	8005408 <UART_SetConfig+0x348>
 80051e2:	2308      	movs	r3, #8
 80051e4:	77fb      	strb	r3, [r7, #31]
 80051e6:	e10f      	b.n	8005408 <UART_SetConfig+0x348>
 80051e8:	2310      	movs	r3, #16
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e10c      	b.n	8005408 <UART_SetConfig+0x348>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a68      	ldr	r2, [pc, #416]	@ (8005394 <UART_SetConfig+0x2d4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d120      	bne.n	800523a <UART_SetConfig+0x17a>
 80051f8:	4b64      	ldr	r3, [pc, #400]	@ (800538c <UART_SetConfig+0x2cc>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005202:	2b30      	cmp	r3, #48	@ 0x30
 8005204:	d013      	beq.n	800522e <UART_SetConfig+0x16e>
 8005206:	2b30      	cmp	r3, #48	@ 0x30
 8005208:	d814      	bhi.n	8005234 <UART_SetConfig+0x174>
 800520a:	2b20      	cmp	r3, #32
 800520c:	d009      	beq.n	8005222 <UART_SetConfig+0x162>
 800520e:	2b20      	cmp	r3, #32
 8005210:	d810      	bhi.n	8005234 <UART_SetConfig+0x174>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <UART_SetConfig+0x15c>
 8005216:	2b10      	cmp	r3, #16
 8005218:	d006      	beq.n	8005228 <UART_SetConfig+0x168>
 800521a:	e00b      	b.n	8005234 <UART_SetConfig+0x174>
 800521c:	2300      	movs	r3, #0
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e0f2      	b.n	8005408 <UART_SetConfig+0x348>
 8005222:	2302      	movs	r3, #2
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e0ef      	b.n	8005408 <UART_SetConfig+0x348>
 8005228:	2304      	movs	r3, #4
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e0ec      	b.n	8005408 <UART_SetConfig+0x348>
 800522e:	2308      	movs	r3, #8
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e0e9      	b.n	8005408 <UART_SetConfig+0x348>
 8005234:	2310      	movs	r3, #16
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e0e6      	b.n	8005408 <UART_SetConfig+0x348>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a56      	ldr	r2, [pc, #344]	@ (8005398 <UART_SetConfig+0x2d8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d120      	bne.n	8005286 <UART_SetConfig+0x1c6>
 8005244:	4b51      	ldr	r3, [pc, #324]	@ (800538c <UART_SetConfig+0x2cc>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800524e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005250:	d013      	beq.n	800527a <UART_SetConfig+0x1ba>
 8005252:	2bc0      	cmp	r3, #192	@ 0xc0
 8005254:	d814      	bhi.n	8005280 <UART_SetConfig+0x1c0>
 8005256:	2b80      	cmp	r3, #128	@ 0x80
 8005258:	d009      	beq.n	800526e <UART_SetConfig+0x1ae>
 800525a:	2b80      	cmp	r3, #128	@ 0x80
 800525c:	d810      	bhi.n	8005280 <UART_SetConfig+0x1c0>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <UART_SetConfig+0x1a8>
 8005262:	2b40      	cmp	r3, #64	@ 0x40
 8005264:	d006      	beq.n	8005274 <UART_SetConfig+0x1b4>
 8005266:	e00b      	b.n	8005280 <UART_SetConfig+0x1c0>
 8005268:	2300      	movs	r3, #0
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e0cc      	b.n	8005408 <UART_SetConfig+0x348>
 800526e:	2302      	movs	r3, #2
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e0c9      	b.n	8005408 <UART_SetConfig+0x348>
 8005274:	2304      	movs	r3, #4
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e0c6      	b.n	8005408 <UART_SetConfig+0x348>
 800527a:	2308      	movs	r3, #8
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e0c3      	b.n	8005408 <UART_SetConfig+0x348>
 8005280:	2310      	movs	r3, #16
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	e0c0      	b.n	8005408 <UART_SetConfig+0x348>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a44      	ldr	r2, [pc, #272]	@ (800539c <UART_SetConfig+0x2dc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d125      	bne.n	80052dc <UART_SetConfig+0x21c>
 8005290:	4b3e      	ldr	r3, [pc, #248]	@ (800538c <UART_SetConfig+0x2cc>)
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800529a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800529e:	d017      	beq.n	80052d0 <UART_SetConfig+0x210>
 80052a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052a4:	d817      	bhi.n	80052d6 <UART_SetConfig+0x216>
 80052a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052aa:	d00b      	beq.n	80052c4 <UART_SetConfig+0x204>
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b0:	d811      	bhi.n	80052d6 <UART_SetConfig+0x216>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <UART_SetConfig+0x1fe>
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ba:	d006      	beq.n	80052ca <UART_SetConfig+0x20a>
 80052bc:	e00b      	b.n	80052d6 <UART_SetConfig+0x216>
 80052be:	2300      	movs	r3, #0
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e0a1      	b.n	8005408 <UART_SetConfig+0x348>
 80052c4:	2302      	movs	r3, #2
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e09e      	b.n	8005408 <UART_SetConfig+0x348>
 80052ca:	2304      	movs	r3, #4
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	e09b      	b.n	8005408 <UART_SetConfig+0x348>
 80052d0:	2308      	movs	r3, #8
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e098      	b.n	8005408 <UART_SetConfig+0x348>
 80052d6:	2310      	movs	r3, #16
 80052d8:	77fb      	strb	r3, [r7, #31]
 80052da:	e095      	b.n	8005408 <UART_SetConfig+0x348>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2f      	ldr	r2, [pc, #188]	@ (80053a0 <UART_SetConfig+0x2e0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d125      	bne.n	8005332 <UART_SetConfig+0x272>
 80052e6:	4b29      	ldr	r3, [pc, #164]	@ (800538c <UART_SetConfig+0x2cc>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052f4:	d017      	beq.n	8005326 <UART_SetConfig+0x266>
 80052f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052fa:	d817      	bhi.n	800532c <UART_SetConfig+0x26c>
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005300:	d00b      	beq.n	800531a <UART_SetConfig+0x25a>
 8005302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005306:	d811      	bhi.n	800532c <UART_SetConfig+0x26c>
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <UART_SetConfig+0x254>
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005310:	d006      	beq.n	8005320 <UART_SetConfig+0x260>
 8005312:	e00b      	b.n	800532c <UART_SetConfig+0x26c>
 8005314:	2301      	movs	r3, #1
 8005316:	77fb      	strb	r3, [r7, #31]
 8005318:	e076      	b.n	8005408 <UART_SetConfig+0x348>
 800531a:	2302      	movs	r3, #2
 800531c:	77fb      	strb	r3, [r7, #31]
 800531e:	e073      	b.n	8005408 <UART_SetConfig+0x348>
 8005320:	2304      	movs	r3, #4
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e070      	b.n	8005408 <UART_SetConfig+0x348>
 8005326:	2308      	movs	r3, #8
 8005328:	77fb      	strb	r3, [r7, #31]
 800532a:	e06d      	b.n	8005408 <UART_SetConfig+0x348>
 800532c:	2310      	movs	r3, #16
 800532e:	77fb      	strb	r3, [r7, #31]
 8005330:	e06a      	b.n	8005408 <UART_SetConfig+0x348>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <UART_SetConfig+0x2e4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d138      	bne.n	80053ae <UART_SetConfig+0x2ee>
 800533c:	4b13      	ldr	r3, [pc, #76]	@ (800538c <UART_SetConfig+0x2cc>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005346:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800534a:	d017      	beq.n	800537c <UART_SetConfig+0x2bc>
 800534c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005350:	d82a      	bhi.n	80053a8 <UART_SetConfig+0x2e8>
 8005352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005356:	d00b      	beq.n	8005370 <UART_SetConfig+0x2b0>
 8005358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800535c:	d824      	bhi.n	80053a8 <UART_SetConfig+0x2e8>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <UART_SetConfig+0x2aa>
 8005362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005366:	d006      	beq.n	8005376 <UART_SetConfig+0x2b6>
 8005368:	e01e      	b.n	80053a8 <UART_SetConfig+0x2e8>
 800536a:	2300      	movs	r3, #0
 800536c:	77fb      	strb	r3, [r7, #31]
 800536e:	e04b      	b.n	8005408 <UART_SetConfig+0x348>
 8005370:	2302      	movs	r3, #2
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	e048      	b.n	8005408 <UART_SetConfig+0x348>
 8005376:	2304      	movs	r3, #4
 8005378:	77fb      	strb	r3, [r7, #31]
 800537a:	e045      	b.n	8005408 <UART_SetConfig+0x348>
 800537c:	2308      	movs	r3, #8
 800537e:	77fb      	strb	r3, [r7, #31]
 8005380:	e042      	b.n	8005408 <UART_SetConfig+0x348>
 8005382:	bf00      	nop
 8005384:	efff69f3 	.word	0xefff69f3
 8005388:	40011000 	.word	0x40011000
 800538c:	40023800 	.word	0x40023800
 8005390:	40004400 	.word	0x40004400
 8005394:	40004800 	.word	0x40004800
 8005398:	40004c00 	.word	0x40004c00
 800539c:	40005000 	.word	0x40005000
 80053a0:	40011400 	.word	0x40011400
 80053a4:	40007800 	.word	0x40007800
 80053a8:	2310      	movs	r3, #16
 80053aa:	77fb      	strb	r3, [r7, #31]
 80053ac:	e02c      	b.n	8005408 <UART_SetConfig+0x348>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a72      	ldr	r2, [pc, #456]	@ (800557c <UART_SetConfig+0x4bc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d125      	bne.n	8005404 <UART_SetConfig+0x344>
 80053b8:	4b71      	ldr	r3, [pc, #452]	@ (8005580 <UART_SetConfig+0x4c0>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80053c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80053c6:	d017      	beq.n	80053f8 <UART_SetConfig+0x338>
 80053c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80053cc:	d817      	bhi.n	80053fe <UART_SetConfig+0x33e>
 80053ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d2:	d00b      	beq.n	80053ec <UART_SetConfig+0x32c>
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d8:	d811      	bhi.n	80053fe <UART_SetConfig+0x33e>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <UART_SetConfig+0x326>
 80053de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e2:	d006      	beq.n	80053f2 <UART_SetConfig+0x332>
 80053e4:	e00b      	b.n	80053fe <UART_SetConfig+0x33e>
 80053e6:	2300      	movs	r3, #0
 80053e8:	77fb      	strb	r3, [r7, #31]
 80053ea:	e00d      	b.n	8005408 <UART_SetConfig+0x348>
 80053ec:	2302      	movs	r3, #2
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	e00a      	b.n	8005408 <UART_SetConfig+0x348>
 80053f2:	2304      	movs	r3, #4
 80053f4:	77fb      	strb	r3, [r7, #31]
 80053f6:	e007      	b.n	8005408 <UART_SetConfig+0x348>
 80053f8:	2308      	movs	r3, #8
 80053fa:	77fb      	strb	r3, [r7, #31]
 80053fc:	e004      	b.n	8005408 <UART_SetConfig+0x348>
 80053fe:	2310      	movs	r3, #16
 8005400:	77fb      	strb	r3, [r7, #31]
 8005402:	e001      	b.n	8005408 <UART_SetConfig+0x348>
 8005404:	2310      	movs	r3, #16
 8005406:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005410:	d15b      	bne.n	80054ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d828      	bhi.n	800546a <UART_SetConfig+0x3aa>
 8005418:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <UART_SetConfig+0x360>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005445 	.word	0x08005445
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005455 	.word	0x08005455
 800542c:	0800546b 	.word	0x0800546b
 8005430:	0800545b 	.word	0x0800545b
 8005434:	0800546b 	.word	0x0800546b
 8005438:	0800546b 	.word	0x0800546b
 800543c:	0800546b 	.word	0x0800546b
 8005440:	08005463 	.word	0x08005463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7fd ff18 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8005448:	61b8      	str	r0, [r7, #24]
        break;
 800544a:	e013      	b.n	8005474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800544c:	f7fd ff28 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8005450:	61b8      	str	r0, [r7, #24]
        break;
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005454:	4b4b      	ldr	r3, [pc, #300]	@ (8005584 <UART_SetConfig+0x4c4>)
 8005456:	61bb      	str	r3, [r7, #24]
        break;
 8005458:	e00c      	b.n	8005474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545a:	f7fd fdfb 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 800545e:	61b8      	str	r0, [r7, #24]
        break;
 8005460:	e008      	b.n	8005474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005466:	61bb      	str	r3, [r7, #24]
        break;
 8005468:	e004      	b.n	8005474 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	77bb      	strb	r3, [r7, #30]
        break;
 8005472:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d074      	beq.n	8005564 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	005a      	lsls	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b0f      	cmp	r3, #15
 8005494:	d916      	bls.n	80054c4 <UART_SetConfig+0x404>
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549c:	d212      	bcs.n	80054c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f023 030f 	bic.w	r3, r3, #15
 80054a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	89fb      	ldrh	r3, [r7, #14]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	89fa      	ldrh	r2, [r7, #14]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	e04f      	b.n	8005564 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	77bb      	strb	r3, [r7, #30]
 80054c8:	e04c      	b.n	8005564 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ca:	7ffb      	ldrb	r3, [r7, #31]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d828      	bhi.n	8005522 <UART_SetConfig+0x462>
 80054d0:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <UART_SetConfig+0x418>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005505 	.word	0x08005505
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	08005523 	.word	0x08005523
 80054e8:	08005513 	.word	0x08005513
 80054ec:	08005523 	.word	0x08005523
 80054f0:	08005523 	.word	0x08005523
 80054f4:	08005523 	.word	0x08005523
 80054f8:	0800551b 	.word	0x0800551b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fd febc 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8005500:	61b8      	str	r0, [r7, #24]
        break;
 8005502:	e013      	b.n	800552c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005504:	f7fd fecc 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8005508:	61b8      	str	r0, [r7, #24]
        break;
 800550a:	e00f      	b.n	800552c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800550c:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <UART_SetConfig+0x4c4>)
 800550e:	61bb      	str	r3, [r7, #24]
        break;
 8005510:	e00c      	b.n	800552c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005512:	f7fd fd9f 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8005516:	61b8      	str	r0, [r7, #24]
        break;
 8005518:	e008      	b.n	800552c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800551e:	61bb      	str	r3, [r7, #24]
        break;
 8005520:	e004      	b.n	800552c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	77bb      	strb	r3, [r7, #30]
        break;
 800552a:	bf00      	nop
    }

    if (pclk != 0U)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	085a      	lsrs	r2, r3, #1
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	441a      	add	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b0f      	cmp	r3, #15
 800554a:	d909      	bls.n	8005560 <UART_SetConfig+0x4a0>
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005552:	d205      	bcs.n	8005560 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	e001      	b.n	8005564 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005570:	7fbb      	ldrb	r3, [r7, #30]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40007c00 	.word	0x40007c00
 8005580:	40023800 	.word	0x40023800
 8005584:	00f42400 	.word	0x00f42400

08005588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01a      	beq.n	800569e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005686:	d10a      	bne.n	800569e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
  }
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b098      	sub	sp, #96	@ 0x60
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056dc:	f7fc fa4c 	bl	8001b78 <HAL_GetTick>
 80056e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d12e      	bne.n	800574e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f8:	2200      	movs	r2, #0
 80056fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f88c 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d021      	beq.n	800574e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005728:	647b      	str	r3, [r7, #68]	@ 0x44
 800572a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800572e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e6      	bne.n	800570a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e062      	b.n	8005814 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d149      	bne.n	80057f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800575c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005764:	2200      	movs	r2, #0
 8005766:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f856 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d03c      	beq.n	80057f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	623b      	str	r3, [r7, #32]
   return(result);
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800578a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005794:	633b      	str	r3, [r7, #48]	@ 0x30
 8005796:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800579a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e6      	bne.n	8005776 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3308      	adds	r3, #8
 80057ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057c8:	61fa      	str	r2, [r7, #28]
 80057ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	617b      	str	r3, [r7, #20]
   return(result);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e011      	b.n	8005814 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3758      	adds	r7, #88	@ 0x58
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582c:	e04f      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d04b      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fc f99f 	bl	8001b78 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <UART_WaitOnFlagUntilTimeout+0x30>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e04e      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d037      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b80      	cmp	r3, #128	@ 0x80
 8005862:	d034      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d031      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d110      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2208      	movs	r2, #8
 800587e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f838 	bl	80058f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2208      	movs	r2, #8
 800588a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e029      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a8:	d111      	bne.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f81e 	bl	80058f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00f      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0a0      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b095      	sub	sp, #84	@ 0x54
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591c:	643b      	str	r3, [r7, #64]	@ 0x40
 800591e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e6      	bne.n	80058fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3308      	adds	r3, #8
 800594e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005968:	2b01      	cmp	r3, #1
 800596a:	d118      	bne.n	800599e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	60bb      	str	r3, [r7, #8]
   return(result);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 0310 	bic.w	r3, r3, #16
 8005980:	647b      	str	r3, [r7, #68]	@ 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	613b      	str	r3, [r7, #16]
   return(result);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e6      	bne.n	800596c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059b2:	bf00      	nop
 80059b4:	3754      	adds	r7, #84	@ 0x54
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <ChargeDuty_step>:
/* Block signals and states (default storage) */
DW1 rtDW1;

/* Model step function */
void ChargeDuty_step(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b089      	sub	sp, #36	@ 0x24
 80059c4:	af00      	add	r7, sp, #0

  /* Sum: '<S1>/Sum1' incorporates:
   *  Inport: '<Root>/Target Voltage'
   *  UnitDelay: '<S1>/ChargeDelay'
   */
  rtb_ErrorVoltage = ChargeDuty_Signals.TargetVoltage - rtDW1.ChargeDelay_DSTATE;
 80059c6:	4b90      	ldr	r3, [pc, #576]	@ (8005c08 <ChargeDuty_step+0x248>)
 80059c8:	ed93 6b04 	vldr	d6, [r3, #16]
 80059cc:	4b8f      	ldr	r3, [pc, #572]	@ (8005c0c <ChargeDuty_step+0x24c>)
 80059ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80059d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059d6:	ed87 7b04 	vstr	d7, [r7, #16]

  /* Sum: '<S1>/Sum3' incorporates:
   *  DiscreteIntegrator: '<S1>/ChargeIntegrator'
   *  Gain: '<S1>/Gain5'
   */
  rtb_PICurrentOutput = 5 * rtb_ErrorVoltage + rtDW1.ChargeIntegrator_DSTATE;
 80059da:	ed97 7b04 	vldr	d7, [r7, #16]
 80059de:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 80059e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80059e6:	4b89      	ldr	r3, [pc, #548]	@ (8005c0c <ChargeDuty_step+0x24c>)
 80059e8:	ed93 7b04 	vldr	d7, [r3, #16]
 80059ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80059f0:	ed87 7b06 	vstr	d7, [r7, #24]

  /* Saturate: '<S1>/ChargeSaturation' */
  if (rtb_PICurrentOutput > 5000) {
 80059f4:	ed97 7b06 	vldr	d7, [r7, #24]
 80059f8:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8005bb8 <ChargeDuty_step+0x1f8>
 80059fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a04:	dd05      	ble.n	8005a12 <ChargeDuty_step+0x52>
    rtb_PICurrentOutput = 5000;
 8005a06:	a36c      	add	r3, pc, #432	@ (adr r3, 8005bb8 <ChargeDuty_step+0x1f8>)
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8005a10:	e00c      	b.n	8005a2c <ChargeDuty_step+0x6c>
  } else if (rtb_PICurrentOutput < 0) {
 8005a12:	ed97 7b06 	vldr	d7, [r7, #24]
 8005a16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1e:	d505      	bpl.n	8005a2c <ChargeDuty_step+0x6c>
    rtb_PICurrentOutput = 0;
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9c7 2306 	strd	r2, r3, [r7, #24]
  /* End of Saturate: '<S1>/ChargeSaturation' */

  /* Sum: '<S1>/Sum2' incorporates:
   *  UnitDelay: '<S1>/ChargeDelay1'
   */
  rtb_CurrentError = rtb_PICurrentOutput - rtDW1.ChargeDelay1_DSTATE;
 8005a2c:	4b77      	ldr	r3, [pc, #476]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005a2e:	ed93 7b00 	vldr	d7, [r3]
 8005a32:	ed97 6b06 	vldr	d6, [r7, #24]
 8005a36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a3a:	ed87 7b02 	vstr	d7, [r7, #8]

  /* Sum: '<S1>/Sum8' incorporates:
   *  DiscreteIntegrator: '<S1>/ChargeIntegrator1'
   *  Gain: '<S1>/Gain7'
   */
  u0 = 20.0 * rtb_CurrentError + rtDW1.ChargeIntegrator1_DSTATE;
 8005a3e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a42:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8005a46:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005a4a:	4b70      	ldr	r3, [pc, #448]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005a4c:	ed93 7b06 	vldr	d7, [r3, #24]
 8005a50:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a54:	ed87 7b00 	vstr	d7, [r7]

  /* Saturate: '<S1>/DischargeSaturation2' */
  if (u0 > 17099.05) {
 8005a58:	ed97 7b00 	vldr	d7, [r7]
 8005a5c:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8005bc0 <ChargeDuty_step+0x200>
 8005a60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a68:	dd06      	ble.n	8005a78 <ChargeDuty_step+0xb8>
    /* Outport: '<Root>/Target Duty' */
    ChargeDuty_Signals.TargetDuty = 17099;
 8005a6a:	4967      	ldr	r1, [pc, #412]	@ (8005c08 <ChargeDuty_step+0x248>)
 8005a6c:	a356      	add	r3, pc, #344	@ (adr r3, 8005bc8 <ChargeDuty_step+0x208>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005a76:	e014      	b.n	8005aa2 <ChargeDuty_step+0xe2>
  } else if (u0 < 899.0) {
 8005a78:	ed97 7b00 	vldr	d7, [r7]
 8005a7c:	ed9f 6b54 	vldr	d6, [pc, #336]	@ 8005bd0 <ChargeDuty_step+0x210>
 8005a80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a88:	d506      	bpl.n	8005a98 <ChargeDuty_step+0xd8>
    /* Outport: '<Root>/Target Duty' */
    ChargeDuty_Signals.TargetDuty = 899;
 8005a8a:	495f      	ldr	r1, [pc, #380]	@ (8005c08 <ChargeDuty_step+0x248>)
 8005a8c:	a350      	add	r3, pc, #320	@ (adr r3, 8005bd0 <ChargeDuty_step+0x210>)
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005a96:	e004      	b.n	8005aa2 <ChargeDuty_step+0xe2>
  } else {
    /* Outport: '<Root>/Target Duty' */
    ChargeDuty_Signals.TargetDuty = u0;
 8005a98:	495b      	ldr	r1, [pc, #364]	@ (8005c08 <ChargeDuty_step+0x248>)
 8005a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a9e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  }

  /* End of Saturate: '<S1>/DischargeSaturation2' */

  /* Outport: '<Root>/Current Error' */
  ChargeDuty_Signals.CurrentError = rtb_CurrentError;
 8005aa2:	4959      	ldr	r1, [pc, #356]	@ (8005c08 <ChargeDuty_step+0x248>)
 8005aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aa8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

  /* Outport: '<Root>/PI Current Output' */
  ChargeDuty_Signals.PICurrentOutput = rtb_PICurrentOutput;
 8005aac:	4956      	ldr	r1, [pc, #344]	@ (8005c08 <ChargeDuty_step+0x248>)
 8005aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  /* Outport: '<Root>/Error Voltage' */
  ChargeDuty_Signals.ErrorVoltage = rtb_ErrorVoltage;
 8005ab6:	4954      	ldr	r1, [pc, #336]	@ (8005c08 <ChargeDuty_step+0x248>)
 8005ab8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005abc:	e9c1 2308 	strd	r2, r3, [r1, #32]

  /* Update for UnitDelay: '<S1>/ChargeDelay1' incorporates:
   *  Inport: '<Root>/Inductor Current'
   */
  rtDW1.ChargeDelay1_DSTATE = ChargeDuty_Signals.InductorCurrent;
 8005ac0:	4b51      	ldr	r3, [pc, #324]	@ (8005c08 <ChargeDuty_step+0x248>)
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	4951      	ldr	r1, [pc, #324]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005ac8:	e9c1 2300 	strd	r2, r3, [r1]

  /* Update for UnitDelay: '<S1>/ChargeDelay' incorporates:
   *  Inport: '<Root>/Input Voltage'
   */
  rtDW1.ChargeDelay_DSTATE = ChargeDuty_Signals.InputVoltage;
 8005acc:	4b4e      	ldr	r3, [pc, #312]	@ (8005c08 <ChargeDuty_step+0x248>)
 8005ace:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005ad2:	494e      	ldr	r1, [pc, #312]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005ad4:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Update for DiscreteIntegrator: '<S1>/ChargeIntegrator' incorporates:
   *  Gain: '<S1>/Gain6'
   */
  rtDW1.ChargeIntegrator_DSTATE += 150 * rtb_ErrorVoltage * 1.0E-5;
 8005ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005ada:	ed93 6b04 	vldr	d6, [r3, #16]
 8005ade:	ed97 7b04 	vldr	d7, [r7, #16]
 8005ae2:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8005bd8 <ChargeDuty_step+0x218>
 8005ae6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005aea:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8005be0 <ChargeDuty_step+0x220>
 8005aee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005af2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005af6:	4b45      	ldr	r3, [pc, #276]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005af8:	ed83 7b04 	vstr	d7, [r3, #16]
  if (rtDW1.ChargeIntegrator_DSTATE > 5200) {
 8005afc:	4b43      	ldr	r3, [pc, #268]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005afe:	ed93 7b04 	vldr	d7, [r3, #16]
 8005b02:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8005be8 <ChargeDuty_step+0x228>
 8005b06:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0e:	dd06      	ble.n	8005b1e <ChargeDuty_step+0x15e>
    rtDW1.ChargeIntegrator_DSTATE = 5200;
 8005b10:	493e      	ldr	r1, [pc, #248]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005b12:	a335      	add	r3, pc, #212	@ (adr r3, 8005be8 <ChargeDuty_step+0x228>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005b1c:	e00f      	b.n	8005b3e <ChargeDuty_step+0x17e>
  } else if (rtDW1.ChargeIntegrator_DSTATE < -5200) {
 8005b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005b20:	ed93 7b04 	vldr	d7, [r3, #16]
 8005b24:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8005bf0 <ChargeDuty_step+0x230>
 8005b28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b30:	d505      	bpl.n	8005b3e <ChargeDuty_step+0x17e>
    rtDW1.ChargeIntegrator_DSTATE = -5200;
 8005b32:	4936      	ldr	r1, [pc, #216]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005b34:	a32e      	add	r3, pc, #184	@ (adr r3, 8005bf0 <ChargeDuty_step+0x230>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  /* End of Update for DiscreteIntegrator: '<S1>/ChargeIntegrator' */

  /* Update for DiscreteIntegrator: '<S1>/ChargeIntegrator1' incorporates:
   *  Gain: '<S1>/Gain8'
   */
  rtDW1.ChargeIntegrator1_DSTATE += 150 * rtb_CurrentError * 1.0E-5;
 8005b3e:	4b33      	ldr	r3, [pc, #204]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005b40:	ed93 6b06 	vldr	d6, [r3, #24]
 8005b44:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b48:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 8005bd8 <ChargeDuty_step+0x218>
 8005b4c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005b50:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 8005be0 <ChargeDuty_step+0x220>
 8005b54:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005b58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005b5e:	ed83 7b06 	vstr	d7, [r3, #24]
  if (rtDW1.ChargeIntegrator1_DSTATE > 52000) {
 8005b62:	4b2a      	ldr	r3, [pc, #168]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005b64:	ed93 7b06 	vldr	d7, [r3, #24]
 8005b68:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8005bf8 <ChargeDuty_step+0x238>
 8005b6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b74:	dd06      	ble.n	8005b84 <ChargeDuty_step+0x1c4>
    rtDW1.ChargeIntegrator1_DSTATE = 52000;
 8005b76:	4925      	ldr	r1, [pc, #148]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005b78:	a31f      	add	r3, pc, #124	@ (adr r3, 8005bf8 <ChargeDuty_step+0x238>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  } else if (rtDW1.ChargeIntegrator1_DSTATE < -52000) {
    rtDW1.ChargeIntegrator1_DSTATE = -52000;
  }

  /* End of Update for DiscreteIntegrator: '<S1>/ChargeIntegrator1' */
}
 8005b82:	e010      	b.n	8005ba6 <ChargeDuty_step+0x1e6>
  } else if (rtDW1.ChargeIntegrator1_DSTATE < -52000) {
 8005b84:	4b21      	ldr	r3, [pc, #132]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005b86:	ed93 7b06 	vldr	d7, [r3, #24]
 8005b8a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8005c00 <ChargeDuty_step+0x240>
 8005b8e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b96:	d400      	bmi.n	8005b9a <ChargeDuty_step+0x1da>
}
 8005b98:	e005      	b.n	8005ba6 <ChargeDuty_step+0x1e6>
    rtDW1.ChargeIntegrator1_DSTATE = -52000;
 8005b9a:	491c      	ldr	r1, [pc, #112]	@ (8005c0c <ChargeDuty_step+0x24c>)
 8005b9c:	a318      	add	r3, pc, #96	@ (adr r3, 8005c00 <ChargeDuty_step+0x240>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8005ba6:	bf00      	nop
 8005ba8:	3724      	adds	r7, #36	@ 0x24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	f3af 8000 	nop.w
 8005bb8:	00000000 	.word	0x00000000
 8005bbc:	40b38800 	.word	0x40b38800
 8005bc0:	33333333 	.word	0x33333333
 8005bc4:	40d0b2c3 	.word	0x40d0b2c3
 8005bc8:	00000000 	.word	0x00000000
 8005bcc:	40d0b2c0 	.word	0x40d0b2c0
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	408c1800 	.word	0x408c1800
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	4062c000 	.word	0x4062c000
 8005be0:	88e368f1 	.word	0x88e368f1
 8005be4:	3ee4f8b5 	.word	0x3ee4f8b5
 8005be8:	00000000 	.word	0x00000000
 8005bec:	40b45000 	.word	0x40b45000
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	c0b45000 	.word	0xc0b45000
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	40e96400 	.word	0x40e96400
 8005c00:	00000000 	.word	0x00000000
 8005c04:	c0e96400 	.word	0xc0e96400
 8005c08:	20000370 	.word	0x20000370
 8005c0c:	200003a8 	.word	0x200003a8

08005c10 <DischargeDuty_step>:
double rtb_ErrorVoltage;
double rtb_PICurrentOutput_d;
double u0;
/* Model step function */
void DischargeDuty_step(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
   rtb_CurrentError = 0;
 8005c14:	49a4      	ldr	r1, [pc, #656]	@ (8005ea8 <DischargeDuty_step+0x298>)
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	e9c1 2300 	strd	r2, r3, [r1]
   rtb_ErrorVoltage = 0;
 8005c22:	49a2      	ldr	r1, [pc, #648]	@ (8005eac <DischargeDuty_step+0x29c>)
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	e9c1 2300 	strd	r2, r3, [r1]
   rtb_PICurrentOutput_d = 0;
 8005c30:	499f      	ldr	r1, [pc, #636]	@ (8005eb0 <DischargeDuty_step+0x2a0>)
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	e9c1 2300 	strd	r2, r3, [r1]
   u0 = 0;
 8005c3e:	499d      	ldr	r1, [pc, #628]	@ (8005eb4 <DischargeDuty_step+0x2a4>)
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9c1 2300 	strd	r2, r3, [r1]

   /* Sum: '<S1>/Sum4' incorporates:
    *  Inport: '<Root>/Target Voltage'
    *  UnitDelay: '<S1>/DischargeDelay'
    */
   rtb_ErrorVoltage = DischargeDuty_Signals.targetVoltageDischarge -
 8005c4c:	4b9a      	ldr	r3, [pc, #616]	@ (8005eb8 <DischargeDuty_step+0x2a8>)
 8005c4e:	ed93 6b04 	vldr	d6, [r3, #16]
     rtDW.DischargeDelay_DSTATE;
 8005c52:	4b9a      	ldr	r3, [pc, #616]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005c54:	ed93 7b02 	vldr	d7, [r3, #8]
   rtb_ErrorVoltage = DischargeDuty_Signals.targetVoltageDischarge -
 8005c58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c5c:	4b93      	ldr	r3, [pc, #588]	@ (8005eac <DischargeDuty_step+0x29c>)
 8005c5e:	ed83 7b00 	vstr	d7, [r3]

   /* Sum: '<S1>/Sum6' incorporates:
    *  DiscreteIntegrator: '<S1>/DischargeIntegrator'
    *  Gain: '<S1>/Gain1'
    */
   rtb_PICurrentOutput_d = 5 * rtb_ErrorVoltage +
 8005c62:	4b92      	ldr	r3, [pc, #584]	@ (8005eac <DischargeDuty_step+0x29c>)
 8005c64:	ed93 7b00 	vldr	d7, [r3]
 8005c68:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8005c6c:	ee27 6b06 	vmul.f64	d6, d7, d6
     rtDW.DischargeIntegrator_DSTATE;
 8005c70:	4b92      	ldr	r3, [pc, #584]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005c72:	ed93 7b04 	vldr	d7, [r3, #16]
   rtb_PICurrentOutput_d = 5 * rtb_ErrorVoltage +
 8005c76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c7a:	4b8d      	ldr	r3, [pc, #564]	@ (8005eb0 <DischargeDuty_step+0x2a0>)
 8005c7c:	ed83 7b00 	vstr	d7, [r3]

   /* Saturate: '<S1>/DischargeSaturation' */
   if (rtb_PICurrentOutput_d > 5000) {
 8005c80:	4b8b      	ldr	r3, [pc, #556]	@ (8005eb0 <DischargeDuty_step+0x2a0>)
 8005c82:	ed93 7b00 	vldr	d7, [r3]
 8005c86:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8005e60 <DischargeDuty_step+0x250>
 8005c8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c92:	dd06      	ble.n	8005ca2 <DischargeDuty_step+0x92>
     rtb_PICurrentOutput_d = 5000;
 8005c94:	4986      	ldr	r1, [pc, #536]	@ (8005eb0 <DischargeDuty_step+0x2a0>)
 8005c96:	a372      	add	r3, pc, #456	@ (adr r3, 8005e60 <DischargeDuty_step+0x250>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	e9c1 2300 	strd	r2, r3, [r1]
 8005ca0:	e00e      	b.n	8005cc0 <DischargeDuty_step+0xb0>
   } else if (rtb_PICurrentOutput_d < 0) {
 8005ca2:	4b83      	ldr	r3, [pc, #524]	@ (8005eb0 <DischargeDuty_step+0x2a0>)
 8005ca4:	ed93 7b00 	vldr	d7, [r3]
 8005ca8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb0:	d506      	bpl.n	8005cc0 <DischargeDuty_step+0xb0>
     rtb_PICurrentOutput_d = 0;
 8005cb2:	497f      	ldr	r1, [pc, #508]	@ (8005eb0 <DischargeDuty_step+0x2a0>)
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	e9c1 2300 	strd	r2, r3, [r1]
   /* End of Saturate: '<S1>/DischargeSaturation' */

   /* Sum: '<S1>/Sum5' incorporates:
    *  UnitDelay: '<S1>/DischargeDelay1'
    */
   rtb_CurrentError = rtb_PICurrentOutput_d - rtDW.DischargeDelay1_DSTATE;
 8005cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8005eb0 <DischargeDuty_step+0x2a0>)
 8005cc2:	ed93 6b00 	vldr	d6, [r3]
 8005cc6:	4b7d      	ldr	r3, [pc, #500]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005cc8:	ed93 7b00 	vldr	d7, [r3]
 8005ccc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005cd0:	4b75      	ldr	r3, [pc, #468]	@ (8005ea8 <DischargeDuty_step+0x298>)
 8005cd2:	ed83 7b00 	vstr	d7, [r3]

   /* Sum: '<S1>/Sum7' incorporates:
    *  DiscreteIntegrator: '<S1>/DischargeIntegrator1'
    *  Gain: '<S1>/Gain3'
    */
   u0 = 20.0 * rtb_CurrentError + rtDW.DischargeIntegrator1_DSTATE;
 8005cd6:	4b74      	ldr	r3, [pc, #464]	@ (8005ea8 <DischargeDuty_step+0x298>)
 8005cd8:	ed93 7b00 	vldr	d7, [r3]
 8005cdc:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8005ce0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005ce4:	4b75      	ldr	r3, [pc, #468]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005ce6:	ed93 7b06 	vldr	d7, [r3, #24]
 8005cea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cee:	4b71      	ldr	r3, [pc, #452]	@ (8005eb4 <DischargeDuty_step+0x2a4>)
 8005cf0:	ed83 7b00 	vstr	d7, [r3]

   /* Saturate: '<S1>/DischargeSaturation1' */
   if (u0 > 62259) {
 8005cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8005eb4 <DischargeDuty_step+0x2a4>)
 8005cf6:	ed93 7b00 	vldr	d7, [r3]
 8005cfa:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8005e68 <DischargeDuty_step+0x258>
 8005cfe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d06:	dd06      	ble.n	8005d16 <DischargeDuty_step+0x106>
     /* Outport: '<Root>/Target Duty' */
     DischargeDuty_Signals.TargetDuty = 62259;
 8005d08:	496b      	ldr	r1, [pc, #428]	@ (8005eb8 <DischargeDuty_step+0x2a8>)
 8005d0a:	a357      	add	r3, pc, #348	@ (adr r3, 8005e68 <DischargeDuty_step+0x258>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005d14:	e016      	b.n	8005d44 <DischargeDuty_step+0x134>
   } else if (u0 < 3277) {
 8005d16:	4b67      	ldr	r3, [pc, #412]	@ (8005eb4 <DischargeDuty_step+0x2a4>)
 8005d18:	ed93 7b00 	vldr	d7, [r3]
 8005d1c:	ed9f 6b54 	vldr	d6, [pc, #336]	@ 8005e70 <DischargeDuty_step+0x260>
 8005d20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d28:	d506      	bpl.n	8005d38 <DischargeDuty_step+0x128>
     /* Outport: '<Root>/Target Duty' */
     DischargeDuty_Signals.TargetDuty = 3277;
 8005d2a:	4963      	ldr	r1, [pc, #396]	@ (8005eb8 <DischargeDuty_step+0x2a8>)
 8005d2c:	a350      	add	r3, pc, #320	@ (adr r3, 8005e70 <DischargeDuty_step+0x260>)
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005d36:	e005      	b.n	8005d44 <DischargeDuty_step+0x134>
   } else {
     /* Outport: '<Root>/Target Duty' */
     DischargeDuty_Signals.TargetDuty = u0;
 8005d38:	4b5e      	ldr	r3, [pc, #376]	@ (8005eb4 <DischargeDuty_step+0x2a4>)
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	495e      	ldr	r1, [pc, #376]	@ (8005eb8 <DischargeDuty_step+0x2a8>)
 8005d40:	e9c1 2306 	strd	r2, r3, [r1, #24]
   }

   /* End of Saturate: '<S1>/DischargeSaturation1' */

   /* Outport: '<Root>/Current Error' */
   DischargeDuty_Signals.CurrentError = rtb_CurrentError;
 8005d44:	4b58      	ldr	r3, [pc, #352]	@ (8005ea8 <DischargeDuty_step+0x298>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	495b      	ldr	r1, [pc, #364]	@ (8005eb8 <DischargeDuty_step+0x2a8>)
 8005d4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

   /* Outport: '<Root>/PI Current Output' */
   DischargeDuty_Signals.PICurrentOutput = rtb_PICurrentOutput_d;
 8005d50:	4b57      	ldr	r3, [pc, #348]	@ (8005eb0 <DischargeDuty_step+0x2a0>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	4958      	ldr	r1, [pc, #352]	@ (8005eb8 <DischargeDuty_step+0x2a8>)
 8005d58:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

   /* Outport: '<Root>/Error Voltage' */
   DischargeDuty_Signals.ErrorVoltage = rtb_ErrorVoltage;
 8005d5c:	4b53      	ldr	r3, [pc, #332]	@ (8005eac <DischargeDuty_step+0x29c>)
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	4955      	ldr	r1, [pc, #340]	@ (8005eb8 <DischargeDuty_step+0x2a8>)
 8005d64:	e9c1 2308 	strd	r2, r3, [r1, #32]

   /* Update for UnitDelay: '<S1>/DischargeDelay1' incorporates:
    *  Inport: '<Root>/Inductor Current'
    */
   rtDW.DischargeDelay1_DSTATE = DischargeDuty_Signals.InductorCurrent;
 8005d68:	4b53      	ldr	r3, [pc, #332]	@ (8005eb8 <DischargeDuty_step+0x2a8>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	4953      	ldr	r1, [pc, #332]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005d70:	e9c1 2300 	strd	r2, r3, [r1]

   /* Update for UnitDelay: '<S1>/DischargeDelay' incorporates:
    *  Inport: '<Root>/Output Voltage'
    */
   rtDW.DischargeDelay_DSTATE = DischargeDuty_Signals.OutputVoltage;
 8005d74:	4b50      	ldr	r3, [pc, #320]	@ (8005eb8 <DischargeDuty_step+0x2a8>)
 8005d76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005d7a:	4950      	ldr	r1, [pc, #320]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005d7c:	e9c1 2302 	strd	r2, r3, [r1, #8]

   /* Update for DiscreteIntegrator: '<S1>/DischargeIntegrator' incorporates:
    *  Gain: '<S1>/Gain2'
    */
   rtDW.DischargeIntegrator_DSTATE += 150 * rtb_ErrorVoltage * 0.0001;
 8005d80:	4b4e      	ldr	r3, [pc, #312]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005d82:	ed93 6b04 	vldr	d6, [r3, #16]
 8005d86:	4b49      	ldr	r3, [pc, #292]	@ (8005eac <DischargeDuty_step+0x29c>)
 8005d88:	ed93 7b00 	vldr	d7, [r3]
 8005d8c:	ed9f 5b3a 	vldr	d5, [pc, #232]	@ 8005e78 <DischargeDuty_step+0x268>
 8005d90:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005d94:	ed9f 5b3a 	vldr	d5, [pc, #232]	@ 8005e80 <DischargeDuty_step+0x270>
 8005d98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005d9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005da0:	4b46      	ldr	r3, [pc, #280]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005da2:	ed83 7b04 	vstr	d7, [r3, #16]
   if (rtDW.DischargeIntegrator_DSTATE > 5200) {
 8005da6:	4b45      	ldr	r3, [pc, #276]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005da8:	ed93 7b04 	vldr	d7, [r3, #16]
 8005dac:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 8005e88 <DischargeDuty_step+0x278>
 8005db0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db8:	dd06      	ble.n	8005dc8 <DischargeDuty_step+0x1b8>
     rtDW.DischargeIntegrator_DSTATE = 5200;
 8005dba:	4940      	ldr	r1, [pc, #256]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005dbc:	a332      	add	r3, pc, #200	@ (adr r3, 8005e88 <DischargeDuty_step+0x278>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005dc6:	e00f      	b.n	8005de8 <DischargeDuty_step+0x1d8>
   } else if (rtDW.DischargeIntegrator_DSTATE < -5200) {
 8005dc8:	4b3c      	ldr	r3, [pc, #240]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005dca:	ed93 7b04 	vldr	d7, [r3, #16]
 8005dce:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8005e90 <DischargeDuty_step+0x280>
 8005dd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dda:	d505      	bpl.n	8005de8 <DischargeDuty_step+0x1d8>
     rtDW.DischargeIntegrator_DSTATE = -5200;
 8005ddc:	4937      	ldr	r1, [pc, #220]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005dde:	a32c      	add	r3, pc, #176	@ (adr r3, 8005e90 <DischargeDuty_step+0x280>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	e9c1 2304 	strd	r2, r3, [r1, #16]
   /* End of Update for DiscreteIntegrator: '<S1>/DischargeIntegrator' */

   /* Update for DiscreteIntegrator: '<S1>/DischargeIntegrator1' incorporates:
    *  Gain: '<S1>/Gain4'
    */
   rtDW.DischargeIntegrator1_DSTATE += 150 * rtb_CurrentError * 0.0001;
 8005de8:	4b34      	ldr	r3, [pc, #208]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005dea:	ed93 6b06 	vldr	d6, [r3, #24]
 8005dee:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea8 <DischargeDuty_step+0x298>)
 8005df0:	ed93 7b00 	vldr	d7, [r3]
 8005df4:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8005e78 <DischargeDuty_step+0x268>
 8005df8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005dfc:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8005e80 <DischargeDuty_step+0x270>
 8005e00:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005e04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e08:	4b2c      	ldr	r3, [pc, #176]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005e0a:	ed83 7b06 	vstr	d7, [r3, #24]
   if (rtDW.DischargeIntegrator1_DSTATE > 52000) {
 8005e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005e10:	ed93 7b06 	vldr	d7, [r3, #24]
 8005e14:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8005e98 <DischargeDuty_step+0x288>
 8005e18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e20:	dd06      	ble.n	8005e30 <DischargeDuty_step+0x220>
     rtDW.DischargeIntegrator1_DSTATE = 52000;
 8005e22:	4926      	ldr	r1, [pc, #152]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005e24:	a31c      	add	r3, pc, #112	@ (adr r3, 8005e98 <DischargeDuty_step+0x288>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	e9c1 2306 	strd	r2, r3, [r1, #24]
   } else if (rtDW.DischargeIntegrator1_DSTATE < -52000) {
     rtDW.DischargeIntegrator1_DSTATE = -52000;
   }

   /* End of Update for DiscreteIntegrator: '<S1>/DischargeIntegrator1' */
 }
 8005e2e:	e010      	b.n	8005e52 <DischargeDuty_step+0x242>
   } else if (rtDW.DischargeIntegrator1_DSTATE < -52000) {
 8005e30:	4b22      	ldr	r3, [pc, #136]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005e32:	ed93 7b06 	vldr	d7, [r3, #24]
 8005e36:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8005ea0 <DischargeDuty_step+0x290>
 8005e3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e42:	d400      	bmi.n	8005e46 <DischargeDuty_step+0x236>
 }
 8005e44:	e005      	b.n	8005e52 <DischargeDuty_step+0x242>
     rtDW.DischargeIntegrator1_DSTATE = -52000;
 8005e46:	491d      	ldr	r1, [pc, #116]	@ (8005ebc <DischargeDuty_step+0x2ac>)
 8005e48:	a315      	add	r3, pc, #84	@ (adr r3, 8005ea0 <DischargeDuty_step+0x290>)
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 }
 8005e52:	bf00      	nop
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	f3af 8000 	nop.w
 8005e60:	00000000 	.word	0x00000000
 8005e64:	40b38800 	.word	0x40b38800
 8005e68:	00000000 	.word	0x00000000
 8005e6c:	40ee6660 	.word	0x40ee6660
 8005e70:	00000000 	.word	0x00000000
 8005e74:	40a99a00 	.word	0x40a99a00
 8005e78:	00000000 	.word	0x00000000
 8005e7c:	4062c000 	.word	0x4062c000
 8005e80:	eb1c432d 	.word	0xeb1c432d
 8005e84:	3f1a36e2 	.word	0x3f1a36e2
 8005e88:	00000000 	.word	0x00000000
 8005e8c:	40b45000 	.word	0x40b45000
 8005e90:	00000000 	.word	0x00000000
 8005e94:	c0b45000 	.word	0xc0b45000
 8005e98:	00000000 	.word	0x00000000
 8005e9c:	40e96400 	.word	0x40e96400
 8005ea0:	00000000 	.word	0x00000000
 8005ea4:	c0e96400 	.word	0xc0e96400
 8005ea8:	20000420 	.word	0x20000420
 8005eac:	20000428 	.word	0x20000428
 8005eb0:	20000430 	.word	0x20000430
 8005eb4:	20000438 	.word	0x20000438
 8005eb8:	200003c8 	.word	0x200003c8
 8005ebc:	20000400 	.word	0x20000400

08005ec0 <errorHandler_step>:
/* Storage class 'SignalStruct' */
errorHandler_Signals_T errorHandler_Signals;/* '<Root>/inputCurrent' */

/* Model step function */
void errorHandler_step(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
   *  RelationalOperator: '<S2>/Compare'
   *  RelationalOperator: '<S3>/Compare'
   *  Sum: '<S1>/Add'
   *  Sum: '<S1>/Add1'
   */
  rtb_OR1 = ((5000 - errorHandler_Signals.inputCurrent < 0) || (2000 -
 8005ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8005fb8 <errorHandler_step+0xf8>)
 8005ec8:	ed93 7b00 	vldr	d7, [r3]
 8005ecc:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8005fa0 <errorHandler_step+0xe0>
 8005ed0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ed4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005edc:	d40b      	bmi.n	8005ef6 <errorHandler_step+0x36>
              errorHandler_Signals.outputCurrent < 0));
 8005ede:	4b36      	ldr	r3, [pc, #216]	@ (8005fb8 <errorHandler_step+0xf8>)
 8005ee0:	ed93 7b02 	vldr	d7, [r3, #8]
  rtb_OR1 = ((5000 - errorHandler_Signals.inputCurrent < 0) || (2000 -
 8005ee4:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8005fa8 <errorHandler_step+0xe8>
 8005ee8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005eec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef4:	d501      	bpl.n	8005efa <errorHandler_step+0x3a>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <errorHandler_step+0x3c>
 8005efa:	2300      	movs	r3, #0
 8005efc:	607b      	str	r3, [r7, #4]

  /* Outport: '<Root>/overCurrent' */
  errorHandler_Signals.overCurrent = rtb_OR1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005f08:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb8 <errorHandler_step+0xf8>)
 8005f0a:	ed83 7b08 	vstr	d7, [r3, #32]
   *  Logic: '<S1>/OR'
   *  RelationalOperator: '<S4>/Compare'
   *  Sum: '<S1>/Add2'
   */
  errorHandler_Signals.readyState = ((rtb_OR1 == 0) && (!(450 -
    errorHandler_Signals.inputVoltage > 0)) && (errorHandler_Signals.pwmState
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d11d      	bne.n	8005f50 <errorHandler_step+0x90>
 8005f14:	4b28      	ldr	r3, [pc, #160]	@ (8005fb8 <errorHandler_step+0xf8>)
 8005f16:	ed93 7b04 	vldr	d7, [r3, #16]
  errorHandler_Signals.readyState = ((rtb_OR1 == 0) && (!(450 -
 8005f1a:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8005fb0 <errorHandler_step+0xf0>
 8005f1e:	ee36 7b47 	vsub.f64	d7, d6, d7
    errorHandler_Signals.inputVoltage > 0)) && (errorHandler_Signals.pwmState
 8005f22:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2a:	bfcc      	ite	gt
 8005f2c:	2301      	movgt	r3, #1
 8005f2e:	2300      	movle	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
  errorHandler_Signals.readyState = ((rtb_OR1 == 0) && (!(450 -
 8005f32:	f083 0301 	eor.w	r3, r3, #1
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d009      	beq.n	8005f50 <errorHandler_step+0x90>
    errorHandler_Signals.inputVoltage > 0)) && (errorHandler_Signals.pwmState
 8005f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb8 <errorHandler_step+0xf8>)
 8005f3e:	ed93 7b06 	vldr	d7, [r3, #24]
 8005f42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4a:	d001      	beq.n	8005f50 <errorHandler_step+0x90>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <errorHandler_step+0x92>
 8005f50:	2300      	movs	r3, #0
  errorHandler_Signals.readyState = ((rtb_OR1 == 0) && (!(450 -
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005f5a:	4b17      	ldr	r3, [pc, #92]	@ (8005fb8 <errorHandler_step+0xf8>)
 8005f5c:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
   *  DataTypeConversion: '<S1>/Data Type Conversion'
   *  Inport: '<Root>/inputVoltage'
   *  RelationalOperator: '<S4>/Compare'
   *  Sum: '<S1>/Add2'
   */
  errorHandler_Signals.underVoltage = (450 - errorHandler_Signals.inputVoltage
 8005f60:	4b15      	ldr	r3, [pc, #84]	@ (8005fb8 <errorHandler_step+0xf8>)
 8005f62:	ed93 7b04 	vldr	d7, [r3, #16]
 8005f66:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8005fb0 <errorHandler_step+0xf0>
 8005f6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f76:	dd03      	ble.n	8005f80 <errorHandler_step+0xc0>
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005fbc <errorHandler_step+0xfc>)
 8005f7e:	e003      	b.n	8005f88 <errorHandler_step+0xc8>
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	490b      	ldr	r1, [pc, #44]	@ (8005fb8 <errorHandler_step+0xf8>)
 8005f8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    > 0);
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	f3af 8000 	nop.w
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	40b38800 	.word	0x40b38800
 8005fa8:	00000000 	.word	0x00000000
 8005fac:	409f4000 	.word	0x409f4000
 8005fb0:	00000000 	.word	0x00000000
 8005fb4:	407c2000 	.word	0x407c2000
 8005fb8:	20000440 	.word	0x20000440
 8005fbc:	3ff00000 	.word	0x3ff00000

08005fc0 <memset>:
 8005fc0:	4402      	add	r2, r0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d100      	bne.n	8005fca <memset+0xa>
 8005fc8:	4770      	bx	lr
 8005fca:	f803 1b01 	strb.w	r1, [r3], #1
 8005fce:	e7f9      	b.n	8005fc4 <memset+0x4>

08005fd0 <__libc_init_array>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	4d0d      	ldr	r5, [pc, #52]	@ (8006008 <__libc_init_array+0x38>)
 8005fd4:	4c0d      	ldr	r4, [pc, #52]	@ (800600c <__libc_init_array+0x3c>)
 8005fd6:	1b64      	subs	r4, r4, r5
 8005fd8:	10a4      	asrs	r4, r4, #2
 8005fda:	2600      	movs	r6, #0
 8005fdc:	42a6      	cmp	r6, r4
 8005fde:	d109      	bne.n	8005ff4 <__libc_init_array+0x24>
 8005fe0:	4d0b      	ldr	r5, [pc, #44]	@ (8006010 <__libc_init_array+0x40>)
 8005fe2:	4c0c      	ldr	r4, [pc, #48]	@ (8006014 <__libc_init_array+0x44>)
 8005fe4:	f000 f818 	bl	8006018 <_init>
 8005fe8:	1b64      	subs	r4, r4, r5
 8005fea:	10a4      	asrs	r4, r4, #2
 8005fec:	2600      	movs	r6, #0
 8005fee:	42a6      	cmp	r6, r4
 8005ff0:	d105      	bne.n	8005ffe <__libc_init_array+0x2e>
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff8:	4798      	blx	r3
 8005ffa:	3601      	adds	r6, #1
 8005ffc:	e7ee      	b.n	8005fdc <__libc_init_array+0xc>
 8005ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006002:	4798      	blx	r3
 8006004:	3601      	adds	r6, #1
 8006006:	e7f2      	b.n	8005fee <__libc_init_array+0x1e>
 8006008:	08006050 	.word	0x08006050
 800600c:	08006050 	.word	0x08006050
 8006010:	08006050 	.word	0x08006050
 8006014:	08006054 	.word	0x08006054

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
