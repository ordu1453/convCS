
converter-cs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000747c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007654  08007654  00008654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a8  080076a8  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080076a8  080076a8  000086a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b0  080076b0  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b0  080076b0  000086b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076b4  080076b4  000086b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080076b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  080076c4  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080076c4  0000925c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a254  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e40  00000000  00000000  00023290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  000260d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001183  00000000  00000000  00027750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ca7  00000000  00000000  000288d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bbd  00000000  00000000  0004b57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0bb0  00000000  00000000  00064137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154ce7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006220  00000000  00000000  00154d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015af4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800763c 	.word	0x0800763c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800763c 	.word	0x0800763c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Read_ADC_Channels>:
// ------------------ ADC -------------------------

uint32_t adc_values[5]; // массив для хранения значений

void Read_ADC_Channels(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b08e      	sub	sp, #56	@ 0x38
 8000548:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2220      	movs	r2, #32
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f007 f846 	bl	80075e4 <memset>

    // Каналы 1, 2, 3, 4 (замени на свои)
    uint32_t channels[5] = {ADC_CHANNEL_1, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <Read_ADC_Channels+0x84>)
 800055a:	463c      	mov	r4, r7
 800055c:	461d      	mov	r5, r3
 800055e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000562:	682b      	ldr	r3, [r5, #0]
 8000564:	6023      	str	r3, [r4, #0]

    for (int i = 0; i < 5; i++)
 8000566:	2300      	movs	r3, #0
 8000568:	637b      	str	r3, [r7, #52]	@ 0x34
 800056a:	e025      	b.n	80005b8 <Read_ADC_Channels+0x74>
    {
        sConfig.Channel = channels[i];
 800056c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	3338      	adds	r3, #56	@ 0x38
 8000572:	443b      	add	r3, r7
 8000574:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000578:	617b      	str	r3, [r7, #20]
        sConfig.Rank = ADC_REGULAR_RANK_1;
 800057a:	2306      	movs	r3, #6
 800057c:	61bb      	str	r3, [r7, #24]
        sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5; // можно изменить
 800057e:	2302      	movs	r3, #2
 8000580:	61fb      	str	r3, [r7, #28]

        HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4810      	ldr	r0, [pc, #64]	@ (80005cc <Read_ADC_Channels+0x88>)
 800058a:	f001 fd1d 	bl	8001fc8 <HAL_ADC_ConfigChannel>

        HAL_ADC_Start(&hadc1);              // запуск преобразования
 800058e:	480f      	ldr	r0, [pc, #60]	@ (80005cc <Read_ADC_Channels+0x88>)
 8000590:	f001 faee 	bl	8001b70 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10); // ждём завершения
 8000594:	210a      	movs	r1, #10
 8000596:	480d      	ldr	r0, [pc, #52]	@ (80005cc <Read_ADC_Channels+0x88>)
 8000598:	f001 fc02 	bl	8001da0 <HAL_ADC_PollForConversion>
        adc_values[i] = HAL_ADC_GetValue(&hadc1); // читаем результат
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <Read_ADC_Channels+0x88>)
 800059e:	f001 fd05 	bl	8001fac <HAL_ADC_GetValue>
 80005a2:	4602      	mov	r2, r0
 80005a4:	490a      	ldr	r1, [pc, #40]	@ (80005d0 <Read_ADC_Channels+0x8c>)
 80005a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        HAL_ADC_Stop(&hadc1);
 80005ac:	4807      	ldr	r0, [pc, #28]	@ (80005cc <Read_ADC_Channels+0x88>)
 80005ae:	f001 fbc3 	bl	8001d38 <HAL_ADC_Stop>
    for (int i = 0; i < 5; i++)
 80005b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005b4:	3301      	adds	r3, #1
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80005b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	ddd6      	ble.n	800056c <Read_ADC_Channels+0x28>
    }
}
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	3738      	adds	r7, #56	@ 0x38
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bdb0      	pop	{r4, r5, r7, pc}
 80005c8:	08007654 	.word	0x08007654
 80005cc:	20000040 	.word	0x20000040
 80005d0:	20000028 	.word	0x20000028

080005d4 <HAL_TIM_OC_DelayElapsedCallback>:
#include "control.h"

uint16_t i = 0; // frequency of adc measurement

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d113      	bne.n	800060e <HAL_TIM_OC_DelayElapsedCallback+0x3a>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7f1b      	ldrb	r3, [r3, #28]
 80005ea:	2b08      	cmp	r3, #8
 80005ec:	d10f      	bne.n	800060e <HAL_TIM_OC_DelayElapsedCallback+0x3a>
        {
        	if (i == 100)
 80005ee:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	2b64      	cmp	r3, #100	@ 0x64
 80005f4:	d105      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x2e>
        	{
        		Read_ADC_Channels();
 80005f6:	f7ff ffa5 	bl	8000544 <Read_ADC_Channels>
        		// add here your function
        		i = 0;
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	801a      	strh	r2, [r3, #0]
        	{
        		i++;
        	}
        }
    }
}
 8000600:	e005      	b.n	800060e <HAL_TIM_OC_DelayElapsedCallback+0x3a>
        		i++;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 800060c:	801a      	strh	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40012c00 	.word	0x40012c00
 800061c:	2000003c 	.word	0x2000003c

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fdfd 	bl	8001222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f814 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 faba 	bl	8000ba4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000630:	f000 f85a 	bl	80006e8 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000634:	f000 f926 	bl	8000884 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000638:	f000 f96a 	bl	8000910 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 800063c:	f000 f9ae 	bl	800099c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000640:	f000 fa64 	bl	8000b0c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);// starting main interrupt
 8000644:	210c      	movs	r1, #12
 8000646:	4802      	ldr	r0, [pc, #8]	@ (8000650 <main+0x30>)
 8000648:	f004 ff2e 	bl	80054a8 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <main+0x2c>
 8000650:	20000174 	.word	0x20000174

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2238      	movs	r2, #56	@ 0x38
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 ffbe 	bl	80075e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000676:	2000      	movs	r0, #0
 8000678:	f003 fe84 	bl	8004384 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000684:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	2303      	movs	r3, #3
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000692:	2355      	movs	r3, #85	@ 0x55
 8000694:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 ff20 	bl	80044ec <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006b2:	f000 fb03 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80006c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2104      	movs	r1, #4
 80006d0:	4618      	mov	r0, r3
 80006d2:	f004 fa1d 	bl	8004b10 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006dc:	f000 faee 	bl	8000cbc <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	@ 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b09a      	sub	sp, #104	@ 0x68
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006fe:	2220      	movs	r2, #32
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f006 ff6e 	bl	80075e4 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	223c      	movs	r2, #60	@ 0x3c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f006 ff68 	bl	80075e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000714:	4b59      	ldr	r3, [pc, #356]	@ (800087c <MX_ADC1_Init+0x194>)
 8000716:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800071a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071c:	4b57      	ldr	r3, [pc, #348]	@ (800087c <MX_ADC1_Init+0x194>)
 800071e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b55      	ldr	r3, [pc, #340]	@ (800087c <MX_ADC1_Init+0x194>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b54      	ldr	r3, [pc, #336]	@ (800087c <MX_ADC1_Init+0x194>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000730:	4b52      	ldr	r3, [pc, #328]	@ (800087c <MX_ADC1_Init+0x194>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000736:	4b51      	ldr	r3, [pc, #324]	@ (800087c <MX_ADC1_Init+0x194>)
 8000738:	2201      	movs	r2, #1
 800073a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	4b4f      	ldr	r3, [pc, #316]	@ (800087c <MX_ADC1_Init+0x194>)
 800073e:	2204      	movs	r2, #4
 8000740:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000742:	4b4e      	ldr	r3, [pc, #312]	@ (800087c <MX_ADC1_Init+0x194>)
 8000744:	2200      	movs	r2, #0
 8000746:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000748:	4b4c      	ldr	r3, [pc, #304]	@ (800087c <MX_ADC1_Init+0x194>)
 800074a:	2200      	movs	r2, #0
 800074c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800074e:	4b4b      	ldr	r3, [pc, #300]	@ (800087c <MX_ADC1_Init+0x194>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000754:	4b49      	ldr	r3, [pc, #292]	@ (800087c <MX_ADC1_Init+0x194>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b47      	ldr	r3, [pc, #284]	@ (800087c <MX_ADC1_Init+0x194>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000762:	4b46      	ldr	r3, [pc, #280]	@ (800087c <MX_ADC1_Init+0x194>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000768:	4b44      	ldr	r3, [pc, #272]	@ (800087c <MX_ADC1_Init+0x194>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000770:	4b42      	ldr	r3, [pc, #264]	@ (800087c <MX_ADC1_Init+0x194>)
 8000772:	2200      	movs	r2, #0
 8000774:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000776:	4b41      	ldr	r3, [pc, #260]	@ (800087c <MX_ADC1_Init+0x194>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077e:	483f      	ldr	r0, [pc, #252]	@ (800087c <MX_ADC1_Init+0x194>)
 8000780:	f001 f83a 	bl	80017f8 <HAL_ADC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800078a:	f000 fa97 	bl	8000cbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800078e:	2300      	movs	r3, #0
 8000790:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000792:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000796:	4619      	mov	r1, r3
 8000798:	4838      	ldr	r0, [pc, #224]	@ (800087c <MX_ADC1_Init+0x194>)
 800079a:	f003 f87b 	bl	8003894 <HAL_ADCEx_MultiModeConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80007a4:	f000 fa8a 	bl	8000cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a8:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <MX_ADC1_Init+0x198>)
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	2306      	movs	r3, #6
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b0:	2300      	movs	r3, #0
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b4:	237f      	movs	r3, #127	@ 0x7f
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b8:	2304      	movs	r3, #4
 80007ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007c4:	4619      	mov	r1, r3
 80007c6:	482d      	ldr	r0, [pc, #180]	@ (800087c <MX_ADC1_Init+0x194>)
 80007c8:	f001 fbfe 	bl	8001fc8 <HAL_ADC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80007d2:	f000 fa73 	bl	8000cbc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80007d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <MX_ADC1_Init+0x198>)
 80007d8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007da:	2309      	movs	r3, #9
 80007dc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80007e2:	237f      	movs	r3, #127	@ 0x7f
 80007e4:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80007e6:	2304      	movs	r3, #4
 80007e8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4819      	ldr	r0, [pc, #100]	@ (800087c <MX_ADC1_Init+0x194>)
 8000818:	f002 fb10 	bl	8002e3c <HAL_ADCEx_InjectedConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000822:	f000 fa4b 	bl	8000cbc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000826:	f240 130f 	movw	r3, #271	@ 0x10f
 800082a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4812      	ldr	r0, [pc, #72]	@ (800087c <MX_ADC1_Init+0x194>)
 8000832:	f002 fb03 	bl	8002e3c <HAL_ADCEx_InjectedConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 800083c:	f000 fa3e 	bl	8000cbc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000840:	f240 2315 	movw	r3, #533	@ 0x215
 8000844:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	@ (800087c <MX_ADC1_Init+0x194>)
 800084c:	f002 faf6 	bl	8002e3c <HAL_ADCEx_InjectedConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000856:	f000 fa31 	bl	8000cbc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 800085a:	f240 331b 	movw	r3, #795	@ 0x31b
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_ADC1_Init+0x194>)
 8000866:	f002 fae9 	bl	8002e3c <HAL_ADCEx_InjectedConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000870:	f000 fa24 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3768      	adds	r7, #104	@ 0x68
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000040 	.word	0x20000040
 8000880:	04300002 	.word	0x04300002

08000884 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000888:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 800088a:	4a20      	ldr	r2, [pc, #128]	@ (800090c <MX_FDCAN1_Init+0x88>)
 800088c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800089a:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008b4:	2210      	movs	r2, #16
 80008b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80008c4:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008d8:	2201      	movs	r2, #1
 80008da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008de:	2201      	movs	r2, #1
 80008e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_FDCAN1_Init+0x84>)
 80008f6:	f003 f9e5 	bl	8003cc4 <HAL_FDCAN_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000900:	f000 f9dc 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000ac 	.word	0x200000ac
 800090c:	40006400 	.word	0x40006400

08000910 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000916:	4a20      	ldr	r2, [pc, #128]	@ (8000998 <MX_FDCAN2_Init+0x88>)
 8000918:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800091a:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000920:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000926:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800092c:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 800092e:	2200      	movs	r2, #0
 8000930:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000934:	2200      	movs	r2, #0
 8000936:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 800093a:	2200      	movs	r2, #0
 800093c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000940:	2210      	movs	r2, #16
 8000942:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000944:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000946:	2201      	movs	r2, #1
 8000948:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 800094c:	2201      	movs	r2, #1
 800094e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000952:	2201      	movs	r2, #1
 8000954:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000958:	2201      	movs	r2, #1
 800095a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800095c:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 800095e:	2201      	movs	r2, #1
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000964:	2201      	movs	r2, #1
 8000966:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 800096a:	2201      	movs	r2, #1
 800096c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000970:	2200      	movs	r2, #0
 8000972:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000976:	2200      	movs	r2, #0
 8000978:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 800097c:	2200      	movs	r2, #0
 800097e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_FDCAN2_Init+0x84>)
 8000982:	f003 f99f 	bl	8003cc4 <HAL_FDCAN_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800098c:	f000 f996 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000110 	.word	0x20000110
 8000998:	40006800 	.word	0x40006800

0800099c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b098      	sub	sp, #96	@ 0x60
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2234      	movs	r2, #52	@ 0x34
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f006 fe0b 	bl	80075e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000b04 <MX_TIM1_Init+0x168>)
 80009d0:	4a4d      	ldr	r2, [pc, #308]	@ (8000b08 <MX_TIM1_Init+0x16c>)
 80009d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000b04 <MX_TIM1_Init+0x168>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b4a      	ldr	r3, [pc, #296]	@ (8000b04 <MX_TIM1_Init+0x168>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4721;
 80009e0:	4b48      	ldr	r3, [pc, #288]	@ (8000b04 <MX_TIM1_Init+0x168>)
 80009e2:	f241 2271 	movw	r2, #4721	@ 0x1271
 80009e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b46      	ldr	r3, [pc, #280]	@ (8000b04 <MX_TIM1_Init+0x168>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ee:	4b45      	ldr	r3, [pc, #276]	@ (8000b04 <MX_TIM1_Init+0x168>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b43      	ldr	r3, [pc, #268]	@ (8000b04 <MX_TIM1_Init+0x168>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009fa:	4842      	ldr	r0, [pc, #264]	@ (8000b04 <MX_TIM1_Init+0x168>)
 80009fc:	f004 feb4 	bl	8005768 <HAL_TIM_PWM_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 f959 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a0a:	483e      	ldr	r0, [pc, #248]	@ (8000b04 <MX_TIM1_Init+0x168>)
 8000a0c:	f004 fcea 	bl	80053e4 <HAL_TIM_OC_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a16:	f000 f951 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4835      	ldr	r0, [pc, #212]	@ (8000b04 <MX_TIM1_Init+0x168>)
 8000a2e:	f005 fdfb 	bl	8006628 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000a38:	f000 f940 	bl	8000cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3c:	2360      	movs	r3, #96	@ 0x60
 8000a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a44:	2300      	movs	r3, #0
 8000a46:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4828      	ldr	r0, [pc, #160]	@ (8000b04 <MX_TIM1_Init+0x168>)
 8000a62:	f005 f8a1 	bl	8005ba8 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000a6c:	f000 f926 	bl	8000cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a74:	2204      	movs	r2, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4822      	ldr	r0, [pc, #136]	@ (8000b04 <MX_TIM1_Init+0x168>)
 8000a7a:	f005 f895 	bl	8005ba8 <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000a84:	f000 f91a 	bl	8000cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 2300;
 8000a8c:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a96:	220c      	movs	r2, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481a      	ldr	r0, [pc, #104]	@ (8000b04 <MX_TIM1_Init+0x168>)
 8000a9c:	f005 f80a 	bl	8005ab4 <HAL_TIM_OC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000aa6:	f000 f909 	bl	8000cbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000abe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ad0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <MX_TIM1_Init+0x168>)
 8000ae8:	f005 fe34 	bl	8006754 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000af2:	f000 f8e3 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000af6:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <MX_TIM1_Init+0x168>)
 8000af8:	f000 fa50 	bl	8000f9c <HAL_TIM_MspPostInit>

}
 8000afc:	bf00      	nop
 8000afe:	3760      	adds	r7, #96	@ 0x60
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000174 	.word	0x20000174
 8000b08:	40012c00 	.word	0x40012c00

08000b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b10:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b12:	4a23      	ldr	r2, [pc, #140]	@ (8000ba0 <MX_USART3_UART_Init+0x94>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b54:	4811      	ldr	r0, [pc, #68]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b56:	f005 fed7 	bl	8006908 <HAL_UART_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 f8ac 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b68:	f006 fc72 	bl	8007450 <HAL_UARTEx_SetTxFifoThreshold>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b72:	f000 f8a3 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b76:	2100      	movs	r1, #0
 8000b78:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b7a:	f006 fca7 	bl	80074cc <HAL_UARTEx_SetRxFifoThreshold>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b84:	f000 f89a 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b8a:	f006 fc28 	bl	80073de <HAL_UARTEx_DisableFifoMode>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b94:	f000 f892 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200001c0 	.word	0x200001c0
 8000ba0:	40004800 	.word	0x40004800

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b37      	ldr	r3, [pc, #220]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4a36      	ldr	r2, [pc, #216]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0320 	and.w	r3, r3, #32
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b31      	ldr	r3, [pc, #196]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a30      	ldr	r2, [pc, #192]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <MX_GPIO_Init+0x10c>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000c20:	4824      	ldr	r0, [pc, #144]	@ (8000cb4 <MX_GPIO_Init+0x110>)
 8000c22:	f003 fb97 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GATE_GPIO_Port, RELAY_GATE_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f003 fb90 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c34:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4819      	ldr	r0, [pc, #100]	@ (8000cb4 <MX_GPIO_Init+0x110>)
 8000c4e:	f003 f9ff 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_Pin H2_Pin H3_Pin H4_Pin */
  GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin|H4_Pin;
 8000c52:	23f0      	movs	r3, #240	@ 0xf0
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c68:	f003 f9f2 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_GATE_Pin */
  GPIO_InitStruct.Pin = RELAY_GATE_Pin;
 8000c6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_GATE_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c88:	f003 f9e2 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : H5_Pin H6_Pin H7_Pin H8_Pin
                           USER_BTN_Pin */
  GPIO_InitStruct.Pin = H5_Pin|H6_Pin|H7_Pin|H8_Pin
 8000c8c:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 8000c90:	617b      	str	r3, [r7, #20]
                          |USER_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_GPIO_Init+0x114>)
 8000ca2:	f003 f9d5 	bl	8004050 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	48000400 	.word	0x48000400

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <Error_Handler+0x8>

08000cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cea:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cfe:	f003 fbe5 	bl	80044cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0a0      	sub	sp, #128	@ 0x80
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	2254      	movs	r2, #84	@ 0x54
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 fc57 	bl	80075e4 <memset>
  if(hadc->Instance==ADC1)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d3e:	d14d      	bne.n	8000ddc <HAL_ADC_MspInit+0xcc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d46:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 f8f9 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d5c:	f7ff ffae 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d60:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	4a1f      	ldr	r2, [pc, #124]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7c:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d84:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d94:	4a13      	ldr	r2, [pc, #76]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000da8:	230f      	movs	r3, #15
 8000daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dac:	2303      	movs	r3, #3
 8000dae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbe:	f003 f947 	bl	8004050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000dc2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000dd8:	f003 f93a 	bl	8004050 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ddc:	bf00      	nop
 8000dde:	3780      	adds	r7, #128	@ 0x80
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400

08000dec <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0a0      	sub	sp, #128	@ 0x80
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	2254      	movs	r2, #84	@ 0x54
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f006 fbe9 	bl	80075e4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a49      	ldr	r2, [pc, #292]	@ (8000f3c <HAL_FDCAN_MspInit+0x150>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d143      	bne.n	8000ea4 <HAL_FDCAN_MspInit+0xb8>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000e22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e26:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 f88b 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e38:	f7ff ff40 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e3c:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <HAL_FDCAN_MspInit+0x154>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a3f      	ldr	r2, [pc, #252]	@ (8000f40 <HAL_FDCAN_MspInit+0x154>)
 8000e44:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e46:	4b3e      	ldr	r3, [pc, #248]	@ (8000f40 <HAL_FDCAN_MspInit+0x154>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d10b      	bne.n	8000e66 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	4a3c      	ldr	r2, [pc, #240]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000e54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b37      	ldr	r3, [pc, #220]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	4a36      	ldr	r2, [pc, #216]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e72:	4b34      	ldr	r3, [pc, #208]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e90:	2309      	movs	r3, #9
 8000e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9e:	f003 f8d7 	bl	8004050 <HAL_GPIO_Init>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000ea2:	e046      	b.n	8000f32 <HAL_FDCAN_MspInit+0x146>
  else if(hfdcan->Instance==FDCAN2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a27      	ldr	r2, [pc, #156]	@ (8000f48 <HAL_FDCAN_MspInit+0x15c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d141      	bne.n	8000f32 <HAL_FDCAN_MspInit+0x146>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000eae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000eb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000eb8:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 f842 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 8000eca:	f7ff fef7 	bl	8000cbc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_FDCAN_MspInit+0x154>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <HAL_FDCAN_MspInit+0x154>)
 8000ed6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <HAL_FDCAN_MspInit+0x154>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d10b      	bne.n	8000ef8 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000ee6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efc:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_FDCAN_MspInit+0x158>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f10:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f22:	2309      	movs	r3, #9
 8000f24:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <HAL_FDCAN_MspInit+0x160>)
 8000f2e:	f003 f88f 	bl	8004050 <HAL_GPIO_Init>
}
 8000f32:	bf00      	nop
 8000f34:	3780      	adds	r7, #128	@ 0x80
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40006400 	.word	0x40006400
 8000f40:	20000254 	.word	0x20000254
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40006800 	.word	0x40006800
 8000f4c:	48000400 	.word	0x48000400

08000f50 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <HAL_TIM_PWM_MspInit+0x44>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d113      	bne.n	8000f8a <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <HAL_TIM_PWM_MspInit+0x48>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	4a0c      	ldr	r2, [pc, #48]	@ (8000f98 <HAL_TIM_PWM_MspInit+0x48>)
 8000f68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_TIM_PWM_MspInit+0x48>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	201b      	movs	r0, #27
 8000f80:	f002 fe6b 	bl	8003c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f84:	201b      	movs	r0, #27
 8000f86:	f002 fe82 	bl	8003c8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40012c00 	.word	0x40012c00
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8001074 <HAL_TIM_MspPostInit+0xd8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d156      	bne.n	800106c <HAL_TIM_MspPostInit+0xd0>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001078 <HAL_TIM_MspPostInit+0xdc>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8001078 <HAL_TIM_MspPostInit+0xdc>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fca:	4b2b      	ldr	r3, [pc, #172]	@ (8001078 <HAL_TIM_MspPostInit+0xdc>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <HAL_TIM_MspPostInit+0xdc>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a27      	ldr	r2, [pc, #156]	@ (8001078 <HAL_TIM_MspPostInit+0xdc>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe2:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <HAL_TIM_MspPostInit+0xdc>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <HAL_TIM_MspPostInit+0xdc>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	4a21      	ldr	r2, [pc, #132]	@ (8001078 <HAL_TIM_MspPostInit+0xdc>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HAL_TIM_MspPostInit+0xdc>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    PC13     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001018:	2304      	movs	r3, #4
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4816      	ldr	r0, [pc, #88]	@ (800107c <HAL_TIM_MspPostInit+0xe0>)
 8001024:	f003 f814 	bl	8004050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001028:	2301      	movs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001038:	2306      	movs	r3, #6
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	480f      	ldr	r0, [pc, #60]	@ (8001080 <HAL_TIM_MspPostInit+0xe4>)
 8001044:	f003 f804 	bl	8004050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001048:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800105a:	2306      	movs	r3, #6
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001068:	f002 fff2 	bl	8004050 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	@ 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40012c00 	.word	0x40012c00
 8001078:	40021000 	.word	0x40021000
 800107c:	48000800 	.word	0x48000800
 8001080:	48000400 	.word	0x48000400

08001084 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09e      	sub	sp, #120	@ 0x78
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	2254      	movs	r2, #84	@ 0x54
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f006 fa9d 	bl	80075e4 <memset>
  if(huart->Instance==USART3)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1f      	ldr	r2, [pc, #124]	@ (800112c <HAL_UART_MspInit+0xa8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d136      	bne.n	8001122 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b4:	2304      	movs	r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 ff41 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010cc:	f7ff fdf6 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_UART_MspInit+0xac>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <HAL_UART_MspInit+0xac>)
 80010d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010da:	6593      	str	r3, [r2, #88]	@ 0x58
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <HAL_UART_MspInit+0xac>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_UART_MspInit+0xac>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ec:	4a10      	ldr	r2, [pc, #64]	@ (8001130 <HAL_UART_MspInit+0xac>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_UART_MspInit+0xac>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001100:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001104:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001112:	2307      	movs	r3, #7
 8001114:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <HAL_UART_MspInit+0xb0>)
 800111e:	f002 ff97 	bl	8004050 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001122:	bf00      	nop
 8001124:	3778      	adds	r7, #120	@ 0x78
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40004800 	.word	0x40004800
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <NMI_Handler+0x4>

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <MemManage_Handler+0x4>

08001150 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <UsageFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118e:	f000 f89b 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800119c:	4802      	ldr	r0, [pc, #8]	@ (80011a8 <TIM1_CC_IRQHandler+0x10>)
 800119e:	f004 fb3a 	bl	8005816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000174 	.word	0x20000174

080011ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	@ (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d0:	480d      	ldr	r0, [pc, #52]	@ (8001208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d4:	f7ff ffea 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	@ (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	@ (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	@ (800121c <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fe:	f006 f9f9 	bl	80075f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001202:	f7ff fa0d 	bl	8000620 <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   r0, =_estack
 8001208:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001214:	080076b8 	.word	0x080076b8
  ldr r2, =_sbss
 8001218:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800121c:	2000025c 	.word	0x2000025c

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>

08001222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f002 fd09 	bl	8003c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001232:	200f      	movs	r0, #15
 8001234:	f000 f80e 	bl	8001254 <HAL_InitTick>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	e001      	b.n	8001248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001244:	f7ff fd40 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001248:	79fb      	ldrb	r3, [r7, #7]

}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_InitTick+0x68>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d022      	beq.n	80012ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_InitTick+0x6c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_InitTick+0x68>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001274:	fbb1 f3f3 	udiv	r3, r1, r3
 8001278:	fbb2 f3f3 	udiv	r3, r2, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fd14 	bl	8003caa <HAL_SYSTICK_Config>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10f      	bne.n	80012a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d809      	bhi.n	80012a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128e:	2200      	movs	r2, #0
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f04f 30ff 	mov.w	r0, #4294967295
 8001296:	f002 fce0 	bl	8003c5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_InitTick+0x70>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e007      	b.n	80012b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e004      	b.n	80012b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <HAL_IncTick+0x1c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_IncTick+0x20>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a03      	ldr	r2, [pc, #12]	@ (80012e4 <HAL_IncTick+0x1c>)
 80012d8:	6013      	str	r3, [r2, #0]
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000258 	.word	0x20000258
 80012e8:	20000008 	.word	0x20000008

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000258 	.word	0x20000258

08001304 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	609a      	str	r2, [r3, #8]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3360      	adds	r3, #96	@ 0x60
 800137e:	461a      	mov	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <LL_ADC_SetOffset+0x44>)
 800138e:	4013      	ands	r3, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	4313      	orrs	r3, r2
 800139c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	03fff000 	.word	0x03fff000

080013b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3360      	adds	r3, #96	@ 0x60
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3360      	adds	r3, #96	@ 0x60
 80013f0:	461a      	mov	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	431a      	orrs	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800140a:	bf00      	nop
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001416:	b480      	push	{r7}
 8001418:	b087      	sub	sp, #28
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3360      	adds	r3, #96	@ 0x60
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	431a      	orrs	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001440:	bf00      	nop
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3360      	adds	r3, #96	@ 0x60
 800145c:	461a      	mov	r2, r3
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	431a      	orrs	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001476:	bf00      	nop
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	615a      	str	r2, [r3, #20]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b087      	sub	sp, #28
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3330      	adds	r3, #48	@ 0x30
 80014de:	461a      	mov	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	4413      	add	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	211f      	movs	r1, #31
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	401a      	ands	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	0e9b      	lsrs	r3, r3, #26
 8001506:	f003 011f 	and.w	r1, r3, #31
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001526:	b480      	push	{r7}
 8001528:	b087      	sub	sp, #28
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3314      	adds	r3, #20
 8001536:	461a      	mov	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	0e5b      	lsrs	r3, r3, #25
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	0d1b      	lsrs	r3, r3, #20
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	2107      	movs	r1, #7
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	401a      	ands	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	0d1b      	lsrs	r3, r3, #20
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0318 	and.w	r3, r3, #24
 800159e:	4908      	ldr	r1, [pc, #32]	@ (80015c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015a0:	40d9      	lsrs	r1, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	400b      	ands	r3, r1
 80015a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015aa:	431a      	orrs	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	0007ffff 	.word	0x0007ffff

080015c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 031f 	and.w	r3, r3, #31
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800160c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6093      	str	r3, [r2, #8]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001634:	d101      	bne.n	800163a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800165c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001684:	d101      	bne.n	800168a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016d4:	f043 0202 	orr.w	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <LL_ADC_IsEnabled+0x18>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <LL_ADC_IsEnabled+0x1a>
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b02      	cmp	r3, #2
 8001720:	d101      	bne.n	8001726 <LL_ADC_IsDisableOngoing+0x18>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_ADC_IsDisableOngoing+0x1a>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001748:	f043 0204 	orr.w	r2, r3, #4
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800176c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001770:	f043 0210 	orr.w	r2, r3, #16
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b04      	cmp	r3, #4
 8001796:	d101      	bne.n	800179c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017be:	f043 0220 	orr.w	r2, r3, #32
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d101      	bne.n	80017ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b089      	sub	sp, #36	@ 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e1a9      	b.n	8001b66 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fa75 	bl	8000d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fef1 	bl	8001620 <LL_ADC_IsDeepPowerDownEnabled>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fed7 	bl	80015fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff0c 	bl	8001670 <LL_ADC_IsInternalRegulatorEnabled>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d115      	bne.n	800188a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fef0 	bl	8001648 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001868:	4b9c      	ldr	r3, [pc, #624]	@ (8001adc <HAL_ADC_Init+0x2e4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	4a9c      	ldr	r2, [pc, #624]	@ (8001ae0 <HAL_ADC_Init+0x2e8>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	3301      	adds	r3, #1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800187c:	e002      	b.n	8001884 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3b01      	subs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f9      	bne.n	800187e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff feee 	bl	8001670 <LL_ADC_IsInternalRegulatorEnabled>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10d      	bne.n	80018b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189e:	f043 0210 	orr.w	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff62 	bl	8001784 <LL_ADC_REG_IsConversionOngoing>
 80018c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 8142 	bne.w	8001b54 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 813e 	bne.w	8001b54 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018e0:	f043 0202 	orr.w	r2, r3, #2
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fefb 	bl	80016e8 <LL_ADC_IsEnabled>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d141      	bne.n	800197c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001900:	d004      	beq.n	800190c <HAL_ADC_Init+0x114>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a77      	ldr	r2, [pc, #476]	@ (8001ae4 <HAL_ADC_Init+0x2ec>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d10f      	bne.n	800192c <HAL_ADC_Init+0x134>
 800190c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001910:	f7ff feea 	bl	80016e8 <LL_ADC_IsEnabled>
 8001914:	4604      	mov	r4, r0
 8001916:	4873      	ldr	r0, [pc, #460]	@ (8001ae4 <HAL_ADC_Init+0x2ec>)
 8001918:	f7ff fee6 	bl	80016e8 <LL_ADC_IsEnabled>
 800191c:	4603      	mov	r3, r0
 800191e:	4323      	orrs	r3, r4
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e012      	b.n	8001952 <HAL_ADC_Init+0x15a>
 800192c:	486e      	ldr	r0, [pc, #440]	@ (8001ae8 <HAL_ADC_Init+0x2f0>)
 800192e:	f7ff fedb 	bl	80016e8 <LL_ADC_IsEnabled>
 8001932:	4604      	mov	r4, r0
 8001934:	486d      	ldr	r0, [pc, #436]	@ (8001aec <HAL_ADC_Init+0x2f4>)
 8001936:	f7ff fed7 	bl	80016e8 <LL_ADC_IsEnabled>
 800193a:	4603      	mov	r3, r0
 800193c:	431c      	orrs	r4, r3
 800193e:	486c      	ldr	r0, [pc, #432]	@ (8001af0 <HAL_ADC_Init+0x2f8>)
 8001940:	f7ff fed2 	bl	80016e8 <LL_ADC_IsEnabled>
 8001944:	4603      	mov	r3, r0
 8001946:	4323      	orrs	r3, r4
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d012      	beq.n	800197c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800195e:	d004      	beq.n	800196a <HAL_ADC_Init+0x172>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae4 <HAL_ADC_Init+0x2ec>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_ADC_Init+0x176>
 800196a:	4a62      	ldr	r2, [pc, #392]	@ (8001af4 <HAL_ADC_Init+0x2fc>)
 800196c:	e000      	b.n	8001970 <HAL_ADC_Init+0x178>
 800196e:	4a62      	ldr	r2, [pc, #392]	@ (8001af8 <HAL_ADC_Init+0x300>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f7ff fcc4 	bl	8001304 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7f5b      	ldrb	r3, [r3, #29]
 8001980:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001986:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800198c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001992:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800199a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d106      	bne.n	80019b8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	3b01      	subs	r3, #1
 80019b0:	045b      	lsls	r3, r3, #17
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d009      	beq.n	80019d4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	4b48      	ldr	r3, [pc, #288]	@ (8001afc <HAL_ADC_Init+0x304>)
 80019dc:	4013      	ands	r3, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fee5 	bl	80017d2 <LL_ADC_INJ_IsConversionOngoing>
 8001a08:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d17f      	bne.n	8001b10 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d17c      	bne.n	8001b10 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a1a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a22:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a32:	f023 0302 	bic.w	r3, r3, #2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	69b9      	ldr	r1, [r7, #24]
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d017      	beq.n	8001a78 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a60:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6911      	ldr	r1, [r2, #16]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a76:	e013      	b.n	8001aa0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a9c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d12a      	bne.n	8001b00 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ac0:	4311      	orrs	r1, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001acc:	430a      	orrs	r2, r1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0201 	orr.w	r2, r2, #1
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	e019      	b.n	8001b10 <HAL_ADC_Init+0x318>
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	053e2d63 	.word	0x053e2d63
 8001ae4:	50000100 	.word	0x50000100
 8001ae8:	50000400 	.word	0x50000400
 8001aec:	50000500 	.word	0x50000500
 8001af0:	50000600 	.word	0x50000600
 8001af4:	50000300 	.word	0x50000300
 8001af8:	50000700 	.word	0x50000700
 8001afc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10c      	bne.n	8001b32 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f023 010f 	bic.w	r1, r3, #15
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	1e5a      	subs	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b30:	e007      	b.n	8001b42 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 020f 	bic.w	r2, r2, #15
 8001b40:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b46:	f023 0303 	bic.w	r3, r3, #3
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b52:	e007      	b.n	8001b64 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	f043 0210 	orr.w	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	@ 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop

08001b70 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b80:	d004      	beq.n	8001b8c <HAL_ADC_Start+0x1c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a67      	ldr	r2, [pc, #412]	@ (8001d24 <HAL_ADC_Start+0x1b4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_Start+0x20>
 8001b8c:	4b66      	ldr	r3, [pc, #408]	@ (8001d28 <HAL_ADC_Start+0x1b8>)
 8001b8e:	e000      	b.n	8001b92 <HAL_ADC_Start+0x22>
 8001b90:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <HAL_ADC_Start+0x1bc>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fd16 	bl	80015c4 <LL_ADC_GetMultimode>
 8001b98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fdf0 	bl	8001784 <LL_ADC_REG_IsConversionOngoing>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 80b4 	bne.w	8001d14 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_Start+0x4a>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e0af      	b.n	8001d1a <HAL_ADC_Start+0x1aa>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fefc 	bl	80029c0 <ADC_Enable>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 809b 	bne.w	8001d0a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a4d      	ldr	r2, [pc, #308]	@ (8001d24 <HAL_ADC_Start+0x1b4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d009      	beq.n	8001c06 <HAL_ADC_Start+0x96>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a4e      	ldr	r2, [pc, #312]	@ (8001d30 <HAL_ADC_Start+0x1c0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d002      	beq.n	8001c02 <HAL_ADC_Start+0x92>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	e003      	b.n	8001c0a <HAL_ADC_Start+0x9a>
 8001c02:	4b4c      	ldr	r3, [pc, #304]	@ (8001d34 <HAL_ADC_Start+0x1c4>)
 8001c04:	e001      	b.n	8001c0a <HAL_ADC_Start+0x9a>
 8001c06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d002      	beq.n	8001c18 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c30:	d106      	bne.n	8001c40 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c36:	f023 0206 	bic.w	r2, r3, #6
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c3e:	e002      	b.n	8001c46 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	221c      	movs	r2, #28
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a32      	ldr	r2, [pc, #200]	@ (8001d24 <HAL_ADC_Start+0x1b4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_ADC_Start+0x104>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a32      	ldr	r2, [pc, #200]	@ (8001d30 <HAL_ADC_Start+0x1c0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d002      	beq.n	8001c70 <HAL_ADC_Start+0x100>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e003      	b.n	8001c78 <HAL_ADC_Start+0x108>
 8001c70:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <HAL_ADC_Start+0x1c4>)
 8001c72:	e001      	b.n	8001c78 <HAL_ADC_Start+0x108>
 8001c74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d008      	beq.n	8001c92 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d002      	beq.n	8001c92 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b09      	cmp	r3, #9
 8001c90:	d114      	bne.n	8001cbc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ca8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fd3d 	bl	8001734 <LL_ADC_REG_StartConversion>
 8001cba:	e02d      	b.n	8001d18 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a15      	ldr	r2, [pc, #84]	@ (8001d24 <HAL_ADC_Start+0x1b4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d009      	beq.n	8001ce6 <HAL_ADC_Start+0x176>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <HAL_ADC_Start+0x1c0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d002      	beq.n	8001ce2 <HAL_ADC_Start+0x172>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	e003      	b.n	8001cea <HAL_ADC_Start+0x17a>
 8001ce2:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_ADC_Start+0x1c4>)
 8001ce4:	e001      	b.n	8001cea <HAL_ADC_Start+0x17a>
 8001ce6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cea:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00f      	beq.n	8001d18 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d08:	e006      	b.n	8001d18 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
 8001d16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	50000100 	.word	0x50000100
 8001d28:	50000300 	.word	0x50000300
 8001d2c:	50000700 	.word	0x50000700
 8001d30:	50000500 	.word	0x50000500
 8001d34:	50000400 	.word	0x50000400

08001d38 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_Stop+0x16>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e023      	b.n	8001d96 <HAL_ADC_Stop+0x5e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001d56:	2103      	movs	r1, #3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fd75 	bl	8002848 <ADC_ConversionStop>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 febf 	bl	8002aec <ADC_Disable>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db2:	d004      	beq.n	8001dbe <HAL_ADC_PollForConversion+0x1e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a77      	ldr	r2, [pc, #476]	@ (8001f98 <HAL_ADC_PollForConversion+0x1f8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_PollForConversion+0x22>
 8001dbe:	4b77      	ldr	r3, [pc, #476]	@ (8001f9c <HAL_ADC_PollForConversion+0x1fc>)
 8001dc0:	e000      	b.n	8001dc4 <HAL_ADC_PollForConversion+0x24>
 8001dc2:	4b77      	ldr	r3, [pc, #476]	@ (8001fa0 <HAL_ADC_PollForConversion+0x200>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fbfd 	bl	80015c4 <LL_ADC_GetMultimode>
 8001dca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d102      	bne.n	8001dda <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	e037      	b.n	8001e4a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d002      	beq.n	8001dec <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d111      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfe:	f043 0220 	orr.w	r2, r3, #32
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0c1      	b.n	8001f8e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e0e:	e01c      	b.n	8001e4a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e18:	d004      	beq.n	8001e24 <HAL_ADC_PollForConversion+0x84>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8001f98 <HAL_ADC_PollForConversion+0x1f8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_PollForConversion+0x88>
 8001e24:	4b5d      	ldr	r3, [pc, #372]	@ (8001f9c <HAL_ADC_PollForConversion+0x1fc>)
 8001e26:	e000      	b.n	8001e2a <HAL_ADC_PollForConversion+0x8a>
 8001e28:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <HAL_ADC_PollForConversion+0x200>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fbd8 	bl	80015e0 <LL_ADC_GetMultiDMATransfer>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	f043 0220 	orr.w	r2, r3, #32
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0a3      	b.n	8001f8e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e46:	2304      	movs	r3, #4
 8001e48:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e4a:	f7ff fa4f 	bl	80012ec <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e50:	e021      	b.n	8001e96 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d01d      	beq.n	8001e96 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e5a:	f7ff fa47 	bl	80012ec <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <HAL_ADC_PollForConversion+0xd0>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d112      	bne.n	8001e96 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10b      	bne.n	8001e96 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	f043 0204 	orr.w	r2, r3, #4
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e07b      	b.n	8001f8e <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0d6      	beq.n	8001e52 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff faf7 	bl	80014a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01c      	beq.n	8001efa <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7f5b      	ldrb	r3, [r3, #29]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d118      	bne.n	8001efa <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d111      	bne.n	8001efa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a26      	ldr	r2, [pc, #152]	@ (8001f98 <HAL_ADC_PollForConversion+0x1f8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d009      	beq.n	8001f18 <HAL_ADC_PollForConversion+0x178>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a26      	ldr	r2, [pc, #152]	@ (8001fa4 <HAL_ADC_PollForConversion+0x204>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d002      	beq.n	8001f14 <HAL_ADC_PollForConversion+0x174>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_PollForConversion+0x17c>
 8001f14:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <HAL_ADC_PollForConversion+0x208>)
 8001f16:	e001      	b.n	8001f1c <HAL_ADC_PollForConversion+0x17c>
 8001f18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d008      	beq.n	8001f36 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d002      	beq.n	8001f36 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	d104      	bne.n	8001f40 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	e014      	b.n	8001f6a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a14      	ldr	r2, [pc, #80]	@ (8001f98 <HAL_ADC_PollForConversion+0x1f8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d009      	beq.n	8001f5e <HAL_ADC_PollForConversion+0x1be>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a15      	ldr	r2, [pc, #84]	@ (8001fa4 <HAL_ADC_PollForConversion+0x204>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d002      	beq.n	8001f5a <HAL_ADC_PollForConversion+0x1ba>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	e003      	b.n	8001f62 <HAL_ADC_PollForConversion+0x1c2>
 8001f5a:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <HAL_ADC_PollForConversion+0x208>)
 8001f5c:	e001      	b.n	8001f62 <HAL_ADC_PollForConversion+0x1c2>
 8001f5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f62:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d104      	bne.n	8001f7a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2208      	movs	r2, #8
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e008      	b.n	8001f8c <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d103      	bne.n	8001f8c <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	220c      	movs	r2, #12
 8001f8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	50000100 	.word	0x50000100
 8001f9c:	50000300 	.word	0x50000300
 8001fa0:	50000700 	.word	0x50000700
 8001fa4:	50000500 	.word	0x50000500
 8001fa8:	50000400 	.word	0x50000400

08001fac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0b6      	sub	sp, #216	@ 0xd8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x24>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f000 bc13 	b.w	8002812 <HAL_ADC_ConfigChannel+0x84a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fbc3 	bl	8001784 <LL_ADC_REG_IsConversionOngoing>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 83f3 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	f7ff fa5b 	bl	80014ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fbb1 	bl	8001784 <LL_ADC_REG_IsConversionOngoing>
 8002022:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fbd1 	bl	80017d2 <LL_ADC_INJ_IsConversionOngoing>
 8002030:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002034:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002038:	2b00      	cmp	r3, #0
 800203a:	f040 81d9 	bne.w	80023f0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800203e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 81d4 	bne.w	80023f0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002050:	d10f      	bne.n	8002072 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	f7ff fa62 	bl	8001526 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fa09 	bl	8001482 <LL_ADC_SetSamplingTimeCommonConfig>
 8002070:	e00e      	b.n	8002090 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6819      	ldr	r1, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	461a      	mov	r2, r3
 8002080:	f7ff fa51 	bl	8001526 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f9f9 	bl	8001482 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	08db      	lsrs	r3, r3, #3
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d022      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6919      	ldr	r1, [r3, #16]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020c2:	f7ff f953 	bl	800136c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6919      	ldr	r1, [r3, #16]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f7ff f99f 	bl	8001416 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d102      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x126>
 80020e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020ec:	e000      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x128>
 80020ee:	2300      	movs	r3, #0
 80020f0:	461a      	mov	r2, r3
 80020f2:	f7ff f9ab 	bl	800144c <LL_ADC_SetOffsetSaturation>
 80020f6:	e17b      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f958 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x15c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff f94d 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	0e9b      	lsrs	r3, r3, #26
 800211e:	f003 021f 	and.w	r2, r3, #31
 8002122:	e01e      	b.n	8002162 <HAL_ADC_ConfigChannel+0x19a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f942 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002142:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002146:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800214a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002152:	2320      	movs	r3, #32
 8002154:	e004      	b.n	8002160 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_ADC_ConfigChannel+0x1b2>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	0e9b      	lsrs	r3, r3, #26
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	e018      	b.n	80021ac <HAL_ADC_ConfigChannel+0x1e4>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800218e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800219e:	2320      	movs	r3, #32
 80021a0:	e004      	b.n	80021ac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d106      	bne.n	80021be <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f911 	bl	80013e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2101      	movs	r1, #1
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f8f5 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x222>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f8ea 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	e01e      	b.n	8002228 <HAL_ADC_ConfigChannel+0x260>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f8df 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800220c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e004      	b.n	8002226 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800221c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x278>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	e018      	b.n	8002272 <HAL_ADC_ConfigChannel+0x2aa>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002254:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002258:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800225c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e004      	b.n	8002272 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002268:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002272:	429a      	cmp	r2, r3
 8002274:	d106      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f8ae 	bl	80013e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2102      	movs	r1, #2
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f892 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x2e8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2102      	movs	r1, #2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff f887 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	f003 021f 	and.w	r2, r3, #31
 80022ae:	e01e      	b.n	80022ee <HAL_ADC_ConfigChannel+0x326>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2102      	movs	r1, #2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f87c 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80022ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80022d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80022de:	2320      	movs	r3, #32
 80022e0:	e004      	b.n	80022ec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80022e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x33e>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	e016      	b.n	8002334 <HAL_ADC_ConfigChannel+0x36c>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002318:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800231a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800231e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002326:	2320      	movs	r3, #32
 8002328:	e004      	b.n	8002334 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800232a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002334:	429a      	cmp	r2, r3
 8002336:	d106      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2200      	movs	r2, #0
 800233e:	2102      	movs	r1, #2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff f84d 	bl	80013e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2103      	movs	r1, #3
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff f831 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x3aa>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2103      	movs	r1, #3
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f826 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	e017      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x3da>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2103      	movs	r1, #3
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f81b 	bl	80013b4 <LL_ADC_GetOffsetChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800238a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800238c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800238e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e003      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x3f2>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	e011      	b.n	80023de <HAL_ADC_ConfigChannel+0x416>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80023c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80023cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80023d2:	2320      	movs	r3, #32
 80023d4:	e003      	b.n	80023de <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80023d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2103      	movs	r1, #3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fff8 	bl	80013e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f977 	bl	80016e8 <LL_ADC_IsEnabled>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 813d 	bne.w	800267c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	461a      	mov	r2, r3
 8002410:	f7ff f8b4 	bl	800157c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4aa2      	ldr	r2, [pc, #648]	@ (80026a4 <HAL_ADC_ConfigChannel+0x6dc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f040 812e 	bne.w	800267c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x480>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	3301      	adds	r3, #1
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2b09      	cmp	r3, #9
 800243e:	bf94      	ite	ls
 8002440:	2301      	movls	r3, #1
 8002442:	2300      	movhi	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	e019      	b.n	800247c <HAL_ADC_ConfigChannel+0x4b4>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002458:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800245a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e003      	b.n	800246c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002464:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	2b09      	cmp	r3, #9
 8002474:	bf94      	ite	ls
 8002476:	2301      	movls	r3, #1
 8002478:	2300      	movhi	r3, #0
 800247a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247c:	2b00      	cmp	r3, #0
 800247e:	d079      	beq.n	8002574 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002488:	2b00      	cmp	r3, #0
 800248a:	d107      	bne.n	800249c <HAL_ADC_ConfigChannel+0x4d4>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	3301      	adds	r3, #1
 8002494:	069b      	lsls	r3, r3, #26
 8002496:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800249a:	e015      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x500>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80024ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	e003      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80024b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	069b      	lsls	r3, r3, #26
 80024c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x520>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	e017      	b.n	8002518 <HAL_ADC_ConfigChannel+0x550>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80024f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80024fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e003      	b.n	800250c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2101      	movs	r1, #1
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	ea42 0103 	orr.w	r1, r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_ADC_ConfigChannel+0x576>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e9b      	lsrs	r3, r3, #26
 800252e:	3301      	adds	r3, #1
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	051b      	lsls	r3, r3, #20
 800253c:	e018      	b.n	8002570 <HAL_ADC_ConfigChannel+0x5a8>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800254c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e003      	b.n	8002562 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800255a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002570:	430b      	orrs	r3, r1
 8002572:	e07e      	b.n	8002672 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d107      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x5c8>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	069b      	lsls	r3, r3, #26
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258e:	e015      	b.n	80025bc <HAL_ADC_ConfigChannel+0x5f4>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800259e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e003      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	069b      	lsls	r3, r3, #26
 80025b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x614>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	e017      	b.n	800260c <HAL_ADC_ConfigChannel+0x644>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	61fb      	str	r3, [r7, #28]
  return result;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e003      	b.n	8002600 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	ea42 0103 	orr.w	r1, r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10d      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x670>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	3301      	adds	r3, #1
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	3b1e      	subs	r3, #30
 8002630:	051b      	lsls	r3, r3, #20
 8002632:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002636:	e01b      	b.n	8002670 <HAL_ADC_ConfigChannel+0x6a8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	613b      	str	r3, [r7, #16]
  return result;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	f003 021f 	and.w	r2, r3, #31
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	3b1e      	subs	r3, #30
 800266a:	051b      	lsls	r3, r3, #20
 800266c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002670:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe ff55 	bl	8001526 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80be 	beq.w	8002806 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002692:	d004      	beq.n	800269e <HAL_ADC_ConfigChannel+0x6d6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <HAL_ADC_ConfigChannel+0x6e4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10a      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x6ec>
 800269e:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <HAL_ADC_ConfigChannel+0x6e8>)
 80026a0:	e009      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x6ee>
 80026a2:	bf00      	nop
 80026a4:	407f0000 	.word	0x407f0000
 80026a8:	80080000 	.word	0x80080000
 80026ac:	50000100 	.word	0x50000100
 80026b0:	50000300 	.word	0x50000300
 80026b4:	4b59      	ldr	r3, [pc, #356]	@ (800281c <HAL_ADC_ConfigChannel+0x854>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fe4a 	bl	8001350 <LL_ADC_GetCommonPathInternalCh>
 80026bc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a56      	ldr	r2, [pc, #344]	@ (8002820 <HAL_ADC_ConfigChannel+0x858>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <HAL_ADC_ConfigChannel+0x70c>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a55      	ldr	r2, [pc, #340]	@ (8002824 <HAL_ADC_ConfigChannel+0x85c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d13a      	bne.n	800274a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d134      	bne.n	800274a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026e8:	d005      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x72e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a4e      	ldr	r2, [pc, #312]	@ (8002828 <HAL_ADC_ConfigChannel+0x860>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	f040 8085 	bne.w	8002800 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026fe:	d004      	beq.n	800270a <HAL_ADC_ConfigChannel+0x742>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a49      	ldr	r2, [pc, #292]	@ (800282c <HAL_ADC_ConfigChannel+0x864>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x746>
 800270a:	4a49      	ldr	r2, [pc, #292]	@ (8002830 <HAL_ADC_ConfigChannel+0x868>)
 800270c:	e000      	b.n	8002710 <HAL_ADC_ConfigChannel+0x748>
 800270e:	4a43      	ldr	r2, [pc, #268]	@ (800281c <HAL_ADC_ConfigChannel+0x854>)
 8002710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002714:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f7fe fe05 	bl	800132a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002720:	4b44      	ldr	r3, [pc, #272]	@ (8002834 <HAL_ADC_ConfigChannel+0x86c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	4a44      	ldr	r2, [pc, #272]	@ (8002838 <HAL_ADC_ConfigChannel+0x870>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800273a:	e002      	b.n	8002742 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3b01      	subs	r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f9      	bne.n	800273c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002748:	e05a      	b.n	8002800 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3b      	ldr	r2, [pc, #236]	@ (800283c <HAL_ADC_ConfigChannel+0x874>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d125      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11f      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a31      	ldr	r2, [pc, #196]	@ (800282c <HAL_ADC_ConfigChannel+0x864>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d104      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x7ac>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a34      	ldr	r2, [pc, #208]	@ (8002840 <HAL_ADC_ConfigChannel+0x878>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d047      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800277c:	d004      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x7c0>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2a      	ldr	r2, [pc, #168]	@ (800282c <HAL_ADC_ConfigChannel+0x864>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x7c4>
 8002788:	4a29      	ldr	r2, [pc, #164]	@ (8002830 <HAL_ADC_ConfigChannel+0x868>)
 800278a:	e000      	b.n	800278e <HAL_ADC_ConfigChannel+0x7c6>
 800278c:	4a23      	ldr	r2, [pc, #140]	@ (800281c <HAL_ADC_ConfigChannel+0x854>)
 800278e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002796:	4619      	mov	r1, r3
 8002798:	4610      	mov	r0, r2
 800279a:	f7fe fdc6 	bl	800132a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279e:	e031      	b.n	8002804 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a27      	ldr	r2, [pc, #156]	@ (8002844 <HAL_ADC_ConfigChannel+0x87c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d12d      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d127      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <HAL_ADC_ConfigChannel+0x864>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d022      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027c8:	d004      	beq.n	80027d4 <HAL_ADC_ConfigChannel+0x80c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a17      	ldr	r2, [pc, #92]	@ (800282c <HAL_ADC_ConfigChannel+0x864>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x810>
 80027d4:	4a16      	ldr	r2, [pc, #88]	@ (8002830 <HAL_ADC_ConfigChannel+0x868>)
 80027d6:	e000      	b.n	80027da <HAL_ADC_ConfigChannel+0x812>
 80027d8:	4a10      	ldr	r2, [pc, #64]	@ (800281c <HAL_ADC_ConfigChannel+0x854>)
 80027da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7fe fda0 	bl	800132a <LL_ADC_SetCommonPathInternalCh>
 80027ea:	e00c      	b.n	8002806 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80027fe:	e002      	b.n	8002806 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002804:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800280e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002812:	4618      	mov	r0, r3
 8002814:	37d8      	adds	r7, #216	@ 0xd8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	50000700 	.word	0x50000700
 8002820:	c3210000 	.word	0xc3210000
 8002824:	90c00010 	.word	0x90c00010
 8002828:	50000600 	.word	0x50000600
 800282c:	50000100 	.word	0x50000100
 8002830:	50000300 	.word	0x50000300
 8002834:	20000000 	.word	0x20000000
 8002838:	053e2d63 	.word	0x053e2d63
 800283c:	c7520000 	.word	0xc7520000
 8002840:	50000500 	.word	0x50000500
 8002844:	cb840000 	.word	0xcb840000

08002848 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe ff90 	bl	8001784 <LL_ADC_REG_IsConversionOngoing>
 8002864:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe ffb1 	bl	80017d2 <LL_ADC_INJ_IsConversionOngoing>
 8002870:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8098 	beq.w	80029b0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d02a      	beq.n	80028e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7f5b      	ldrb	r3, [r3, #29]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d126      	bne.n	80028e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7f1b      	ldrb	r3, [r3, #28]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d122      	bne.n	80028e4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800289e:	2301      	movs	r3, #1
 80028a0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028a2:	e014      	b.n	80028ce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4a45      	ldr	r2, [pc, #276]	@ (80029bc <ADC_ConversionStop+0x174>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d90d      	bls.n	80028c8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	f043 0210 	orr.w	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e074      	b.n	80029b2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	3301      	adds	r3, #1
 80028cc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d8:	2b40      	cmp	r3, #64	@ 0x40
 80028da:	d1e3      	bne.n	80028a4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2240      	movs	r2, #64	@ 0x40
 80028e2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d014      	beq.n	8002914 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe ff48 	bl	8001784 <LL_ADC_REG_IsConversionOngoing>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00c      	beq.n	8002914 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe ff05 	bl	800170e <LL_ADC_IsDisableOngoing>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe ff24 	bl	800175c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d014      	beq.n	8002944 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe ff57 	bl	80017d2 <LL_ADC_INJ_IsConversionOngoing>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe feed 	bl	800170e <LL_ADC_IsDisableOngoing>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe ff33 	bl	80017aa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d005      	beq.n	8002956 <ADC_ConversionStop+0x10e>
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d105      	bne.n	800295c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002950:	230c      	movs	r3, #12
 8002952:	617b      	str	r3, [r7, #20]
        break;
 8002954:	e005      	b.n	8002962 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002956:	2308      	movs	r3, #8
 8002958:	617b      	str	r3, [r7, #20]
        break;
 800295a:	e002      	b.n	8002962 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800295c:	2304      	movs	r3, #4
 800295e:	617b      	str	r3, [r7, #20]
        break;
 8002960:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002962:	f7fe fcc3 	bl	80012ec <HAL_GetTick>
 8002966:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002968:	e01b      	b.n	80029a2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800296a:	f7fe fcbf 	bl	80012ec <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b05      	cmp	r3, #5
 8002976:	d914      	bls.n	80029a2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00d      	beq.n	80029a2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	f043 0210 	orr.w	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002996:	f043 0201 	orr.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e007      	b.n	80029b2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1dc      	bne.n	800296a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	a33fffff 	.word	0xa33fffff

080029c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fe89 	bl	80016e8 <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d176      	bne.n	8002aca <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad4 <ADC_Enable+0x114>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e062      	b.n	8002acc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fe44 	bl	8001698 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a18:	d004      	beq.n	8002a24 <ADC_Enable+0x64>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ad8 <ADC_Enable+0x118>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d101      	bne.n	8002a28 <ADC_Enable+0x68>
 8002a24:	4b2d      	ldr	r3, [pc, #180]	@ (8002adc <ADC_Enable+0x11c>)
 8002a26:	e000      	b.n	8002a2a <ADC_Enable+0x6a>
 8002a28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae0 <ADC_Enable+0x120>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fc90 	bl	8001350 <LL_ADC_GetCommonPathInternalCh>
 8002a30:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d013      	beq.n	8002a62 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae4 <ADC_Enable+0x124>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	4a29      	ldr	r2, [pc, #164]	@ (8002ae8 <ADC_Enable+0x128>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a54:	e002      	b.n	8002a5c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f9      	bne.n	8002a56 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a62:	f7fe fc43 	bl	80012ec <HAL_GetTick>
 8002a66:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a68:	e028      	b.n	8002abc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fe3a 	bl	80016e8 <LL_ADC_IsEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d104      	bne.n	8002a84 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fe0a 	bl	8001698 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a84:	f7fe fc32 	bl	80012ec <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d914      	bls.n	8002abc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d00d      	beq.n	8002abc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa4:	f043 0210 	orr.w	r2, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab0:	f043 0201 	orr.w	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e007      	b.n	8002acc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d1cf      	bne.n	8002a6a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	8000003f 	.word	0x8000003f
 8002ad8:	50000100 	.word	0x50000100
 8002adc:	50000300 	.word	0x50000300
 8002ae0:	50000700 	.word	0x50000700
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	053e2d63 	.word	0x053e2d63

08002aec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fe08 	bl	800170e <LL_ADC_IsDisableOngoing>
 8002afe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe fdef 	bl	80016e8 <LL_ADC_IsEnabled>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d047      	beq.n	8002ba0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d144      	bne.n	8002ba0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030d 	and.w	r3, r3, #13
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10c      	bne.n	8002b3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fdc9 	bl	80016c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2203      	movs	r2, #3
 8002b34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b36:	f7fe fbd9 	bl	80012ec <HAL_GetTick>
 8002b3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b3c:	e029      	b.n	8002b92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e023      	b.n	8002ba2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b5a:	f7fe fbc7 	bl	80012ec <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d914      	bls.n	8002b92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e007      	b.n	8002ba2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1dc      	bne.n	8002b5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <LL_ADC_SetCommonPathInternalCh>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_GetCommonPathInternalCh>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_SetOffset>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3360      	adds	r3, #96	@ 0x60
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b08      	ldr	r3, [pc, #32]	@ (8002c30 <LL_ADC_SetOffset+0x44>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	601a      	str	r2, [r3, #0]
}
 8002c24:	bf00      	nop
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	03fff000 	.word	0x03fff000

08002c34 <LL_ADC_GetOffsetChannel>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3360      	adds	r3, #96	@ 0x60
 8002c42:	461a      	mov	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_SetOffsetState>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3360      	adds	r3, #96	@ 0x60
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_SetOffsetSign>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	b087      	sub	sp, #28
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3360      	adds	r3, #96	@ 0x60
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	601a      	str	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_SetOffsetSaturation>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3360      	adds	r3, #96	@ 0x60
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	615a      	str	r2, [r3, #20]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_SetChannelSamplingTime>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3314      	adds	r3, #20
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	0e5b      	lsrs	r3, r3, #25
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	4413      	add	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	0d1b      	lsrs	r3, r3, #20
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2107      	movs	r1, #7
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	0d1b      	lsrs	r3, r3, #20
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	601a      	str	r2, [r3, #0]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <LL_ADC_SetChannelSingleDiff>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0318 	and.w	r3, r3, #24
 8002da2:	4908      	ldr	r1, [pc, #32]	@ (8002dc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002da4:	40d9      	lsrs	r1, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	400b      	ands	r3, r1
 8002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dae:	431a      	orrs	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	0007ffff 	.word	0x0007ffff

08002dc8 <LL_ADC_IsEnabled>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <LL_ADC_IsEnabled+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_ADC_IsEnabled+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_ADC_REG_IsConversionOngoing>:
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d101      	bne.n	8002e06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_ADC_INJ_IsConversionOngoing>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d101      	bne.n	8002e2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b0b6      	sub	sp, #216	@ 0xd8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d102      	bne.n	8002e66 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002e60:	2302      	movs	r3, #2
 8002e62:	f000 bcfd 	b.w	8003860 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d130      	bne.n	8002ee0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b09      	cmp	r3, #9
 8002e84:	d179      	bne.n	8002f7a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	025b      	lsls	r3, r3, #9
 8002e96:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002ea2:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002eae:	e007      	b.n	8002ec0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	025b      	lsls	r3, r3, #9
 8002eb8:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 8002ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ec6:	4b84      	ldr	r3, [pc, #528]	@ (80030d8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002edc:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002ede:	e04c      	b.n	8002f7a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d11d      	bne.n	8002f24 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8002f0c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f18:	e004      	b.n	8002f24 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	f003 021f 	and.w	r2, r3, #31
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f48:	1e5a      	subs	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002f52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80030d8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	430b      	orrs	r3, r1
 8002f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff48 	bl	8002e14 <LL_ADC_INJ_IsConversionOngoing>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d124      	bne.n	8002fd4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d112      	bne.n	8002fba <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002fa4:	055a      	lsls	r2, r3, #21
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fac:	051b      	lsls	r3, r3, #20
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]
 8002fb8:	e00c      	b.n	8002fd4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002fca:	055a      	lsls	r2, r3, #21
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff08 	bl	8002dee <LL_ADC_REG_IsConversionOngoing>
 8002fde:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ff14 	bl	8002e14 <LL_ADC_INJ_IsConversionOngoing>
 8002fec:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f040 822e 	bne.w	8003456 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 8229 	bne.w	8003456 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d116      	bne.n	8003042 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800301a:	2b01      	cmp	r3, #1
 800301c:	d108      	bne.n	8003030 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800302c:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800302e:	e01f      	b.n	8003070 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800303e:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003040:	e016      	b.n	8003070 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003048:	2b01      	cmp	r3, #1
 800304a:	d109      	bne.n	8003060 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800305e:	e007      	b.n	8003070 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800306e:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003076:	2b01      	cmp	r3, #1
 8003078:	d110      	bne.n	800309c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	430b      	orrs	r3, r1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0202 	orr.w	r2, r2, #2
 8003098:	611a      	str	r2, [r3, #16]
 800309a:	e007      	b.n	80030ac <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0202 	bic.w	r2, r2, #2
 80030aa:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030b4:	d112      	bne.n	80030dc <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	4619      	mov	r1, r3
 80030c2:	f7ff fe31 	bl	8002d28 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fe17 	bl	8002d02 <LL_ADC_SetSamplingTimeCommonConfig>
 80030d4:	e011      	b.n	80030fa <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80030d6:	bf00      	nop
 80030d8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80030e8:	461a      	mov	r2, r3
 80030ea:	f7ff fe1d 	bl	8002d28 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe04 	bl	8002d02 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	08db      	lsrs	r3, r3, #3
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d022      	beq.n	8003162 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6919      	ldr	r1, [r3, #16]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800312c:	f7ff fd5e 	bl	8002bec <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6919      	ldr	r1, [r3, #16]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	461a      	mov	r2, r3
 800313e:	f7ff fdaa 	bl	8002c96 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003152:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003156:	e000      	b.n	800315a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003158:	2300      	movs	r3, #0
 800315a:	461a      	mov	r2, r3
 800315c:	f7ff fdb6 	bl	8002ccc <LL_ADC_SetOffsetSaturation>
 8003160:	e179      	b.n	8003456 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fd63 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fd58 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	0e9b      	lsrs	r3, r3, #26
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	e01e      	b.n	80031cc <HAL_ADCEx_InjectedConfigChannel+0x390>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fd4d 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80031ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80031b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80031bc:	2320      	movs	r3, #32
 80031be:	e004      	b.n	80031ca <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80031c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	e018      	b.n	8003216 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80031f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003200:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003208:	2320      	movs	r3, #32
 800320a:	e004      	b.n	8003216 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800320c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003216:	429a      	cmp	r2, r3
 8003218:	d106      	bne.n	8003228 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fd1c 	bl	8002c60 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fd00 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fcf5 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 800324a:	4603      	mov	r3, r0
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	f003 021f 	and.w	r2, r3, #31
 8003252:	e01e      	b.n	8003292 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fcea 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 8003260:	4603      	mov	r3, r0
 8003262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003272:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003276:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800327a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e004      	b.n	8003290 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0e9b      	lsrs	r3, r3, #26
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	e018      	b.n	80032dc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80032be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80032c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e004      	b.n	80032dc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80032d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032dc:	429a      	cmp	r2, r3
 80032de:	d106      	bne.n	80032ee <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2101      	movs	r1, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fcb9 	bl	8002c60 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2102      	movs	r1, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fc9d 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fc92 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 8003310:	4603      	mov	r3, r0
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	e01e      	b.n	8003358 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2102      	movs	r1, #2
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fc87 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 8003326:	4603      	mov	r3, r0
 8003328:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003338:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800333c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003340:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003348:	2320      	movs	r3, #32
 800334a:	e004      	b.n	8003356 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800334c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0e9b      	lsrs	r3, r3, #26
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	e014      	b.n	800339a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800337e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003384:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e004      	b.n	800339a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8003390:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800339a:	429a      	cmp	r2, r3
 800339c:	d106      	bne.n	80033ac <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	2102      	movs	r1, #2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fc5a 	bl	8002c60 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2103      	movs	r1, #3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fc3e 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2103      	movs	r1, #3
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fc33 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	f003 021f 	and.w	r2, r3, #31
 80033d6:	e017      	b.n	8003408 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2103      	movs	r1, #3
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fc28 	bl	8002c34 <LL_ADC_GetOffsetChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80033f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80033f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e003      	b.n	8003406 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80033fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d105      	bne.n	8003420 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	e011      	b.n	8003444 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800342e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003430:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003432:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8003438:	2320      	movs	r3, #32
 800343a:	e003      	b.n	8003444 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 800343c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003444:	429a      	cmp	r2, r3
 8003446:	d106      	bne.n	8003456 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2200      	movs	r2, #0
 800344e:	2103      	movs	r1, #3
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fc05 	bl	8002c60 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fcb4 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 813d 	bne.w	80036e2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	461a      	mov	r2, r3
 8003476:	f7ff fc83 	bl	8002d80 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4aa2      	ldr	r2, [pc, #648]	@ (8003708 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	f040 812e 	bne.w	80036e2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	3301      	adds	r3, #1
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2b09      	cmp	r3, #9
 80034a4:	bf94      	ite	ls
 80034a6:	2301      	movls	r3, #1
 80034a8:	2300      	movhi	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	e019      	b.n	80034e2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80034bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80034c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80034c6:	2320      	movs	r3, #32
 80034c8:	e003      	b.n	80034d2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80034ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2b09      	cmp	r3, #9
 80034da:	bf94      	ite	ls
 80034dc:	2301      	movls	r3, #1
 80034de:	2300      	movhi	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d079      	beq.n	80035da <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d107      	bne.n	8003502 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	3301      	adds	r3, #1
 80034fa:	069b      	lsls	r3, r3, #26
 80034fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003500:	e015      	b.n	800352e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003512:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800351a:	2320      	movs	r3, #32
 800351c:	e003      	b.n	8003526 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800351e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	3301      	adds	r3, #1
 8003528:	069b      	lsls	r3, r3, #26
 800352a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_ADCEx_InjectedConfigChannel+0x712>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0e9b      	lsrs	r3, r3, #26
 8003540:	3301      	adds	r3, #1
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	e017      	b.n	800357e <HAL_ADCEx_InjectedConfigChannel+0x742>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800355c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8003566:	2320      	movs	r3, #32
 8003568:	e003      	b.n	8003572 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800356a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	ea42 0103 	orr.w	r1, r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	0e9b      	lsrs	r3, r3, #26
 8003594:	3301      	adds	r3, #1
 8003596:	f003 021f 	and.w	r2, r3, #31
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	051b      	lsls	r3, r3, #20
 80035a2:	e018      	b.n	80035d6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80035b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80035bc:	2320      	movs	r3, #32
 80035be:	e003      	b.n	80035c8 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	f003 021f 	and.w	r2, r3, #31
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d6:	430b      	orrs	r3, r1
 80035d8:	e07e      	b.n	80036d8 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d107      	bne.n	80035f6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	3301      	adds	r3, #1
 80035ee:	069b      	lsls	r3, r3, #26
 80035f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035f4:	e015      	b.n	8003622 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e003      	b.n	800361a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8003612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3301      	adds	r3, #1
 800361c:	069b      	lsls	r3, r3, #26
 800361e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_ADCEx_InjectedConfigChannel+0x806>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	0e9b      	lsrs	r3, r3, #26
 8003634:	3301      	adds	r3, #1
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	e017      	b.n	8003672 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	61bb      	str	r3, [r7, #24]
  return result;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e003      	b.n	8003666 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	ea42 0103 	orr.w	r1, r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	0e9b      	lsrs	r3, r3, #26
 8003688:	3301      	adds	r3, #1
 800368a:	f003 021f 	and.w	r2, r3, #31
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	3b1e      	subs	r3, #30
 8003696:	051b      	lsls	r3, r3, #20
 8003698:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800369c:	e01b      	b.n	80036d6 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	60fb      	str	r3, [r7, #12]
  return result;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e003      	b.n	80036c2 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	3b1e      	subs	r3, #30
 80036d0:	051b      	lsls	r3, r3, #20
 80036d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d6:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036dc:	4619      	mov	r1, r3
 80036de:	f7ff fb23 	bl	8002d28 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4b09      	ldr	r3, [pc, #36]	@ (800370c <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80b2 	beq.w	8003854 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f8:	d004      	beq.n	8003704 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a04      	ldr	r2, [pc, #16]	@ (8003710 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d109      	bne.n	8003718 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8003704:	4b03      	ldr	r3, [pc, #12]	@ (8003714 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8003706:	e008      	b.n	800371a <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8003708:	407f0000 	.word	0x407f0000
 800370c:	80080000 	.word	0x80080000
 8003710:	50000100 	.word	0x50000100
 8003714:	50000300 	.word	0x50000300
 8003718:	4b53      	ldr	r3, [pc, #332]	@ (8003868 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fa58 	bl	8002bd0 <LL_ADC_GetCommonPathInternalCh>
 8003720:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a50      	ldr	r2, [pc, #320]	@ (800386c <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4f      	ldr	r2, [pc, #316]	@ (8003870 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d139      	bne.n	80037ac <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003738:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800373c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d133      	bne.n	80037ac <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800374c:	d004      	beq.n	8003758 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a48      	ldr	r2, [pc, #288]	@ (8003874 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d17a      	bne.n	800384e <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003760:	d004      	beq.n	800376c <HAL_ADCEx_InjectedConfigChannel+0x930>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a44      	ldr	r2, [pc, #272]	@ (8003878 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_ADCEx_InjectedConfigChannel+0x934>
 800376c:	4a43      	ldr	r2, [pc, #268]	@ (800387c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800376e:	e000      	b.n	8003772 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8003770:	4a3d      	ldr	r2, [pc, #244]	@ (8003868 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003776:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7ff fa14 	bl	8002baa <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003782:	4b3f      	ldr	r3, [pc, #252]	@ (8003880 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	099b      	lsrs	r3, r3, #6
 8003788:	4a3e      	ldr	r2, [pc, #248]	@ (8003884 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	099a      	lsrs	r2, r3, #6
 8003790:	4613      	mov	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800379a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800379c:	e002      	b.n	80037a4 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f9      	bne.n	800379e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037aa:	e050      	b.n	800384e <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a35      	ldr	r2, [pc, #212]	@ (8003888 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d125      	bne.n	8003802 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11f      	bne.n	8003802 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003878 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d104      	bne.n	80037d6 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2e      	ldr	r2, [pc, #184]	@ (800388c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d03d      	beq.n	8003852 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037de:	d004      	beq.n	80037ea <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a24      	ldr	r2, [pc, #144]	@ (8003878 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80037ea:	4a24      	ldr	r2, [pc, #144]	@ (800387c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80037ec:	e000      	b.n	80037f0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80037ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003868 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80037f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f7ff f9d5 	bl	8002baa <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003800:	e027      	b.n	8003852 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d123      	bne.n	8003854 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800380c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11d      	bne.n	8003854 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a16      	ldr	r2, [pc, #88]	@ (8003878 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800382a:	d004      	beq.n	8003836 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a11      	ldr	r2, [pc, #68]	@ (8003878 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8003836:	4a11      	ldr	r2, [pc, #68]	@ (800387c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003838:	e000      	b.n	800383c <HAL_ADCEx_InjectedConfigChannel+0xa00>
 800383a:	4a0b      	ldr	r2, [pc, #44]	@ (8003868 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800383c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003840:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f7ff f9af 	bl	8002baa <LL_ADC_SetCommonPathInternalCh>
 800384c:	e002      	b.n	8003854 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003852:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800385c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003860:	4618      	mov	r0, r3
 8003862:	37d8      	adds	r7, #216	@ 0xd8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	50000700 	.word	0x50000700
 800386c:	c3210000 	.word	0xc3210000
 8003870:	90c00010 	.word	0x90c00010
 8003874:	50000600 	.word	0x50000600
 8003878:	50000100 	.word	0x50000100
 800387c:	50000300 	.word	0x50000300
 8003880:	20000000 	.word	0x20000000
 8003884:	053e2d63 	.word	0x053e2d63
 8003888:	c7520000 	.word	0xc7520000
 800388c:	50000500 	.word	0x50000500
 8003890:	cb840000 	.word	0xcb840000

08003894 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b0a1      	sub	sp, #132	@ 0x84
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0e7      	b.n	8003a82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038ba:	2300      	movs	r3, #0
 80038bc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038be:	2300      	movs	r3, #0
 80038c0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ca:	d102      	bne.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038cc:	4b6f      	ldr	r3, [pc, #444]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	e009      	b.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d102      	bne.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80038dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	e001      	b.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0be      	b.n	8003a82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fa71 	bl	8002dee <LL_ADC_REG_IsConversionOngoing>
 800390c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fa6b 	bl	8002dee <LL_ADC_REG_IsConversionOngoing>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 80a0 	bne.w	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 809c 	bne.w	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003930:	d004      	beq.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a55      	ldr	r2, [pc, #340]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800393c:	4b56      	ldr	r3, [pc, #344]	@ (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800393e:	e000      	b.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003940:	4b56      	ldr	r3, [pc, #344]	@ (8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003942:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d04b      	beq.n	80039e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800394c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800395e:	035b      	lsls	r3, r3, #13
 8003960:	430b      	orrs	r3, r1
 8003962:	431a      	orrs	r2, r3
 8003964:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003966:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003970:	d004      	beq.n	800397c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a45      	ldr	r2, [pc, #276]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d10f      	bne.n	800399c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800397c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003980:	f7ff fa22 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003984:	4604      	mov	r4, r0
 8003986:	4841      	ldr	r0, [pc, #260]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003988:	f7ff fa1e 	bl	8002dc8 <LL_ADC_IsEnabled>
 800398c:	4603      	mov	r3, r0
 800398e:	4323      	orrs	r3, r4
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e012      	b.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800399c:	483c      	ldr	r0, [pc, #240]	@ (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800399e:	f7ff fa13 	bl	8002dc8 <LL_ADC_IsEnabled>
 80039a2:	4604      	mov	r4, r0
 80039a4:	483b      	ldr	r0, [pc, #236]	@ (8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039a6:	f7ff fa0f 	bl	8002dc8 <LL_ADC_IsEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	431c      	orrs	r4, r3
 80039ae:	483c      	ldr	r0, [pc, #240]	@ (8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039b0:	f7ff fa0a 	bl	8002dc8 <LL_ADC_IsEnabled>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4323      	orrs	r3, r4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d056      	beq.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039ce:	f023 030f 	bic.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	6811      	ldr	r1, [r2, #0]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	6892      	ldr	r2, [r2, #8]
 80039da:	430a      	orrs	r2, r1
 80039dc:	431a      	orrs	r2, r3
 80039de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039e2:	e047      	b.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f8:	d004      	beq.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a23      	ldr	r2, [pc, #140]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10f      	bne.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003a04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a08:	f7ff f9de 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	481f      	ldr	r0, [pc, #124]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a10:	f7ff f9da 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4323      	orrs	r3, r4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e012      	b.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a24:	481a      	ldr	r0, [pc, #104]	@ (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a26:	f7ff f9cf 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4819      	ldr	r0, [pc, #100]	@ (8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a2e:	f7ff f9cb 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003a32:	4603      	mov	r3, r0
 8003a34:	431c      	orrs	r4, r3
 8003a36:	481a      	ldr	r0, [pc, #104]	@ (8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a38:	f7ff f9c6 	bl	8002dc8 <LL_ADC_IsEnabled>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4323      	orrs	r3, r4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d012      	beq.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a56:	f023 030f 	bic.w	r3, r3, #15
 8003a5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a5c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5e:	e009      	b.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003a72:	e000      	b.n	8003a76 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3784      	adds	r7, #132	@ 0x84
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd90      	pop	{r4, r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	50000100 	.word	0x50000100
 8003a90:	50000400 	.word	0x50000400
 8003a94:	50000500 	.word	0x50000500
 8003a98:	50000300 	.word	0x50000300
 8003a9c:	50000700 	.word	0x50000700
 8003aa0:	50000600 	.word	0x50000600

08003aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ad6:	4a04      	ldr	r2, [pc, #16]	@ (8003ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	60d3      	str	r3, [r2, #12]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003af0:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <__NVIC_GetPriorityGrouping+0x18>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	f003 0307 	and.w	r3, r3, #7
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	db0b      	blt.n	8003b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	f003 021f 	and.w	r2, r3, #31
 8003b20:	4907      	ldr	r1, [pc, #28]	@ (8003b40 <__NVIC_EnableIRQ+0x38>)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2001      	movs	r0, #1
 8003b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000e100 	.word	0xe000e100

08003b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	6039      	str	r1, [r7, #0]
 8003b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	db0a      	blt.n	8003b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	490c      	ldr	r1, [pc, #48]	@ (8003b90 <__NVIC_SetPriority+0x4c>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	0112      	lsls	r2, r2, #4
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	440b      	add	r3, r1
 8003b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b6c:	e00a      	b.n	8003b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4908      	ldr	r1, [pc, #32]	@ (8003b94 <__NVIC_SetPriority+0x50>)
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	3b04      	subs	r3, #4
 8003b7c:	0112      	lsls	r2, r2, #4
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	440b      	add	r3, r1
 8003b82:	761a      	strb	r2, [r3, #24]
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000e100 	.word	0xe000e100
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	@ 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f1c3 0307 	rsb	r3, r3, #7
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	bf28      	it	cs
 8003bb6:	2304      	movcs	r3, #4
 8003bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	2b06      	cmp	r3, #6
 8003bc0:	d902      	bls.n	8003bc8 <NVIC_EncodePriority+0x30>
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3b03      	subs	r3, #3
 8003bc6:	e000      	b.n	8003bca <NVIC_EncodePriority+0x32>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43da      	mvns	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	401a      	ands	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be0:	f04f 31ff 	mov.w	r1, #4294967295
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bea:	43d9      	mvns	r1, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf0:	4313      	orrs	r3, r2
         );
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3724      	adds	r7, #36	@ 0x24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c10:	d301      	bcc.n	8003c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c12:	2301      	movs	r3, #1
 8003c14:	e00f      	b.n	8003c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c16:	4a0a      	ldr	r2, [pc, #40]	@ (8003c40 <SysTick_Config+0x40>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c1e:	210f      	movs	r1, #15
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	f7ff ff8e 	bl	8003b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c28:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <SysTick_Config+0x40>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c2e:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <SysTick_Config+0x40>)
 8003c30:	2207      	movs	r2, #7
 8003c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	e000e010 	.word	0xe000e010

08003c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff29 	bl	8003aa4 <__NVIC_SetPriorityGrouping>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	4603      	mov	r3, r0
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c68:	f7ff ff40 	bl	8003aec <__NVIC_GetPriorityGrouping>
 8003c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	6978      	ldr	r0, [r7, #20]
 8003c74:	f7ff ff90 	bl	8003b98 <NVIC_EncodePriority>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff5f 	bl	8003b44 <__NVIC_SetPriority>
}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff33 	bl	8003b08 <__NVIC_EnableIRQ>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ffa4 	bl	8003c00 <SysTick_Config>
 8003cb8:	4603      	mov	r3, r0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e147      	b.n	8003f66 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd f87e 	bl	8000dec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0210 	bic.w	r2, r2, #16
 8003cfe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d00:	f7fd faf4 	bl	80012ec <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d06:	e012      	b.n	8003d2e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d08:	f7fd faf0 	bl	80012ec <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b0a      	cmp	r3, #10
 8003d14:	d90b      	bls.n	8003d2e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1a:	f043 0201 	orr.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2203      	movs	r2, #3
 8003d26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e11b      	b.n	8003f66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d0e5      	beq.n	8003d08 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d4c:	f7fd face 	bl	80012ec <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d52:	e012      	b.n	8003d7a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d54:	f7fd faca 	bl	80012ec <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b0a      	cmp	r3, #10
 8003d60:	d90b      	bls.n	8003d7a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2203      	movs	r2, #3
 8003d72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0f5      	b.n	8003f66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0e5      	beq.n	8003d54 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0202 	orr.w	r2, r2, #2
 8003d96:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a74      	ldr	r2, [pc, #464]	@ (8003f70 <HAL_FDCAN_Init+0x2ac>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d103      	bne.n	8003daa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003da2:	4a74      	ldr	r2, [pc, #464]	@ (8003f74 <HAL_FDCAN_Init+0x2b0>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7c1b      	ldrb	r3, [r3, #16]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d108      	bne.n	8003dc4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dc0:	619a      	str	r2, [r3, #24]
 8003dc2:	e007      	b.n	8003dd4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dd2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	7c5b      	ldrb	r3, [r3, #17]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d108      	bne.n	8003dee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dea:	619a      	str	r2, [r3, #24]
 8003dec:	e007      	b.n	8003dfe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dfc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	7c9b      	ldrb	r3, [r3, #18]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d108      	bne.n	8003e18 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e14:	619a      	str	r2, [r3, #24]
 8003e16:	e007      	b.n	8003e28 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e26:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003e4c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0210 	bic.w	r2, r2, #16
 8003e5c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d108      	bne.n	8003e78 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0204 	orr.w	r2, r2, #4
 8003e74:	619a      	str	r2, [r3, #24]
 8003e76:	e02c      	b.n	8003ed2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d028      	beq.n	8003ed2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d01c      	beq.n	8003ec2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e96:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0210 	orr.w	r2, r2, #16
 8003ea6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d110      	bne.n	8003ed2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0220 	orr.w	r2, r2, #32
 8003ebe:	619a      	str	r2, [r3, #24]
 8003ec0:	e007      	b.n	8003ed2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0220 	orr.w	r2, r2, #32
 8003ed0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ee2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003eea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003efa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003efc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f06:	d115      	bne.n	8003f34 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	3b01      	subs	r3, #1
 8003f14:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f16:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f20:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f30:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f32:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f814 	bl	8003f78 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40006400 	.word	0x40006400
 8003f74:	40006500 	.word	0x40006500

08003f78 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003f80:	4b30      	ldr	r3, [pc, #192]	@ (8004044 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003f82:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a2f      	ldr	r2, [pc, #188]	@ (8004048 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d103      	bne.n	8003f96 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003f94:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800404c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8003fa6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fb6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbe:	041a      	lsls	r2, r3, #16
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fdc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	061a      	lsls	r2, r3, #24
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e005      	b.n	800402a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3304      	adds	r3, #4
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	429a      	cmp	r2, r3
 8004034:	d3f3      	bcc.n	800401e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	4000a400 	.word	0x4000a400
 8004048:	40006800 	.word	0x40006800
 800404c:	40006c00 	.word	0x40006c00

08004050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800405e:	e15a      	b.n	8004316 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2101      	movs	r1, #1
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 814c 	beq.w	8004310 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d005      	beq.n	8004090 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800408c:	2b02      	cmp	r3, #2
 800408e:	d130      	bne.n	80040f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040c6:	2201      	movs	r2, #1
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 0201 	and.w	r2, r3, #1
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d017      	beq.n	800412e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	2203      	movs	r2, #3
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d123      	bne.n	8004182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	08da      	lsrs	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3208      	adds	r2, #8
 8004142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4013      	ands	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	08da      	lsrs	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3208      	adds	r2, #8
 800417c:	6939      	ldr	r1, [r7, #16]
 800417e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	2203      	movs	r2, #3
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4013      	ands	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0203 	and.w	r2, r3, #3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80a6 	beq.w	8004310 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004334 <HAL_GPIO_Init+0x2e4>)
 80041c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004334 <HAL_GPIO_Init+0x2e4>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80041d0:	4b58      	ldr	r3, [pc, #352]	@ (8004334 <HAL_GPIO_Init+0x2e4>)
 80041d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041dc:	4a56      	ldr	r2, [pc, #344]	@ (8004338 <HAL_GPIO_Init+0x2e8>)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	089b      	lsrs	r3, r3, #2
 80041e2:	3302      	adds	r3, #2
 80041e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	220f      	movs	r2, #15
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	43db      	mvns	r3, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004206:	d01f      	beq.n	8004248 <HAL_GPIO_Init+0x1f8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a4c      	ldr	r2, [pc, #304]	@ (800433c <HAL_GPIO_Init+0x2ec>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d019      	beq.n	8004244 <HAL_GPIO_Init+0x1f4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a4b      	ldr	r2, [pc, #300]	@ (8004340 <HAL_GPIO_Init+0x2f0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <HAL_GPIO_Init+0x1f0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a4a      	ldr	r2, [pc, #296]	@ (8004344 <HAL_GPIO_Init+0x2f4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00d      	beq.n	800423c <HAL_GPIO_Init+0x1ec>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a49      	ldr	r2, [pc, #292]	@ (8004348 <HAL_GPIO_Init+0x2f8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <HAL_GPIO_Init+0x1e8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a48      	ldr	r2, [pc, #288]	@ (800434c <HAL_GPIO_Init+0x2fc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_GPIO_Init+0x1e4>
 8004230:	2305      	movs	r3, #5
 8004232:	e00a      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004234:	2306      	movs	r3, #6
 8004236:	e008      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004238:	2304      	movs	r3, #4
 800423a:	e006      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 800423c:	2303      	movs	r3, #3
 800423e:	e004      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004240:	2302      	movs	r3, #2
 8004242:	e002      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_GPIO_Init+0x1fa>
 8004248:	2300      	movs	r3, #0
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	f002 0203 	and.w	r2, r2, #3
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	4093      	lsls	r3, r2
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800425a:	4937      	ldr	r1, [pc, #220]	@ (8004338 <HAL_GPIO_Init+0x2e8>)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	3302      	adds	r3, #2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004268:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <HAL_GPIO_Init+0x300>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	43db      	mvns	r3, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800428c:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <HAL_GPIO_Init+0x300>)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004292:	4b2f      	ldr	r3, [pc, #188]	@ (8004350 <HAL_GPIO_Init+0x300>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	43db      	mvns	r3, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042b6:	4a26      	ldr	r2, [pc, #152]	@ (8004350 <HAL_GPIO_Init+0x300>)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80042bc:	4b24      	ldr	r3, [pc, #144]	@ (8004350 <HAL_GPIO_Init+0x300>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4013      	ands	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HAL_GPIO_Init+0x300>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <HAL_GPIO_Init+0x300>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4013      	ands	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800430a:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <HAL_GPIO_Init+0x300>)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3301      	adds	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f ae9d 	bne.w	8004060 <HAL_GPIO_Init+0x10>
  }
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40021000 	.word	0x40021000
 8004338:	40010000 	.word	0x40010000
 800433c:	48000400 	.word	0x48000400
 8004340:	48000800 	.word	0x48000800
 8004344:	48000c00 	.word	0x48000c00
 8004348:	48001000 	.word	0x48001000
 800434c:	48001400 	.word	0x48001400
 8004350:	40010400 	.word	0x40010400

08004354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	807b      	strh	r3, [r7, #2]
 8004360:	4613      	mov	r3, r2
 8004362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004364:	787b      	ldrb	r3, [r7, #1]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004370:	e002      	b.n	8004378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d141      	bne.n	8004416 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004392:	4b4b      	ldr	r3, [pc, #300]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439e:	d131      	bne.n	8004404 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a0:	4b47      	ldr	r3, [pc, #284]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a6:	4a46      	ldr	r2, [pc, #280]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b0:	4b43      	ldr	r3, [pc, #268]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043b8:	4a41      	ldr	r2, [pc, #260]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043c0:	4b40      	ldr	r3, [pc, #256]	@ (80044c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2232      	movs	r2, #50	@ 0x32
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	4a3f      	ldr	r2, [pc, #252]	@ (80044c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	0c9b      	lsrs	r3, r3, #18
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d6:	e002      	b.n	80043de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3b01      	subs	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043de:	4b38      	ldr	r3, [pc, #224]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ea:	d102      	bne.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f2      	bne.n	80043d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043f2:	4b33      	ldr	r3, [pc, #204]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fe:	d158      	bne.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e057      	b.n	80044b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004404:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800440a:	4a2d      	ldr	r2, [pc, #180]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004410:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004414:	e04d      	b.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800441c:	d141      	bne.n	80044a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800441e:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442a:	d131      	bne.n	8004490 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800442c:	4b24      	ldr	r3, [pc, #144]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004432:	4a23      	ldr	r2, [pc, #140]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800443c:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004444:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800444a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800444c:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2232      	movs	r2, #50	@ 0x32
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	4a1c      	ldr	r2, [pc, #112]	@ (80044c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	0c9b      	lsrs	r3, r3, #18
 800445e:	3301      	adds	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004462:	e002      	b.n	800446a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3b01      	subs	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800446a:	4b15      	ldr	r3, [pc, #84]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004476:	d102      	bne.n	800447e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f2      	bne.n	8004464 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800447e:	4b10      	ldr	r3, [pc, #64]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448a:	d112      	bne.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e011      	b.n	80044b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004496:	4a0a      	ldr	r2, [pc, #40]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044a0:	e007      	b.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044a2:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044aa:	4a05      	ldr	r2, [pc, #20]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40007000 	.word	0x40007000
 80044c4:	20000000 	.word	0x20000000
 80044c8:	431bde83 	.word	0x431bde83

080044cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80044d0:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4a04      	ldr	r2, [pc, #16]	@ (80044e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80044d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044da:	6093      	str	r3, [r2, #8]
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40007000 	.word	0x40007000

080044ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e2fe      	b.n	8004afc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d075      	beq.n	80045f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450a:	4b97      	ldr	r3, [pc, #604]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004514:	4b94      	ldr	r3, [pc, #592]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d102      	bne.n	800452a <HAL_RCC_OscConfig+0x3e>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d002      	beq.n	8004530 <HAL_RCC_OscConfig+0x44>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d10b      	bne.n	8004548 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004530:	4b8d      	ldr	r3, [pc, #564]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d05b      	beq.n	80045f4 <HAL_RCC_OscConfig+0x108>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d157      	bne.n	80045f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e2d9      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004550:	d106      	bne.n	8004560 <HAL_RCC_OscConfig+0x74>
 8004552:	4b85      	ldr	r3, [pc, #532]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a84      	ldr	r2, [pc, #528]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e01d      	b.n	800459c <HAL_RCC_OscConfig+0xb0>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0x98>
 800456a:	4b7f      	ldr	r3, [pc, #508]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a7e      	ldr	r2, [pc, #504]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b7c      	ldr	r3, [pc, #496]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a7b      	ldr	r2, [pc, #492]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e00b      	b.n	800459c <HAL_RCC_OscConfig+0xb0>
 8004584:	4b78      	ldr	r3, [pc, #480]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a77      	ldr	r2, [pc, #476]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 800458a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b75      	ldr	r3, [pc, #468]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a74      	ldr	r2, [pc, #464]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800459a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d013      	beq.n	80045cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fc fea2 	bl	80012ec <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ac:	f7fc fe9e 	bl	80012ec <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	@ 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e29e      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045be:	4b6a      	ldr	r3, [pc, #424]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0xc0>
 80045ca:	e014      	b.n	80045f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fc fe8e 	bl	80012ec <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fc fe8a 	bl	80012ec <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	@ 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e28a      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045e6:	4b60      	ldr	r3, [pc, #384]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0xe8>
 80045f2:	e000      	b.n	80045f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d075      	beq.n	80046ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004602:	4b59      	ldr	r3, [pc, #356]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800460c:	4b56      	ldr	r3, [pc, #344]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d102      	bne.n	8004622 <HAL_RCC_OscConfig+0x136>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d002      	beq.n	8004628 <HAL_RCC_OscConfig+0x13c>
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d11f      	bne.n	8004668 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004628:	4b4f      	ldr	r3, [pc, #316]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_OscConfig+0x154>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e25d      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004640:	4b49      	ldr	r3, [pc, #292]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	061b      	lsls	r3, r3, #24
 800464e:	4946      	ldr	r1, [pc, #280]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004650:	4313      	orrs	r3, r2
 8004652:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004654:	4b45      	ldr	r3, [pc, #276]	@ (800476c <HAL_RCC_OscConfig+0x280>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f7fc fdfb 	bl	8001254 <HAL_InitTick>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d043      	beq.n	80046ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e249      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d023      	beq.n	80046b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004670:	4b3d      	ldr	r3, [pc, #244]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a3c      	ldr	r2, [pc, #240]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800467a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fc fe36 	bl	80012ec <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004684:	f7fc fe32 	bl	80012ec <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e232      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004696:	4b34      	ldr	r3, [pc, #208]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a2:	4b31      	ldr	r3, [pc, #196]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	492d      	ldr	r1, [pc, #180]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
 80046b6:	e01a      	b.n	80046ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 80046be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fc fe12 	bl	80012ec <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046cc:	f7fc fe0e 	bl	80012ec <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e20e      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046de:	4b22      	ldr	r3, [pc, #136]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x1e0>
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d041      	beq.n	800477e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01c      	beq.n	800473c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004702:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004708:	4a17      	ldr	r2, [pc, #92]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004712:	f7fc fdeb 	bl	80012ec <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471a:	f7fc fde7 	bl	80012ec <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e1e7      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800472c:	4b0e      	ldr	r3, [pc, #56]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 800472e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ef      	beq.n	800471a <HAL_RCC_OscConfig+0x22e>
 800473a:	e020      	b.n	800477e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800473c:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004742:	4a09      	ldr	r2, [pc, #36]	@ (8004768 <HAL_RCC_OscConfig+0x27c>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fc fdce 	bl	80012ec <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004752:	e00d      	b.n	8004770 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004754:	f7fc fdca 	bl	80012ec <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d906      	bls.n	8004770 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1ca      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004770:	4b8c      	ldr	r3, [pc, #560]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ea      	bne.n	8004754 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80a6 	beq.w	80048d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478c:	2300      	movs	r3, #0
 800478e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004790:	4b84      	ldr	r3, [pc, #528]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_OscConfig+0x2b4>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x2b6>
 80047a0:	2300      	movs	r3, #0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00d      	beq.n	80047c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	4b7f      	ldr	r3, [pc, #508]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	4a7e      	ldr	r2, [pc, #504]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80047b2:	4b7c      	ldr	r3, [pc, #496]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 80047b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047be:	2301      	movs	r3, #1
 80047c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c2:	4b79      	ldr	r3, [pc, #484]	@ (80049a8 <HAL_RCC_OscConfig+0x4bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d118      	bne.n	8004800 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ce:	4b76      	ldr	r3, [pc, #472]	@ (80049a8 <HAL_RCC_OscConfig+0x4bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a75      	ldr	r2, [pc, #468]	@ (80049a8 <HAL_RCC_OscConfig+0x4bc>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047da:	f7fc fd87 	bl	80012ec <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7fc fd83 	bl	80012ec <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e183      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f4:	4b6c      	ldr	r3, [pc, #432]	@ (80049a8 <HAL_RCC_OscConfig+0x4bc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d108      	bne.n	800481a <HAL_RCC_OscConfig+0x32e>
 8004808:	4b66      	ldr	r3, [pc, #408]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	4a65      	ldr	r2, [pc, #404]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004818:	e024      	b.n	8004864 <HAL_RCC_OscConfig+0x378>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b05      	cmp	r3, #5
 8004820:	d110      	bne.n	8004844 <HAL_RCC_OscConfig+0x358>
 8004822:	4b60      	ldr	r3, [pc, #384]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	4a5e      	ldr	r2, [pc, #376]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 800482a:	f043 0304 	orr.w	r3, r3, #4
 800482e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004832:	4b5c      	ldr	r3, [pc, #368]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004838:	4a5a      	ldr	r2, [pc, #360]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004842:	e00f      	b.n	8004864 <HAL_RCC_OscConfig+0x378>
 8004844:	4b57      	ldr	r3, [pc, #348]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484a:	4a56      	ldr	r2, [pc, #344]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004854:	4b53      	ldr	r3, [pc, #332]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485a:	4a52      	ldr	r2, [pc, #328]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d016      	beq.n	800489a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fc fd3e 	bl	80012ec <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fc fd3a 	bl	80012ec <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e138      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488a:	4b46      	ldr	r3, [pc, #280]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ed      	beq.n	8004874 <HAL_RCC_OscConfig+0x388>
 8004898:	e015      	b.n	80048c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fc fd27 	bl	80012ec <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048a0:	e00a      	b.n	80048b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fc fd23 	bl	80012ec <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e121      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b8:	4b3a      	ldr	r3, [pc, #232]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ed      	bne.n	80048a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048c6:	7ffb      	ldrb	r3, [r7, #31]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048cc:	4b35      	ldr	r3, [pc, #212]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d0:	4a34      	ldr	r2, [pc, #208]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 80048d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03c      	beq.n	800495e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01c      	beq.n	8004926 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048ec:	4b2d      	ldr	r3, [pc, #180]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 80048ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048f2:	4a2c      	ldr	r2, [pc, #176]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7fc fcf6 	bl	80012ec <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004904:	f7fc fcf2 	bl	80012ec <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e0f2      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004918:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ef      	beq.n	8004904 <HAL_RCC_OscConfig+0x418>
 8004924:	e01b      	b.n	800495e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004926:	4b1f      	ldr	r3, [pc, #124]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004928:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800492c:	4a1d      	ldr	r2, [pc, #116]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004936:	f7fc fcd9 	bl	80012ec <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800493e:	f7fc fcd5 	bl	80012ec <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e0d5      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004950:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004952:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1ef      	bne.n	800493e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80c9 	beq.w	8004afa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004968:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b0c      	cmp	r3, #12
 8004972:	f000 8083 	beq.w	8004a7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d15e      	bne.n	8004a3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497e:	4b09      	ldr	r3, [pc, #36]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a08      	ldr	r2, [pc, #32]	@ (80049a4 <HAL_RCC_OscConfig+0x4b8>)
 8004984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498a:	f7fc fcaf 	bl	80012ec <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004990:	e00c      	b.n	80049ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004992:	f7fc fcab 	bl	80012ec <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d905      	bls.n	80049ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0ab      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ac:	4b55      	ldr	r3, [pc, #340]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1ec      	bne.n	8004992 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b8:	4b52      	ldr	r3, [pc, #328]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	4b52      	ldr	r3, [pc, #328]	@ (8004b08 <HAL_RCC_OscConfig+0x61c>)
 80049be:	4013      	ands	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6a11      	ldr	r1, [r2, #32]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049c8:	3a01      	subs	r2, #1
 80049ca:	0112      	lsls	r2, r2, #4
 80049cc:	4311      	orrs	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049d2:	0212      	lsls	r2, r2, #8
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049da:	0852      	lsrs	r2, r2, #1
 80049dc:	3a01      	subs	r2, #1
 80049de:	0552      	lsls	r2, r2, #21
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049e6:	0852      	lsrs	r2, r2, #1
 80049e8:	3a01      	subs	r2, #1
 80049ea:	0652      	lsls	r2, r2, #25
 80049ec:	4311      	orrs	r1, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049f2:	06d2      	lsls	r2, r2, #27
 80049f4:	430a      	orrs	r2, r1
 80049f6:	4943      	ldr	r1, [pc, #268]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fc:	4b41      	ldr	r3, [pc, #260]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a08:	4b3e      	ldr	r3, [pc, #248]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fc fc6a 	bl	80012ec <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fc fc66 	bl	80012ec <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e066      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	4b35      	ldr	r3, [pc, #212]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x530>
 8004a3a:	e05e      	b.n	8004afa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3c:	4b31      	ldr	r3, [pc, #196]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a30      	ldr	r2, [pc, #192]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fc fc50 	bl	80012ec <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fc fc4c 	bl	80012ec <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e04c      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a62:	4b28      	ldr	r3, [pc, #160]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004a6e:	4b25      	ldr	r3, [pc, #148]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	4924      	ldr	r1, [pc, #144]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a74:	4b25      	ldr	r3, [pc, #148]	@ (8004b0c <HAL_RCC_OscConfig+0x620>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	60cb      	str	r3, [r1, #12]
 8004a7a:	e03e      	b.n	8004afa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e039      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a88:	4b1e      	ldr	r3, [pc, #120]	@ (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d12c      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d123      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d11b      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d113      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad8:	085b      	lsrs	r3, r3, #1
 8004ada:	3b01      	subs	r3, #1
 8004adc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	3b01      	subs	r3, #1
 8004af0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d001      	beq.n	8004afa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000
 8004b08:	019f800c 	.word	0x019f800c
 8004b0c:	feeefffc 	.word	0xfeeefffc

08004b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e11e      	b.n	8004d66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b91      	ldr	r3, [pc, #580]	@ (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d910      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b8e      	ldr	r3, [pc, #568]	@ (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 020f 	bic.w	r2, r3, #15
 8004b3e:	498c      	ldr	r1, [pc, #560]	@ (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b8a      	ldr	r3, [pc, #552]	@ (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e106      	b.n	8004d66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d073      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d129      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b6c:	4b81      	ldr	r3, [pc, #516]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0f4      	b.n	8004d66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b7c:	f000 f99e 	bl	8004ebc <RCC_GetSysClockFreqFromPLLSource>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4a7c      	ldr	r2, [pc, #496]	@ (8004d78 <HAL_RCC_ClockConfig+0x268>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d93f      	bls.n	8004c0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d033      	beq.n	8004c0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d12f      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004baa:	4b72      	ldr	r3, [pc, #456]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bb2:	4a70      	ldr	r2, [pc, #448]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bba:	2380      	movs	r3, #128	@ 0x80
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e024      	b.n	8004c0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0c6      	b.n	8004d66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd8:	4b66      	ldr	r3, [pc, #408]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0be      	b.n	8004d66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004be8:	f000 f8ce 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4a61      	ldr	r2, [pc, #388]	@ (8004d78 <HAL_RCC_ClockConfig+0x268>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d909      	bls.n	8004c0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c0a:	4b5a      	ldr	r3, [pc, #360]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 0203 	bic.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	4957      	ldr	r1, [pc, #348]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1c:	f7fc fb66 	bl	80012ec <HAL_GetTick>
 8004c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	e00a      	b.n	8004c3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c24:	f7fc fb62 	bl	80012ec <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e095      	b.n	8004d66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	4b4e      	ldr	r3, [pc, #312]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 020c 	and.w	r2, r3, #12
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d1eb      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d023      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c64:	4b43      	ldr	r3, [pc, #268]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a42      	ldr	r2, [pc, #264]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c84:	4a3b      	ldr	r2, [pc, #236]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c8c:	4b39      	ldr	r3, [pc, #228]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4936      	ldr	r1, [pc, #216]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b80      	cmp	r3, #128	@ 0x80
 8004ca4:	d105      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ca6:	4b33      	ldr	r3, [pc, #204]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	4a32      	ldr	r2, [pc, #200]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004cac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cb0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d21d      	bcs.n	8004cfc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f023 020f 	bic.w	r2, r3, #15
 8004cc8:	4929      	ldr	r1, [pc, #164]	@ (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004cd0:	f7fc fb0c 	bl	80012ec <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	e00a      	b.n	8004cee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd8:	f7fc fb08 	bl	80012ec <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e03b      	b.n	8004d66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	4b20      	ldr	r3, [pc, #128]	@ (8004d70 <HAL_RCC_ClockConfig+0x260>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d1ed      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d08:	4b1a      	ldr	r3, [pc, #104]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4917      	ldr	r1, [pc, #92]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d26:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	490f      	ldr	r1, [pc, #60]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d3a:	f000 f825 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	4b0c      	ldr	r3, [pc, #48]	@ (8004d74 <HAL_RCC_ClockConfig+0x264>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	490c      	ldr	r1, [pc, #48]	@ (8004d7c <HAL_RCC_ClockConfig+0x26c>)
 8004d4c:	5ccb      	ldrb	r3, [r1, r3]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	fa22 f303 	lsr.w	r3, r2, r3
 8004d56:	4a0a      	ldr	r2, [pc, #40]	@ (8004d80 <HAL_RCC_ClockConfig+0x270>)
 8004d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <HAL_RCC_ClockConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fc fa78 	bl	8001254 <HAL_InitTick>
 8004d64:	4603      	mov	r3, r0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40022000 	.word	0x40022000
 8004d74:	40021000 	.word	0x40021000
 8004d78:	04c4b400 	.word	0x04c4b400
 8004d7c:	08007668 	.word	0x08007668
 8004d80:	20000000 	.word	0x20000000
 8004d84:	20000004 	.word	0x20000004

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d102      	bne.n	8004da0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	e047      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004da0:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d102      	bne.n	8004db2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dac:	4b26      	ldr	r3, [pc, #152]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	e03e      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004db2:	4b23      	ldr	r3, [pc, #140]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d136      	bne.n	8004e2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dbe:	4b20      	ldr	r3, [pc, #128]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d10c      	bne.n	8004df6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	4a16      	ldr	r2, [pc, #88]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de6:	68d2      	ldr	r2, [r2, #12]
 8004de8:	0a12      	lsrs	r2, r2, #8
 8004dea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	617b      	str	r3, [r7, #20]
      break;
 8004df4:	e00c      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df6:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	4a10      	ldr	r2, [pc, #64]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e00:	68d2      	ldr	r2, [r2, #12]
 8004e02:	0a12      	lsrs	r2, r2, #8
 8004e04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]
      break;
 8004e0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	0e5b      	lsrs	r3, r3, #25
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	e001      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e30:	693b      	ldr	r3, [r7, #16]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000
 8004e44:	00f42400 	.word	0x00f42400
 8004e48:	007a1200 	.word	0x007a1200

08004e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e50:	4b03      	ldr	r3, [pc, #12]	@ (8004e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	20000000 	.word	0x20000000

08004e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e68:	f7ff fff0 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4b06      	ldr	r3, [pc, #24]	@ (8004e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	0a1b      	lsrs	r3, r3, #8
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	4904      	ldr	r1, [pc, #16]	@ (8004e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e7a:	5ccb      	ldrb	r3, [r1, r3]
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	08007678 	.word	0x08007678

08004e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e94:	f7ff ffda 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0adb      	lsrs	r3, r3, #11
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4904      	ldr	r1, [pc, #16]	@ (8004eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	08007678 	.word	0x08007678

08004ebc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d10c      	bne.n	8004efa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ee0:	4a17      	ldr	r2, [pc, #92]	@ (8004f40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	4a14      	ldr	r2, [pc, #80]	@ (8004f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004eea:	68d2      	ldr	r2, [r2, #12]
 8004eec:	0a12      	lsrs	r2, r2, #8
 8004eee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	617b      	str	r3, [r7, #20]
    break;
 8004ef8:	e00c      	b.n	8004f14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004efa:	4a12      	ldr	r2, [pc, #72]	@ (8004f44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	4a0e      	ldr	r2, [pc, #56]	@ (8004f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f04:	68d2      	ldr	r2, [r2, #12]
 8004f06:	0a12      	lsrs	r2, r2, #8
 8004f08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f0c:	fb02 f303 	mul.w	r3, r2, r3
 8004f10:	617b      	str	r3, [r7, #20]
    break;
 8004f12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f14:	4b09      	ldr	r3, [pc, #36]	@ (8004f3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0e5b      	lsrs	r3, r3, #25
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f2e:	687b      	ldr	r3, [r7, #4]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	007a1200 	.word	0x007a1200
 8004f44:	00f42400 	.word	0x00f42400

08004f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f50:	2300      	movs	r3, #0
 8004f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f54:	2300      	movs	r3, #0
 8004f56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8098 	beq.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f66:	2300      	movs	r3, #0
 8004f68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f6a:	4b43      	ldr	r3, [pc, #268]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f76:	4b40      	ldr	r3, [pc, #256]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	4a3f      	ldr	r2, [pc, #252]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f82:	4b3d      	ldr	r3, [pc, #244]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f92:	4b3a      	ldr	r3, [pc, #232]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a39      	ldr	r2, [pc, #228]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f9e:	f7fc f9a5 	bl	80012ec <HAL_GetTick>
 8004fa2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa4:	e009      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa6:	f7fc f9a1 	bl	80012ec <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d902      	bls.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	74fb      	strb	r3, [r7, #19]
        break;
 8004fb8:	e005      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fba:	4b30      	ldr	r3, [pc, #192]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0ef      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d159      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01e      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d019      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fe8:	4b23      	ldr	r3, [pc, #140]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ff4:	4b20      	ldr	r3, [pc, #128]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005004:	4b1c      	ldr	r3, [pc, #112]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500a:	4a1b      	ldr	r2, [pc, #108]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005014:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d016      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fc f961 	bl	80012ec <HAL_GetTick>
 800502a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502c:	e00b      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fc f95d 	bl	80012ec <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d902      	bls.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	74fb      	strb	r3, [r7, #19]
            break;
 8005044:	e006      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005046:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ec      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005054:	7cfb      	ldrb	r3, [r7, #19]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800505a:	4b07      	ldr	r3, [pc, #28]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005060:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005068:	4903      	ldr	r1, [pc, #12]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005070:	e008      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005072:	7cfb      	ldrb	r3, [r7, #19]
 8005074:	74bb      	strb	r3, [r7, #18]
 8005076:	e005      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005078:	40021000 	.word	0x40021000
 800507c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	7cfb      	ldrb	r3, [r7, #19]
 8005082:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005084:	7c7b      	ldrb	r3, [r7, #17]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d105      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800508a:	4ba7      	ldr	r3, [pc, #668]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508e:	4aa6      	ldr	r2, [pc, #664]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005094:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050a2:	4ba1      	ldr	r3, [pc, #644]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a8:	f023 0203 	bic.w	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	499d      	ldr	r1, [pc, #628]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050c4:	4b98      	ldr	r3, [pc, #608]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ca:	f023 020c 	bic.w	r2, r3, #12
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	4995      	ldr	r1, [pc, #596]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050e6:	4b90      	ldr	r3, [pc, #576]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	498c      	ldr	r1, [pc, #560]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005108:	4b87      	ldr	r3, [pc, #540]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	4984      	ldr	r1, [pc, #528]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800512a:	4b7f      	ldr	r3, [pc, #508]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	497b      	ldr	r1, [pc, #492]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800514c:	4b76      	ldr	r3, [pc, #472]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005152:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	4973      	ldr	r1, [pc, #460]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800516e:	4b6e      	ldr	r3, [pc, #440]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005174:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	496a      	ldr	r1, [pc, #424]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005190:	4b65      	ldr	r3, [pc, #404]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	4962      	ldr	r1, [pc, #392]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	4959      	ldr	r1, [pc, #356]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051d4:	4b54      	ldr	r3, [pc, #336]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051da:	f023 0203 	bic.w	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e2:	4951      	ldr	r1, [pc, #324]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	4948      	ldr	r1, [pc, #288]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d015      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005218:	4b43      	ldr	r3, [pc, #268]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	4940      	ldr	r1, [pc, #256]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005236:	d105      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005238:	4b3b      	ldr	r3, [pc, #236]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4a3a      	ldr	r2, [pc, #232]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005242:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005250:	4b35      	ldr	r3, [pc, #212]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525e:	4932      	ldr	r1, [pc, #200]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800526e:	d105      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005270:	4b2d      	ldr	r3, [pc, #180]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a2c      	ldr	r2, [pc, #176]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800527a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d015      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005288:	4b27      	ldr	r3, [pc, #156]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005296:	4924      	ldr	r1, [pc, #144]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052a6:	d105      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052c0:	4b19      	ldr	r3, [pc, #100]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ce:	4916      	ldr	r1, [pc, #88]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052de:	d105      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e0:	4b11      	ldr	r3, [pc, #68]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a10      	ldr	r2, [pc, #64]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d019      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	4908      	ldr	r1, [pc, #32]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005312:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005316:	d109      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005318:	4b03      	ldr	r3, [pc, #12]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a02      	ldr	r2, [pc, #8]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800531e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005322:	60d3      	str	r3, [r2, #12]
 8005324:	e002      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d015      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005338:	4b29      	ldr	r3, [pc, #164]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	4926      	ldr	r1, [pc, #152]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005356:	d105      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005358:	4b21      	ldr	r3, [pc, #132]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a20      	ldr	r2, [pc, #128]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800535e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005362:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d015      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005370:	4b1b      	ldr	r3, [pc, #108]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005376:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537e:	4918      	ldr	r1, [pc, #96]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538e:	d105      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005390:	4b13      	ldr	r3, [pc, #76]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4a12      	ldr	r2, [pc, #72]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800539a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d015      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053a8:	4b0d      	ldr	r3, [pc, #52]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053b6:	490a      	ldr	r1, [pc, #40]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053c6:	d105      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c8:	4b05      	ldr	r3, [pc, #20]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a04      	ldr	r2, [pc, #16]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40021000 	.word	0x40021000

080053e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e049      	b.n	800548a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f841 	bl	8005492 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 fcfc 	bl	8005e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <HAL_TIM_OC_Start_IT+0x28>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	e03c      	b.n	800554a <HAL_TIM_OC_Start_IT+0xa2>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d109      	bne.n	80054ea <HAL_TIM_OC_Start_IT+0x42>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b01      	cmp	r3, #1
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	e02f      	b.n	800554a <HAL_TIM_OC_Start_IT+0xa2>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d109      	bne.n	8005504 <HAL_TIM_OC_Start_IT+0x5c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e022      	b.n	800554a <HAL_TIM_OC_Start_IT+0xa2>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b0c      	cmp	r3, #12
 8005508:	d109      	bne.n	800551e <HAL_TIM_OC_Start_IT+0x76>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	bf14      	ite	ne
 8005516:	2301      	movne	r3, #1
 8005518:	2300      	moveq	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e015      	b.n	800554a <HAL_TIM_OC_Start_IT+0xa2>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b10      	cmp	r3, #16
 8005522:	d109      	bne.n	8005538 <HAL_TIM_OC_Start_IT+0x90>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	e008      	b.n	800554a <HAL_TIM_OC_Start_IT+0xa2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	bf14      	ite	ne
 8005544:	2301      	movne	r3, #1
 8005546:	2300      	moveq	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e0f1      	b.n	8005736 <HAL_TIM_OC_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <HAL_TIM_OC_Start_IT+0xba>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005560:	e023      	b.n	80055aa <HAL_TIM_OC_Start_IT+0x102>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d104      	bne.n	8005572 <HAL_TIM_OC_Start_IT+0xca>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005570:	e01b      	b.n	80055aa <HAL_TIM_OC_Start_IT+0x102>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d104      	bne.n	8005582 <HAL_TIM_OC_Start_IT+0xda>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005580:	e013      	b.n	80055aa <HAL_TIM_OC_Start_IT+0x102>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b0c      	cmp	r3, #12
 8005586:	d104      	bne.n	8005592 <HAL_TIM_OC_Start_IT+0xea>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005590:	e00b      	b.n	80055aa <HAL_TIM_OC_Start_IT+0x102>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b10      	cmp	r3, #16
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_OC_Start_IT+0xfa>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a0:	e003      	b.n	80055aa <HAL_TIM_OC_Start_IT+0x102>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b0c      	cmp	r3, #12
 80055ae:	d841      	bhi.n	8005634 <HAL_TIM_OC_Start_IT+0x18c>
 80055b0:	a201      	add	r2, pc, #4	@ (adr r2, 80055b8 <HAL_TIM_OC_Start_IT+0x110>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055ed 	.word	0x080055ed
 80055bc:	08005635 	.word	0x08005635
 80055c0:	08005635 	.word	0x08005635
 80055c4:	08005635 	.word	0x08005635
 80055c8:	080055ff 	.word	0x080055ff
 80055cc:	08005635 	.word	0x08005635
 80055d0:	08005635 	.word	0x08005635
 80055d4:	08005635 	.word	0x08005635
 80055d8:	08005611 	.word	0x08005611
 80055dc:	08005635 	.word	0x08005635
 80055e0:	08005635 	.word	0x08005635
 80055e4:	08005635 	.word	0x08005635
 80055e8:	08005623 	.word	0x08005623
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0202 	orr.w	r2, r2, #2
 80055fa:	60da      	str	r2, [r3, #12]
      break;
 80055fc:	e01d      	b.n	800563a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0204 	orr.w	r2, r2, #4
 800560c:	60da      	str	r2, [r3, #12]
      break;
 800560e:	e014      	b.n	800563a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0208 	orr.w	r2, r2, #8
 800561e:	60da      	str	r2, [r3, #12]
      break;
 8005620:	e00b      	b.n	800563a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0210 	orr.w	r2, r2, #16
 8005630:	60da      	str	r2, [r3, #12]
      break;
 8005632:	e002      	b.n	800563a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
      break;
 8005638:	bf00      	nop
  }

  if (status == HAL_OK)
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d179      	bne.n	8005734 <HAL_TIM_OC_Start_IT+0x28c>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2201      	movs	r2, #1
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 ffc7 	bl	80065dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a3b      	ldr	r2, [pc, #236]	@ (8005740 <HAL_TIM_OC_Start_IT+0x298>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_TIM_OC_Start_IT+0x1e2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a39      	ldr	r2, [pc, #228]	@ (8005744 <HAL_TIM_OC_Start_IT+0x29c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_TIM_OC_Start_IT+0x1e2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a38      	ldr	r2, [pc, #224]	@ (8005748 <HAL_TIM_OC_Start_IT+0x2a0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_TIM_OC_Start_IT+0x1e2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a36      	ldr	r2, [pc, #216]	@ (800574c <HAL_TIM_OC_Start_IT+0x2a4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_TIM_OC_Start_IT+0x1e2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a35      	ldr	r2, [pc, #212]	@ (8005750 <HAL_TIM_OC_Start_IT+0x2a8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIM_OC_Start_IT+0x1e2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a33      	ldr	r2, [pc, #204]	@ (8005754 <HAL_TIM_OC_Start_IT+0x2ac>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <HAL_TIM_OC_Start_IT+0x1e6>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <HAL_TIM_OC_Start_IT+0x1e8>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a25      	ldr	r2, [pc, #148]	@ (8005740 <HAL_TIM_OC_Start_IT+0x298>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d022      	beq.n	80056f4 <HAL_TIM_OC_Start_IT+0x24c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b6:	d01d      	beq.n	80056f4 <HAL_TIM_OC_Start_IT+0x24c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a26      	ldr	r2, [pc, #152]	@ (8005758 <HAL_TIM_OC_Start_IT+0x2b0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d018      	beq.n	80056f4 <HAL_TIM_OC_Start_IT+0x24c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a25      	ldr	r2, [pc, #148]	@ (800575c <HAL_TIM_OC_Start_IT+0x2b4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <HAL_TIM_OC_Start_IT+0x24c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a23      	ldr	r2, [pc, #140]	@ (8005760 <HAL_TIM_OC_Start_IT+0x2b8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_TIM_OC_Start_IT+0x24c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1a      	ldr	r2, [pc, #104]	@ (8005744 <HAL_TIM_OC_Start_IT+0x29c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d009      	beq.n	80056f4 <HAL_TIM_OC_Start_IT+0x24c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a18      	ldr	r2, [pc, #96]	@ (8005748 <HAL_TIM_OC_Start_IT+0x2a0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_OC_Start_IT+0x24c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a19      	ldr	r2, [pc, #100]	@ (8005754 <HAL_TIM_OC_Start_IT+0x2ac>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d115      	bne.n	8005720 <HAL_TIM_OC_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005764 <HAL_TIM_OC_Start_IT+0x2bc>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b06      	cmp	r3, #6
 8005704:	d015      	beq.n	8005732 <HAL_TIM_OC_Start_IT+0x28a>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800570c:	d011      	beq.n	8005732 <HAL_TIM_OC_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	e008      	b.n	8005732 <HAL_TIM_OC_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e000      	b.n	8005734 <HAL_TIM_OC_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40013400 	.word	0x40013400
 8005748:	40014000 	.word	0x40014000
 800574c:	40014400 	.word	0x40014400
 8005750:	40014800 	.word	0x40014800
 8005754:	40015000 	.word	0x40015000
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40000c00 	.word	0x40000c00
 8005764:	00010007 	.word	0x00010007

08005768 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e049      	b.n	800580e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fb fbde 	bl	8000f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f000 fb3a 	bl	8005e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d020      	beq.n	800587a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01b      	beq.n	800587a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f06f 0202 	mvn.w	r2, #2
 800584a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fabf 	bl	8005de4 <HAL_TIM_IC_CaptureCallback>
 8005866:	e005      	b.n	8005874 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fa feb3 	bl	80005d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fac2 	bl	8005df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d020      	beq.n	80058c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d01b      	beq.n	80058c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f06f 0204 	mvn.w	r2, #4
 8005896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fa99 	bl	8005de4 <HAL_TIM_IC_CaptureCallback>
 80058b2:	e005      	b.n	80058c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fa fe8d 	bl	80005d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fa9c 	bl	8005df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d020      	beq.n	8005912 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01b      	beq.n	8005912 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f06f 0208 	mvn.w	r2, #8
 80058e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2204      	movs	r2, #4
 80058e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fa73 	bl	8005de4 <HAL_TIM_IC_CaptureCallback>
 80058fe:	e005      	b.n	800590c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fa fe67 	bl	80005d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fa76 	bl	8005df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	2b00      	cmp	r3, #0
 800591a:	d020      	beq.n	800595e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01b      	beq.n	800595e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f06f 0210 	mvn.w	r2, #16
 800592e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2208      	movs	r2, #8
 8005934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa4d 	bl	8005de4 <HAL_TIM_IC_CaptureCallback>
 800594a:	e005      	b.n	8005958 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7fa fe41 	bl	80005d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa50 	bl	8005df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00c      	beq.n	8005982 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0201 	mvn.w	r2, #1
 800597a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fa27 	bl	8005dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 ff70 	bl	8006890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00c      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 ff68 	bl	80068a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa0a 	bl	8005e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0220 	mvn.w	r2, #32
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 ff30 	bl	800687c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 ff3c 	bl	80068b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 ff34 	bl	80068cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 ff2c 	bl	80068e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 ff24 	bl	80068f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e066      	b.n	8005ba0 <HAL_TIM_OC_ConfigChannel+0xec>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b14      	cmp	r3, #20
 8005ade:	d857      	bhi.n	8005b90 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005b3d 	.word	0x08005b3d
 8005aec:	08005b91 	.word	0x08005b91
 8005af0:	08005b91 	.word	0x08005b91
 8005af4:	08005b91 	.word	0x08005b91
 8005af8:	08005b4b 	.word	0x08005b4b
 8005afc:	08005b91 	.word	0x08005b91
 8005b00:	08005b91 	.word	0x08005b91
 8005b04:	08005b91 	.word	0x08005b91
 8005b08:	08005b59 	.word	0x08005b59
 8005b0c:	08005b91 	.word	0x08005b91
 8005b10:	08005b91 	.word	0x08005b91
 8005b14:	08005b91 	.word	0x08005b91
 8005b18:	08005b67 	.word	0x08005b67
 8005b1c:	08005b91 	.word	0x08005b91
 8005b20:	08005b91 	.word	0x08005b91
 8005b24:	08005b91 	.word	0x08005b91
 8005b28:	08005b75 	.word	0x08005b75
 8005b2c:	08005b91 	.word	0x08005b91
 8005b30:	08005b91 	.word	0x08005b91
 8005b34:	08005b91 	.word	0x08005b91
 8005b38:	08005b83 	.word	0x08005b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fa20 	bl	8005f88 <TIM_OC1_SetConfig>
      break;
 8005b48:	e025      	b.n	8005b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fab3 	bl	80060bc <TIM_OC2_SetConfig>
      break;
 8005b56:	e01e      	b.n	8005b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fb40 	bl	80061e4 <TIM_OC3_SetConfig>
      break;
 8005b64:	e017      	b.n	8005b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fbcb 	bl	8006308 <TIM_OC4_SetConfig>
      break;
 8005b72:	e010      	b.n	8005b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fc58 	bl	8006430 <TIM_OC5_SetConfig>
      break;
 8005b80:	e009      	b.n	8005b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fcbb 	bl	8006504 <TIM_OC6_SetConfig>
      break;
 8005b8e:	e002      	b.n	8005b96 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
      break;
 8005b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e0ff      	b.n	8005dc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b14      	cmp	r3, #20
 8005bd2:	f200 80f0 	bhi.w	8005db6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005c31 	.word	0x08005c31
 8005be0:	08005db7 	.word	0x08005db7
 8005be4:	08005db7 	.word	0x08005db7
 8005be8:	08005db7 	.word	0x08005db7
 8005bec:	08005c71 	.word	0x08005c71
 8005bf0:	08005db7 	.word	0x08005db7
 8005bf4:	08005db7 	.word	0x08005db7
 8005bf8:	08005db7 	.word	0x08005db7
 8005bfc:	08005cb3 	.word	0x08005cb3
 8005c00:	08005db7 	.word	0x08005db7
 8005c04:	08005db7 	.word	0x08005db7
 8005c08:	08005db7 	.word	0x08005db7
 8005c0c:	08005cf3 	.word	0x08005cf3
 8005c10:	08005db7 	.word	0x08005db7
 8005c14:	08005db7 	.word	0x08005db7
 8005c18:	08005db7 	.word	0x08005db7
 8005c1c:	08005d35 	.word	0x08005d35
 8005c20:	08005db7 	.word	0x08005db7
 8005c24:	08005db7 	.word	0x08005db7
 8005c28:	08005db7 	.word	0x08005db7
 8005c2c:	08005d75 	.word	0x08005d75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f9a6 	bl	8005f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0208 	orr.w	r2, r2, #8
 8005c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0204 	bic.w	r2, r2, #4
 8005c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6999      	ldr	r1, [r3, #24]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	619a      	str	r2, [r3, #24]
      break;
 8005c6e:	e0a5      	b.n	8005dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fa20 	bl	80060bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6999      	ldr	r1, [r3, #24]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	021a      	lsls	r2, r3, #8
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	619a      	str	r2, [r3, #24]
      break;
 8005cb0:	e084      	b.n	8005dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fa93 	bl	80061e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0208 	orr.w	r2, r2, #8
 8005ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0204 	bic.w	r2, r2, #4
 8005cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69d9      	ldr	r1, [r3, #28]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	61da      	str	r2, [r3, #28]
      break;
 8005cf0:	e064      	b.n	8005dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fb05 	bl	8006308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69d9      	ldr	r1, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	021a      	lsls	r2, r3, #8
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	61da      	str	r2, [r3, #28]
      break;
 8005d32:	e043      	b.n	8005dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fb78 	bl	8006430 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0208 	orr.w	r2, r2, #8
 8005d4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0204 	bic.w	r2, r2, #4
 8005d5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d72:	e023      	b.n	8005dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fbc2 	bl	8006504 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	021a      	lsls	r2, r3, #8
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005db4:	e002      	b.n	8005dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop

08005dd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a4c      	ldr	r2, [pc, #304]	@ (8005f64 <TIM_Base_SetConfig+0x144>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d017      	beq.n	8005e68 <TIM_Base_SetConfig+0x48>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3e:	d013      	beq.n	8005e68 <TIM_Base_SetConfig+0x48>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a49      	ldr	r2, [pc, #292]	@ (8005f68 <TIM_Base_SetConfig+0x148>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00f      	beq.n	8005e68 <TIM_Base_SetConfig+0x48>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a48      	ldr	r2, [pc, #288]	@ (8005f6c <TIM_Base_SetConfig+0x14c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00b      	beq.n	8005e68 <TIM_Base_SetConfig+0x48>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a47      	ldr	r2, [pc, #284]	@ (8005f70 <TIM_Base_SetConfig+0x150>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d007      	beq.n	8005e68 <TIM_Base_SetConfig+0x48>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a46      	ldr	r2, [pc, #280]	@ (8005f74 <TIM_Base_SetConfig+0x154>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_Base_SetConfig+0x48>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a45      	ldr	r2, [pc, #276]	@ (8005f78 <TIM_Base_SetConfig+0x158>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d108      	bne.n	8005e7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a39      	ldr	r2, [pc, #228]	@ (8005f64 <TIM_Base_SetConfig+0x144>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d023      	beq.n	8005eca <TIM_Base_SetConfig+0xaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e88:	d01f      	beq.n	8005eca <TIM_Base_SetConfig+0xaa>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a36      	ldr	r2, [pc, #216]	@ (8005f68 <TIM_Base_SetConfig+0x148>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d01b      	beq.n	8005eca <TIM_Base_SetConfig+0xaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a35      	ldr	r2, [pc, #212]	@ (8005f6c <TIM_Base_SetConfig+0x14c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d017      	beq.n	8005eca <TIM_Base_SetConfig+0xaa>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a34      	ldr	r2, [pc, #208]	@ (8005f70 <TIM_Base_SetConfig+0x150>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d013      	beq.n	8005eca <TIM_Base_SetConfig+0xaa>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a33      	ldr	r2, [pc, #204]	@ (8005f74 <TIM_Base_SetConfig+0x154>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00f      	beq.n	8005eca <TIM_Base_SetConfig+0xaa>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a33      	ldr	r2, [pc, #204]	@ (8005f7c <TIM_Base_SetConfig+0x15c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00b      	beq.n	8005eca <TIM_Base_SetConfig+0xaa>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a32      	ldr	r2, [pc, #200]	@ (8005f80 <TIM_Base_SetConfig+0x160>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d007      	beq.n	8005eca <TIM_Base_SetConfig+0xaa>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a31      	ldr	r2, [pc, #196]	@ (8005f84 <TIM_Base_SetConfig+0x164>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d003      	beq.n	8005eca <TIM_Base_SetConfig+0xaa>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f78 <TIM_Base_SetConfig+0x158>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d108      	bne.n	8005edc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a18      	ldr	r2, [pc, #96]	@ (8005f64 <TIM_Base_SetConfig+0x144>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <TIM_Base_SetConfig+0x110>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005f74 <TIM_Base_SetConfig+0x154>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00f      	beq.n	8005f30 <TIM_Base_SetConfig+0x110>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a1a      	ldr	r2, [pc, #104]	@ (8005f7c <TIM_Base_SetConfig+0x15c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <TIM_Base_SetConfig+0x110>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a19      	ldr	r2, [pc, #100]	@ (8005f80 <TIM_Base_SetConfig+0x160>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_Base_SetConfig+0x110>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a18      	ldr	r2, [pc, #96]	@ (8005f84 <TIM_Base_SetConfig+0x164>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0x110>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a13      	ldr	r2, [pc, #76]	@ (8005f78 <TIM_Base_SetConfig+0x158>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d103      	bne.n	8005f38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d105      	bne.n	8005f56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	611a      	str	r2, [r3, #16]
  }
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40015000 	.word	0x40015000
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800

08005f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f023 0201 	bic.w	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0303 	bic.w	r3, r3, #3
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f023 0302 	bic.w	r3, r3, #2
 8005fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a30      	ldr	r2, [pc, #192]	@ (80060a4 <TIM_OC1_SetConfig+0x11c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <TIM_OC1_SetConfig+0x88>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a2f      	ldr	r2, [pc, #188]	@ (80060a8 <TIM_OC1_SetConfig+0x120>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00f      	beq.n	8006010 <TIM_OC1_SetConfig+0x88>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80060ac <TIM_OC1_SetConfig+0x124>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <TIM_OC1_SetConfig+0x88>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a2d      	ldr	r2, [pc, #180]	@ (80060b0 <TIM_OC1_SetConfig+0x128>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_OC1_SetConfig+0x88>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a2c      	ldr	r2, [pc, #176]	@ (80060b4 <TIM_OC1_SetConfig+0x12c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_OC1_SetConfig+0x88>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a2b      	ldr	r2, [pc, #172]	@ (80060b8 <TIM_OC1_SetConfig+0x130>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10c      	bne.n	800602a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0308 	bic.w	r3, r3, #8
 8006016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 0304 	bic.w	r3, r3, #4
 8006028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1d      	ldr	r2, [pc, #116]	@ (80060a4 <TIM_OC1_SetConfig+0x11c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <TIM_OC1_SetConfig+0xd2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1c      	ldr	r2, [pc, #112]	@ (80060a8 <TIM_OC1_SetConfig+0x120>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00f      	beq.n	800605a <TIM_OC1_SetConfig+0xd2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1b      	ldr	r2, [pc, #108]	@ (80060ac <TIM_OC1_SetConfig+0x124>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00b      	beq.n	800605a <TIM_OC1_SetConfig+0xd2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1a      	ldr	r2, [pc, #104]	@ (80060b0 <TIM_OC1_SetConfig+0x128>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d007      	beq.n	800605a <TIM_OC1_SetConfig+0xd2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a19      	ldr	r2, [pc, #100]	@ (80060b4 <TIM_OC1_SetConfig+0x12c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_OC1_SetConfig+0xd2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a18      	ldr	r2, [pc, #96]	@ (80060b8 <TIM_OC1_SetConfig+0x130>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d111      	bne.n	800607e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40013400 	.word	0x40013400
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40014400 	.word	0x40014400
 80060b4:	40014800 	.word	0x40014800
 80060b8:	40015000 	.word	0x40015000

080060bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	f023 0210 	bic.w	r2, r3, #16
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0320 	bic.w	r3, r3, #32
 800610a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a2c      	ldr	r2, [pc, #176]	@ (80061cc <TIM_OC2_SetConfig+0x110>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d007      	beq.n	8006130 <TIM_OC2_SetConfig+0x74>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <TIM_OC2_SetConfig+0x114>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_OC2_SetConfig+0x74>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <TIM_OC2_SetConfig+0x118>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d10d      	bne.n	800614c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a1f      	ldr	r2, [pc, #124]	@ (80061cc <TIM_OC2_SetConfig+0x110>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <TIM_OC2_SetConfig+0xc0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a1e      	ldr	r2, [pc, #120]	@ (80061d0 <TIM_OC2_SetConfig+0x114>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00f      	beq.n	800617c <TIM_OC2_SetConfig+0xc0>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a1e      	ldr	r2, [pc, #120]	@ (80061d8 <TIM_OC2_SetConfig+0x11c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00b      	beq.n	800617c <TIM_OC2_SetConfig+0xc0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1d      	ldr	r2, [pc, #116]	@ (80061dc <TIM_OC2_SetConfig+0x120>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d007      	beq.n	800617c <TIM_OC2_SetConfig+0xc0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1c      	ldr	r2, [pc, #112]	@ (80061e0 <TIM_OC2_SetConfig+0x124>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC2_SetConfig+0xc0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a17      	ldr	r2, [pc, #92]	@ (80061d4 <TIM_OC2_SetConfig+0x118>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d113      	bne.n	80061a4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800618a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40013400 	.word	0x40013400
 80061d4:	40015000 	.word	0x40015000
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40014400 	.word	0x40014400
 80061e0:	40014800 	.word	0x40014800

080061e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a2b      	ldr	r2, [pc, #172]	@ (80062f0 <TIM_OC3_SetConfig+0x10c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <TIM_OC3_SetConfig+0x72>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a2a      	ldr	r2, [pc, #168]	@ (80062f4 <TIM_OC3_SetConfig+0x110>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d003      	beq.n	8006256 <TIM_OC3_SetConfig+0x72>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a29      	ldr	r2, [pc, #164]	@ (80062f8 <TIM_OC3_SetConfig+0x114>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d10d      	bne.n	8006272 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800625c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a1e      	ldr	r2, [pc, #120]	@ (80062f0 <TIM_OC3_SetConfig+0x10c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <TIM_OC3_SetConfig+0xbe>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a1d      	ldr	r2, [pc, #116]	@ (80062f4 <TIM_OC3_SetConfig+0x110>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_OC3_SetConfig+0xbe>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a1d      	ldr	r2, [pc, #116]	@ (80062fc <TIM_OC3_SetConfig+0x118>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_OC3_SetConfig+0xbe>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a1c      	ldr	r2, [pc, #112]	@ (8006300 <TIM_OC3_SetConfig+0x11c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC3_SetConfig+0xbe>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a1b      	ldr	r2, [pc, #108]	@ (8006304 <TIM_OC3_SetConfig+0x120>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC3_SetConfig+0xbe>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <TIM_OC3_SetConfig+0x114>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d113      	bne.n	80062ca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40013400 	.word	0x40013400
 80062f8:	40015000 	.word	0x40015000
 80062fc:	40014000 	.word	0x40014000
 8006300:	40014400 	.word	0x40014400
 8006304:	40014800 	.word	0x40014800

08006308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800633a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	031b      	lsls	r3, r3, #12
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a2c      	ldr	r2, [pc, #176]	@ (8006418 <TIM_OC4_SetConfig+0x110>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d007      	beq.n	800637c <TIM_OC4_SetConfig+0x74>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a2b      	ldr	r2, [pc, #172]	@ (800641c <TIM_OC4_SetConfig+0x114>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_OC4_SetConfig+0x74>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a2a      	ldr	r2, [pc, #168]	@ (8006420 <TIM_OC4_SetConfig+0x118>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d10d      	bne.n	8006398 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	031b      	lsls	r3, r3, #12
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a1f      	ldr	r2, [pc, #124]	@ (8006418 <TIM_OC4_SetConfig+0x110>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <TIM_OC4_SetConfig+0xc0>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a1e      	ldr	r2, [pc, #120]	@ (800641c <TIM_OC4_SetConfig+0x114>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00f      	beq.n	80063c8 <TIM_OC4_SetConfig+0xc0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006424 <TIM_OC4_SetConfig+0x11c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <TIM_OC4_SetConfig+0xc0>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006428 <TIM_OC4_SetConfig+0x120>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_OC4_SetConfig+0xc0>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a1c      	ldr	r2, [pc, #112]	@ (800642c <TIM_OC4_SetConfig+0x124>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC4_SetConfig+0xc0>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a17      	ldr	r2, [pc, #92]	@ (8006420 <TIM_OC4_SetConfig+0x118>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d113      	bne.n	80063f0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	019b      	lsls	r3, r3, #6
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	019b      	lsls	r3, r3, #6
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40012c00 	.word	0x40012c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40015000 	.word	0x40015000
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800

08006430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006474:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	041b      	lsls	r3, r3, #16
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a19      	ldr	r2, [pc, #100]	@ (80064ec <TIM_OC5_SetConfig+0xbc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <TIM_OC5_SetConfig+0x82>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a18      	ldr	r2, [pc, #96]	@ (80064f0 <TIM_OC5_SetConfig+0xc0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00f      	beq.n	80064b2 <TIM_OC5_SetConfig+0x82>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a17      	ldr	r2, [pc, #92]	@ (80064f4 <TIM_OC5_SetConfig+0xc4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00b      	beq.n	80064b2 <TIM_OC5_SetConfig+0x82>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a16      	ldr	r2, [pc, #88]	@ (80064f8 <TIM_OC5_SetConfig+0xc8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d007      	beq.n	80064b2 <TIM_OC5_SetConfig+0x82>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a15      	ldr	r2, [pc, #84]	@ (80064fc <TIM_OC5_SetConfig+0xcc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_OC5_SetConfig+0x82>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a14      	ldr	r2, [pc, #80]	@ (8006500 <TIM_OC5_SetConfig+0xd0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d109      	bne.n	80064c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	621a      	str	r2, [r3, #32]
}
 80064e0:	bf00      	nop
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40013400 	.word	0x40013400
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40014400 	.word	0x40014400
 80064fc:	40014800 	.word	0x40014800
 8006500:	40015000 	.word	0x40015000

08006504 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800654a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	051b      	lsls	r3, r3, #20
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1a      	ldr	r2, [pc, #104]	@ (80065c4 <TIM_OC6_SetConfig+0xc0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <TIM_OC6_SetConfig+0x84>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a19      	ldr	r2, [pc, #100]	@ (80065c8 <TIM_OC6_SetConfig+0xc4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00f      	beq.n	8006588 <TIM_OC6_SetConfig+0x84>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a18      	ldr	r2, [pc, #96]	@ (80065cc <TIM_OC6_SetConfig+0xc8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00b      	beq.n	8006588 <TIM_OC6_SetConfig+0x84>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a17      	ldr	r2, [pc, #92]	@ (80065d0 <TIM_OC6_SetConfig+0xcc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d007      	beq.n	8006588 <TIM_OC6_SetConfig+0x84>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a16      	ldr	r2, [pc, #88]	@ (80065d4 <TIM_OC6_SetConfig+0xd0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d003      	beq.n	8006588 <TIM_OC6_SetConfig+0x84>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a15      	ldr	r2, [pc, #84]	@ (80065d8 <TIM_OC6_SetConfig+0xd4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d109      	bne.n	800659c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800658e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	029b      	lsls	r3, r3, #10
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	621a      	str	r2, [r3, #32]
}
 80065b6:	bf00      	nop
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40013400 	.word	0x40013400
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40014400 	.word	0x40014400
 80065d4:	40014800 	.word	0x40014800
 80065d8:	40015000 	.word	0x40015000

080065dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	2201      	movs	r2, #1
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1a      	ldr	r2, [r3, #32]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	401a      	ands	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1a      	ldr	r2, [r3, #32]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f003 031f 	and.w	r3, r3, #31
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	fa01 f303 	lsl.w	r3, r1, r3
 8006614:	431a      	orrs	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800663c:	2302      	movs	r3, #2
 800663e:	e074      	b.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a34      	ldr	r2, [pc, #208]	@ (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a33      	ldr	r2, [pc, #204]	@ (800673c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a31      	ldr	r2, [pc, #196]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d108      	bne.n	8006690 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006684:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a21      	ldr	r2, [pc, #132]	@ (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d022      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c0:	d01d      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006744 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d018      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1c      	ldr	r2, [pc, #112]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00e      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a15      	ldr	r2, [pc, #84]	@ (800673c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d009      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a18      	ldr	r2, [pc, #96]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d004      	beq.n	80066fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a11      	ldr	r2, [pc, #68]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d10c      	bne.n	8006718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	4313      	orrs	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40013400 	.word	0x40013400
 8006740:	40015000 	.word	0x40015000
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40000c00 	.word	0x40000c00
 8006750:	40014000 	.word	0x40014000

08006754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800676c:	2302      	movs	r3, #2
 800676e:	e078      	b.n	8006862 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	041b      	lsls	r3, r3, #16
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006870 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d009      	beq.n	8006816 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1b      	ldr	r2, [pc, #108]	@ (8006874 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d004      	beq.n	8006816 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a19      	ldr	r2, [pc, #100]	@ (8006878 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d11c      	bne.n	8006850 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	051b      	lsls	r3, r3, #20
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40013400 	.word	0x40013400
 8006878:	40015000 	.word	0x40015000

0800687c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e042      	b.n	80069a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7fa fba9 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2224      	movs	r2, #36	@ 0x24
 8006936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fb24 	bl	8006fa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f825 	bl	80069a8 <UART_SetConfig>
 800695e:	4603      	mov	r3, r0
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e01b      	b.n	80069a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fba3 	bl	80070e4 <UART_CheckIdleState>
 800699e:	4603      	mov	r3, r0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069ac:	b08c      	sub	sp, #48	@ 0x30
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	431a      	orrs	r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4baa      	ldr	r3, [pc, #680]	@ (8006c80 <UART_SetConfig+0x2d8>)
 80069d8:	4013      	ands	r3, r2
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a9f      	ldr	r2, [pc, #636]	@ (8006c84 <UART_SetConfig+0x2dc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a10:	4313      	orrs	r3, r2
 8006a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	f023 010f 	bic.w	r1, r3, #15
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a90      	ldr	r2, [pc, #576]	@ (8006c88 <UART_SetConfig+0x2e0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d125      	bne.n	8006a98 <UART_SetConfig+0xf0>
 8006a4c:	4b8f      	ldr	r3, [pc, #572]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d81a      	bhi.n	8006a90 <UART_SetConfig+0xe8>
 8006a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0xb8>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a89 	.word	0x08006a89
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a76:	e116      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7e:	e112      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a86:	e10e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8e:	e10a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e106      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a7c      	ldr	r2, [pc, #496]	@ (8006c90 <UART_SetConfig+0x2e8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d138      	bne.n	8006b14 <UART_SetConfig+0x16c>
 8006aa2:	4b7a      	ldr	r3, [pc, #488]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f003 030c 	and.w	r3, r3, #12
 8006aac:	2b0c      	cmp	r3, #12
 8006aae:	d82d      	bhi.n	8006b0c <UART_SetConfig+0x164>
 8006ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab8 <UART_SetConfig+0x110>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006b0d 	.word	0x08006b0d
 8006ac0:	08006b0d 	.word	0x08006b0d
 8006ac4:	08006b0d 	.word	0x08006b0d
 8006ac8:	08006afd 	.word	0x08006afd
 8006acc:	08006b0d 	.word	0x08006b0d
 8006ad0:	08006b0d 	.word	0x08006b0d
 8006ad4:	08006b0d 	.word	0x08006b0d
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006b0d 	.word	0x08006b0d
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b05 	.word	0x08006b05
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af2:	e0d8      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afa:	e0d4      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b02:	e0d0      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0a:	e0cc      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b12:	e0c8      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a5e      	ldr	r2, [pc, #376]	@ (8006c94 <UART_SetConfig+0x2ec>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d125      	bne.n	8006b6a <UART_SetConfig+0x1c2>
 8006b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b28:	2b30      	cmp	r3, #48	@ 0x30
 8006b2a:	d016      	beq.n	8006b5a <UART_SetConfig+0x1b2>
 8006b2c:	2b30      	cmp	r3, #48	@ 0x30
 8006b2e:	d818      	bhi.n	8006b62 <UART_SetConfig+0x1ba>
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d00a      	beq.n	8006b4a <UART_SetConfig+0x1a2>
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d814      	bhi.n	8006b62 <UART_SetConfig+0x1ba>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <UART_SetConfig+0x19a>
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d008      	beq.n	8006b52 <UART_SetConfig+0x1aa>
 8006b40:	e00f      	b.n	8006b62 <UART_SetConfig+0x1ba>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b48:	e0ad      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b50:	e0a9      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b52:	2304      	movs	r3, #4
 8006b54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b58:	e0a5      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b60:	e0a1      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b62:	2310      	movs	r3, #16
 8006b64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b68:	e09d      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c98 <UART_SetConfig+0x2f0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d125      	bne.n	8006bc0 <UART_SetConfig+0x218>
 8006b74:	4b45      	ldr	r3, [pc, #276]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b80:	d016      	beq.n	8006bb0 <UART_SetConfig+0x208>
 8006b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b84:	d818      	bhi.n	8006bb8 <UART_SetConfig+0x210>
 8006b86:	2b80      	cmp	r3, #128	@ 0x80
 8006b88:	d00a      	beq.n	8006ba0 <UART_SetConfig+0x1f8>
 8006b8a:	2b80      	cmp	r3, #128	@ 0x80
 8006b8c:	d814      	bhi.n	8006bb8 <UART_SetConfig+0x210>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <UART_SetConfig+0x1f0>
 8006b92:	2b40      	cmp	r3, #64	@ 0x40
 8006b94:	d008      	beq.n	8006ba8 <UART_SetConfig+0x200>
 8006b96:	e00f      	b.n	8006bb8 <UART_SetConfig+0x210>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9e:	e082      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e07e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e07a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e076      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e072      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a35      	ldr	r2, [pc, #212]	@ (8006c9c <UART_SetConfig+0x2f4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d12a      	bne.n	8006c20 <UART_SetConfig+0x278>
 8006bca:	4b30      	ldr	r3, [pc, #192]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd8:	d01a      	beq.n	8006c10 <UART_SetConfig+0x268>
 8006bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bde:	d81b      	bhi.n	8006c18 <UART_SetConfig+0x270>
 8006be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be4:	d00c      	beq.n	8006c00 <UART_SetConfig+0x258>
 8006be6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bea:	d815      	bhi.n	8006c18 <UART_SetConfig+0x270>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <UART_SetConfig+0x250>
 8006bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf4:	d008      	beq.n	8006c08 <UART_SetConfig+0x260>
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x270>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfe:	e052      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c00:	2302      	movs	r3, #2
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c06:	e04e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0e:	e04a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c10:	2308      	movs	r3, #8
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	e046      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1e:	e042      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a17      	ldr	r2, [pc, #92]	@ (8006c84 <UART_SetConfig+0x2dc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d13a      	bne.n	8006ca0 <UART_SetConfig+0x2f8>
 8006c2a:	4b18      	ldr	r3, [pc, #96]	@ (8006c8c <UART_SetConfig+0x2e4>)
 8006c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c38:	d01a      	beq.n	8006c70 <UART_SetConfig+0x2c8>
 8006c3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0x2d0>
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c44:	d00c      	beq.n	8006c60 <UART_SetConfig+0x2b8>
 8006c46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c4a:	d815      	bhi.n	8006c78 <UART_SetConfig+0x2d0>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <UART_SetConfig+0x2b0>
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c54:	d008      	beq.n	8006c68 <UART_SetConfig+0x2c0>
 8006c56:	e00f      	b.n	8006c78 <UART_SetConfig+0x2d0>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5e:	e022      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c66:	e01e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6e:	e01a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c76:	e016      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7e:	e012      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c80:	cfff69f3 	.word	0xcfff69f3
 8006c84:	40008000 	.word	0x40008000
 8006c88:	40013800 	.word	0x40013800
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	40004400 	.word	0x40004400
 8006c94:	40004800 	.word	0x40004800
 8006c98:	40004c00 	.word	0x40004c00
 8006c9c:	40005000 	.word	0x40005000
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4aae      	ldr	r2, [pc, #696]	@ (8006f64 <UART_SetConfig+0x5bc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	f040 8097 	bne.w	8006de0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d823      	bhi.n	8006d02 <UART_SetConfig+0x35a>
 8006cba:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <UART_SetConfig+0x318>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006cf3 	.word	0x08006cf3
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006d03 	.word	0x08006d03
 8006cdc:	08006d03 	.word	0x08006d03
 8006ce0:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce4:	f7fe f8be 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 8006ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cea:	e010      	b.n	8006d0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b9e      	ldr	r3, [pc, #632]	@ (8006f68 <UART_SetConfig+0x5c0>)
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf0:	e00d      	b.n	8006d0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fe f849 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8006cf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf8:	e009      	b.n	8006d0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d00:	e005      	b.n	8006d0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 8130 	beq.w	8006f76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	4a94      	ldr	r2, [pc, #592]	@ (8006f6c <UART_SetConfig+0x5c4>)
 8006d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d20:	461a      	mov	r2, r3
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d305      	bcc.n	8006d46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d903      	bls.n	8006d4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d4c:	e113      	b.n	8006f76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	2200      	movs	r2, #0
 8006d52:	60bb      	str	r3, [r7, #8]
 8006d54:	60fa      	str	r2, [r7, #12]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	4a84      	ldr	r2, [pc, #528]	@ (8006f6c <UART_SetConfig+0x5c4>)
 8006d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2200      	movs	r2, #0
 8006d64:	603b      	str	r3, [r7, #0]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d70:	f7f9 fa52 	bl	8000218 <__aeabi_uldivmod>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	020b      	lsls	r3, r1, #8
 8006d86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d8a:	0202      	lsls	r2, r0, #8
 8006d8c:	6979      	ldr	r1, [r7, #20]
 8006d8e:	6849      	ldr	r1, [r1, #4]
 8006d90:	0849      	lsrs	r1, r1, #1
 8006d92:	2000      	movs	r0, #0
 8006d94:	460c      	mov	r4, r1
 8006d96:	4605      	mov	r5, r0
 8006d98:	eb12 0804 	adds.w	r8, r2, r4
 8006d9c:	eb43 0905 	adc.w	r9, r3, r5
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	469a      	mov	sl, r3
 8006da8:	4693      	mov	fp, r2
 8006daa:	4652      	mov	r2, sl
 8006dac:	465b      	mov	r3, fp
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f7f9 fa31 	bl	8000218 <__aeabi_uldivmod>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4613      	mov	r3, r2
 8006dbc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc4:	d308      	bcc.n	8006dd8 <UART_SetConfig+0x430>
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dcc:	d204      	bcs.n	8006dd8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6a3a      	ldr	r2, [r7, #32]
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	e0ce      	b.n	8006f76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dde:	e0ca      	b.n	8006f76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006de8:	d166      	bne.n	8006eb8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006dea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d827      	bhi.n	8006e42 <UART_SetConfig+0x49a>
 8006df2:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <UART_SetConfig+0x450>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	08006e43 	.word	0x08006e43
 8006e08:	08006e33 	.word	0x08006e33
 8006e0c:	08006e43 	.word	0x08006e43
 8006e10:	08006e43 	.word	0x08006e43
 8006e14:	08006e43 	.word	0x08006e43
 8006e18:	08006e3b 	.word	0x08006e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e1c:	f7fe f822 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 8006e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e22:	e014      	b.n	8006e4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e24:	f7fe f834 	bl	8004e90 <HAL_RCC_GetPCLK2Freq>
 8006e28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e2a:	e010      	b.n	8006e4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8006f68 <UART_SetConfig+0x5c0>)
 8006e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e30:	e00d      	b.n	8006e4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e32:	f7fd ffa9 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8006e36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e38:	e009      	b.n	8006e4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e40:	e005      	b.n	8006e4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8090 	beq.w	8006f76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	4a44      	ldr	r2, [pc, #272]	@ (8006f6c <UART_SetConfig+0x5c4>)
 8006e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e68:	005a      	lsls	r2, r3, #1
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	441a      	add	r2, r3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	2b0f      	cmp	r3, #15
 8006e80:	d916      	bls.n	8006eb0 <UART_SetConfig+0x508>
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e88:	d212      	bcs.n	8006eb0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f023 030f 	bic.w	r3, r3, #15
 8006e92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	8bfb      	ldrh	r3, [r7, #30]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	8bfa      	ldrh	r2, [r7, #30]
 8006eac:	60da      	str	r2, [r3, #12]
 8006eae:	e062      	b.n	8006f76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006eb6:	e05e      	b.n	8006f76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d828      	bhi.n	8006f12 <UART_SetConfig+0x56a>
 8006ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec8 <UART_SetConfig+0x520>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006f13 	.word	0x08006f13
 8006ed8:	08006f03 	.word	0x08006f03
 8006edc:	08006f13 	.word	0x08006f13
 8006ee0:	08006f13 	.word	0x08006f13
 8006ee4:	08006f13 	.word	0x08006f13
 8006ee8:	08006f0b 	.word	0x08006f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fd ffba 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 8006ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ef2:	e014      	b.n	8006f1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef4:	f7fd ffcc 	bl	8004e90 <HAL_RCC_GetPCLK2Freq>
 8006ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006efa:	e010      	b.n	8006f1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006efc:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <UART_SetConfig+0x5c0>)
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f00:	e00d      	b.n	8006f1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f02:	f7fd ff41 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8006f06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f08:	e009      	b.n	8006f1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f10:	e005      	b.n	8006f1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d028      	beq.n	8006f76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	4a10      	ldr	r2, [pc, #64]	@ (8006f6c <UART_SetConfig+0x5c4>)
 8006f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	085b      	lsrs	r3, r3, #1
 8006f3c:	441a      	add	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	2b0f      	cmp	r3, #15
 8006f4c:	d910      	bls.n	8006f70 <UART_SetConfig+0x5c8>
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f54:	d20c      	bcs.n	8006f70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	e009      	b.n	8006f76 <UART_SetConfig+0x5ce>
 8006f62:	bf00      	nop
 8006f64:	40008000 	.word	0x40008000
 8006f68:	00f42400 	.word	0x00f42400
 8006f6c:	08007680 	.word	0x08007680
      }
      else
      {
        ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3730      	adds	r7, #48	@ 0x30
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01a      	beq.n	80070b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800709e:	d10a      	bne.n	80070b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
  }
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b098      	sub	sp, #96	@ 0x60
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f4:	f7fa f8fa 	bl	80012ec <HAL_GetTick>
 80070f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b08      	cmp	r3, #8
 8007106:	d12f      	bne.n	8007168 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007108:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007110:	2200      	movs	r2, #0
 8007112:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f88e 	bl	8007238 <UART_WaitOnFlagUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d022      	beq.n	8007168 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007136:	653b      	str	r3, [r7, #80]	@ 0x50
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007140:	647b      	str	r3, [r7, #68]	@ 0x44
 8007142:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800714e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e6      	bne.n	8007122 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e063      	b.n	8007230 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b04      	cmp	r3, #4
 8007174:	d149      	bne.n	800720a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007176:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717e:	2200      	movs	r2, #0
 8007180:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f857 	bl	8007238 <UART_WaitOnFlagUntilTimeout>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d03c      	beq.n	800720a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	623b      	str	r3, [r7, #32]
   return(result);
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80071b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e6      	bne.n	8007190 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3308      	adds	r3, #8
 80071c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071e2:	61fa      	str	r2, [r7, #28]
 80071e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	69b9      	ldr	r1, [r7, #24]
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	617b      	str	r3, [r7, #20]
   return(result);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e5      	bne.n	80071c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e012      	b.n	8007230 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3758      	adds	r7, #88	@ 0x58
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	4613      	mov	r3, r2
 8007246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007248:	e04f      	b.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d04b      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007252:	f7fa f84b 	bl	80012ec <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <UART_WaitOnFlagUntilTimeout+0x30>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e04e      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b00      	cmp	r3, #0
 8007278:	d037      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b80      	cmp	r3, #128	@ 0x80
 800727e:	d034      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b40      	cmp	r3, #64	@ 0x40
 8007284:	d031      	beq.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b08      	cmp	r3, #8
 8007292:	d110      	bne.n	80072b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2208      	movs	r2, #8
 800729a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f838 	bl	8007312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2208      	movs	r2, #8
 80072a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e029      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072c4:	d111      	bne.n	80072ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f81e 	bl	8007312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e00f      	b.n	800730a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	429a      	cmp	r2, r3
 8007306:	d0a0      	beq.n	800724a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007312:	b480      	push	{r7}
 8007314:	b095      	sub	sp, #84	@ 0x54
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800732e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007338:	643b      	str	r3, [r7, #64]	@ 0x40
 800733a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800733e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	61fb      	str	r3, [r7, #28]
   return(result);
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007370:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e3      	bne.n	800734c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007388:	2b01      	cmp	r3, #1
 800738a:	d118      	bne.n	80073be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	60bb      	str	r3, [r7, #8]
   return(result);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 0310 	bic.w	r3, r3, #16
 80073a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6979      	ldr	r1, [r7, #20]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	613b      	str	r3, [r7, #16]
   return(result);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e6      	bne.n	800738c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073d2:	bf00      	nop
 80073d4:	3754      	adds	r7, #84	@ 0x54
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e027      	b.n	8007444 <HAL_UARTEx_DisableFifoMode+0x66>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2224      	movs	r2, #36	@ 0x24
 8007400:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007422:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007464:	2302      	movs	r3, #2
 8007466:	e02d      	b.n	80074c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2224      	movs	r2, #36	@ 0x24
 8007474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f84f 	bl	8007548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e02d      	b.n	8007540 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	@ 0x24
 80074f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f811 	bl	8007548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007554:	2b00      	cmp	r3, #0
 8007556:	d108      	bne.n	800756a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007568:	e031      	b.n	80075ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800756a:	2308      	movs	r3, #8
 800756c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800756e:	2308      	movs	r3, #8
 8007570:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	0e5b      	lsrs	r3, r3, #25
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	0f5b      	lsrs	r3, r3, #29
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	7b3a      	ldrb	r2, [r7, #12]
 8007596:	4911      	ldr	r1, [pc, #68]	@ (80075dc <UARTEx_SetNbDataToProcess+0x94>)
 8007598:	5c8a      	ldrb	r2, [r1, r2]
 800759a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800759e:	7b3a      	ldrb	r2, [r7, #12]
 80075a0:	490f      	ldr	r1, [pc, #60]	@ (80075e0 <UARTEx_SetNbDataToProcess+0x98>)
 80075a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	7b7a      	ldrb	r2, [r7, #13]
 80075b4:	4909      	ldr	r1, [pc, #36]	@ (80075dc <UARTEx_SetNbDataToProcess+0x94>)
 80075b6:	5c8a      	ldrb	r2, [r1, r2]
 80075b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075bc:	7b7a      	ldrb	r2, [r7, #13]
 80075be:	4908      	ldr	r1, [pc, #32]	@ (80075e0 <UARTEx_SetNbDataToProcess+0x98>)
 80075c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	08007698 	.word	0x08007698
 80075e0:	080076a0 	.word	0x080076a0

080075e4 <memset>:
 80075e4:	4402      	add	r2, r0
 80075e6:	4603      	mov	r3, r0
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d100      	bne.n	80075ee <memset+0xa>
 80075ec:	4770      	bx	lr
 80075ee:	f803 1b01 	strb.w	r1, [r3], #1
 80075f2:	e7f9      	b.n	80075e8 <memset+0x4>

080075f4 <__libc_init_array>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	4d0d      	ldr	r5, [pc, #52]	@ (800762c <__libc_init_array+0x38>)
 80075f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007630 <__libc_init_array+0x3c>)
 80075fa:	1b64      	subs	r4, r4, r5
 80075fc:	10a4      	asrs	r4, r4, #2
 80075fe:	2600      	movs	r6, #0
 8007600:	42a6      	cmp	r6, r4
 8007602:	d109      	bne.n	8007618 <__libc_init_array+0x24>
 8007604:	4d0b      	ldr	r5, [pc, #44]	@ (8007634 <__libc_init_array+0x40>)
 8007606:	4c0c      	ldr	r4, [pc, #48]	@ (8007638 <__libc_init_array+0x44>)
 8007608:	f000 f818 	bl	800763c <_init>
 800760c:	1b64      	subs	r4, r4, r5
 800760e:	10a4      	asrs	r4, r4, #2
 8007610:	2600      	movs	r6, #0
 8007612:	42a6      	cmp	r6, r4
 8007614:	d105      	bne.n	8007622 <__libc_init_array+0x2e>
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	f855 3b04 	ldr.w	r3, [r5], #4
 800761c:	4798      	blx	r3
 800761e:	3601      	adds	r6, #1
 8007620:	e7ee      	b.n	8007600 <__libc_init_array+0xc>
 8007622:	f855 3b04 	ldr.w	r3, [r5], #4
 8007626:	4798      	blx	r3
 8007628:	3601      	adds	r6, #1
 800762a:	e7f2      	b.n	8007612 <__libc_init_array+0x1e>
 800762c:	080076b0 	.word	0x080076b0
 8007630:	080076b0 	.word	0x080076b0
 8007634:	080076b0 	.word	0x080076b0
 8007638:	080076b4 	.word	0x080076b4

0800763c <_init>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr

08007648 <_fini>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr
