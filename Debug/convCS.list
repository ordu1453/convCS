
convCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008070  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08008248  08008248  00009248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008298  08008298  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008298  08008298  00009298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082a0  080082a0  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a0  080082a0  000092a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082a4  080082a4  000092a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080082a8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000014  080082bc  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080082bc  0000a2f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab1c  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ac  00000000  00000000  00024b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00027c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f2  00000000  00000000  00029330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023aee  00000000  00000000  0002a522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f56  00000000  00000000  0004e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f429b  00000000  00000000  00067f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000641c  00000000  00000000  0015c244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00162660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008230 	.word	0x08008230

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08008230 	.word	0x08008230

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <canReceiveHandler>:
HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, data);
}


void canReceiveHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b090      	sub	sp, #64	@ 0x40
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
FDCAN_RxHeaderTypeDef rxHeader;
uint8_t data[8];


if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, data) != HAL_OK)
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	f107 0218 	add.w	r2, r7, #24
 8000554:	2140      	movs	r1, #64	@ 0x40
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f003 ff84 	bl	8004464 <HAL_FDCAN_GetRxMessage>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d116      	bne.n	8000590 <canReceiveHandler+0x4c>
return;


requestedMode = (SystemState_t)data[0];
 8000562:	7c3a      	ldrb	r2, [r7, #16]
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <canReceiveHandler+0x54>)
 8000566:	701a      	strb	r2, [r3, #0]


int16_t vDeci = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	81fb      	strh	r3, [r7, #14]
memcpy(&vDeci, &data[1], 2);
 800056c:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8000570:	b29b      	uxth	r3, r3
 8000572:	81fb      	strh	r3, [r7, #14]
targetVoltage = (float)vDeci * 100.0f;
 8000574:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000578:	ee07 3a90 	vmov	s15, r3
 800057c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000580:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800059c <canReceiveHandler+0x58>
 8000584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <canReceiveHandler+0x5c>)
 800058a:	edc3 7a00 	vstr	s15, [r3]
 800058e:	e000      	b.n	8000592 <canReceiveHandler+0x4e>
return;
 8000590:	bf00      	nop
}
 8000592:	3740      	adds	r7, #64	@ 0x40
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000034 	.word	0x20000034
 800059c:	42c80000 	.word	0x42c80000
 80005a0:	20000030 	.word	0x20000030

080005a4 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
canReceiveHandler(hfdcan);
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f7ff ffc8 	bl	8000544 <canReceiveHandler>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <ConverterGetState>:
// call pwm disable until safe
pwmDisable();
}
#endif

SystemState_t ConverterGetState(void) {
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
    return currentState;
 80005c0:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <ConverterGetState+0x14>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000058 	.word	0x20000058

080005d4 <converterProcess>:


void converterProcess(SystemState_t state)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	@ 0x30
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
    const SensorValues_t* s = sensorGetValues();
    uint32_t errMask = ERR_NONE;
    uint8_t hasErr = diagCheck(s, &errMask);
#else
    // Заглушка для юнит-тестов
    const SensorValues_t* s = &unitTestSensorValues;
 80005de:	4b32      	ldr	r3, [pc, #200]	@ (80006a8 <converterProcess+0xd4>)
 80005e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t errMask = unitTestErrorMask;
 80005e2:	4b32      	ldr	r3, [pc, #200]	@ (80006ac <converterProcess+0xd8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t hasErr = unitTestHasError;
 80005e8:	4b31      	ldr	r3, [pc, #196]	@ (80006b0 <converterProcess+0xdc>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif

    globalErrorMask = errMask;
 80005f0:	4a30      	ldr	r2, [pc, #192]	@ (80006b4 <converterProcess+0xe0>)
 80005f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005f4:	6013      	str	r3, [r2, #0]

    // mode change -> reset pid
    if ((uint32_t)state != lastMode)
 80005f6:	79fa      	ldrb	r2, [r7, #7]
 80005f8:	4b2f      	ldr	r3, [pc, #188]	@ (80006b8 <converterProcess+0xe4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d005      	beq.n	800060c <converterProcess+0x38>
    {
        piReset(&currentPid);
 8000600:	482e      	ldr	r0, [pc, #184]	@ (80006bc <converterProcess+0xe8>)
 8000602:	f000 fcc6 	bl	8000f92 <piReset>
        lastMode = (uint32_t)state;
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4a2b      	ldr	r2, [pc, #172]	@ (80006b8 <converterProcess+0xe4>)
 800060a:	6013      	str	r3, [r2, #0]
#ifndef TEST_UNITY
    pwmHandlerProcess(hasErr, state);
#endif

    // run PID only in charge/discharge
    if (state == STATE_CHARGE)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b03      	cmp	r3, #3
 8000610:	d117      	bne.n	8000642 <converterProcess+0x6e>
    {
        float setpoint = 1000.0f;
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <converterProcess+0xec>)
 8000614:	617b      	str	r3, [r7, #20]
        float measurement = (float)s->voltageOut;
 8000616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	ee07 3a90 	vmov	s15, r3
 800061e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000622:	edc7 7a04 	vstr	s15, [r7, #16]
        float duty = piUpdate(&currentPid, setpoint, measurement);
 8000626:	edd7 0a04 	vldr	s1, [r7, #16]
 800062a:	ed97 0a05 	vldr	s0, [r7, #20]
 800062e:	4823      	ldr	r0, [pc, #140]	@ (80006bc <converterProcess+0xe8>)
 8000630:	f000 fc26 	bl	8000e80 <piUpdate>
 8000634:	ee07 0a90 	vmov	s15, r0
 8000638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800063c:	edc7 7a03 	vstr	s15, [r7, #12]
 8000640:	e019      	b.n	8000676 <converterProcess+0xa2>
#ifndef TEST_UNITY
        pwmSetDuty((uint32_t)duty);
#endif
    }
    else if (state == STATE_DISCHARGE)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b04      	cmp	r3, #4
 8000646:	d116      	bne.n	8000676 <converterProcess+0xa2>
    {
        float setpoint = -1000.0f;
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <converterProcess+0xf0>)
 800064a:	623b      	str	r3, [r7, #32]
        float measurement = (float)s->currentOut;
 800064c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000658:	edc7 7a07 	vstr	s15, [r7, #28]
        float duty = piUpdate(&currentPid, setpoint, measurement);
 800065c:	edd7 0a07 	vldr	s1, [r7, #28]
 8000660:	ed97 0a08 	vldr	s0, [r7, #32]
 8000664:	4815      	ldr	r0, [pc, #84]	@ (80006bc <converterProcess+0xe8>)
 8000666:	f000 fc0b 	bl	8000e80 <piUpdate>
 800066a:	ee07 0a90 	vmov	s15, r0
 800066e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000672:	edc7 7a06 	vstr	s15, [r7, #24]
        pwmSetDuty((uint32_t)duty);
#endif
    }

    // precharge
    if (state == STATE_PRECHARGE && currentState != STATE_PRECHARGE)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d111      	bne.n	80006a0 <converterProcess+0xcc>
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <converterProcess+0xf4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00d      	beq.n	80006a0 <converterProcess+0xcc>
    {
        currentState = STATE_PRECHARGE;
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <converterProcess+0xf4>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
#ifndef TEST_UNITY
        prechargeStart();
#endif
        if (!hasErr)
 800068a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800068e:	2b00      	cmp	r3, #0
 8000690:	d103      	bne.n	800069a <converterProcess+0xc6>
        {
            currentState = STATE_IDLE;
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <converterProcess+0xf4>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
    }

#ifndef TEST_UNITY
    canPublishTelemetry(currentState, errMask, s);
#endif
}
 8000698:	e002      	b.n	80006a0 <converterProcess+0xcc>
            currentState = STATE_INIT;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <converterProcess+0xf4>)
 800069c:	2202      	movs	r2, #2
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3730      	adds	r7, #48	@ 0x30
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000038 	.word	0x20000038
 80006ac:	2000004c 	.word	0x2000004c
 80006b0:	20000050 	.word	0x20000050
 80006b4:	20000054 	.word	0x20000054
 80006b8:	20000000 	.word	0x20000000
 80006bc:	2000005c 	.word	0x2000005c
 80006c0:	447a0000 	.word	0x447a0000
 80006c4:	c47a0000 	.word	0xc47a0000
 80006c8:	20000058 	.word	0x20000058

080006cc <HAL_TIM_OC_DelayElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d117      	bne.n	800070e <HAL_TIM_OC_DelayElapsedCallback+0x42>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7f1b      	ldrb	r3, [r3, #28]
 80006e2:	2b08      	cmp	r3, #8
 80006e4:	d113      	bne.n	800070e <HAL_TIM_OC_DelayElapsedCallback+0x42>
    {
// This used for adding offset to adc calculation in case if it is unnecessary to get data every pwm period
    	if (tickADC == ADC_DIVIDER){
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b14      	cmp	r3, #20
 80006ec:	d10a      	bne.n	8000704 <HAL_TIM_OC_DelayElapsedCallback+0x38>
    		sensorRead();
 80006ee:	f000 fc61 	bl	8000fb4 <sensorRead>
    		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80006f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f6:	480a      	ldr	r0, [pc, #40]	@ (8000720 <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 80006f8:	f004 fb5e 	bl	8004db8 <HAL_GPIO_TogglePin>
    		tickADC = 0;
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
    	else
    	{
    		tickADC++;
    	}
    }
}
 8000702:	e004      	b.n	800070e <HAL_TIM_OC_DelayElapsedCallback+0x42>
    		tickADC++;
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 800070c:	6013      	str	r3, [r2, #0]
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40012c00 	.word	0x40012c00
 800071c:	20000004 	.word	0x20000004
 8000720:	48000800 	.word	0x48000800

08000724 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d10a      	bne.n	800074c <HAL_TIM_PeriodElapsedCallback+0x28>
    {
    	converterProcess(ConverterGetState());
 8000736:	f7ff ff41 	bl	80005bc <ConverterGetState>
 800073a:	4603      	mov	r3, r0
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff49 	bl	80005d4 <converterProcess>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000742:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000746:	4804      	ldr	r0, [pc, #16]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000748:	f004 fb36 	bl	8004db8 <HAL_GPIO_TogglePin>
    }
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40001000 	.word	0x40001000
 8000758:	48000800 	.word	0x48000800

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 ffd5 	bl	800170e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f81c 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 faf8 	bl	8000d5c <MX_GPIO_Init>
  MX_ADC1_Init();
 800076c:	f000 f862 	bl	8000834 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000770:	f000 f92e 	bl	80009d0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000774:	f000 f972 	bl	8000a5c <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000778:	f000 f9b6 	bl	8000ae8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800077c:	f000 faa2 	bl	8000cc4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000780:	f000 fa6a 	bl	8000c58 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4); // adc interrupt
 8000784:	210c      	movs	r1, #12
 8000786:	4804      	ldr	r0, [pc, #16]	@ (8000798 <main+0x3c>)
 8000788:	f005 fc92 	bl	80060b0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // main process interrupt
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <main+0x40>)
 800078e:	f005 fbb5 	bl	8005efc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000792:	bf00      	nop
 8000794:	e7fd      	b.n	8000792 <main+0x36>
 8000796:	bf00      	nop
 8000798:	200001ac 	.word	0x200001ac
 800079c:	200001f8 	.word	0x200001f8

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	@ 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2238      	movs	r2, #56	@ 0x38
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f007 fd12 	bl	80081d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f004 fb12 	bl	8004dec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	2303      	movs	r3, #3
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007de:	2355      	movs	r3, #85	@ 0x55
 80007e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fbae 	bl	8004f54 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007fe:	f000 fb39 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000812:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000816:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2104      	movs	r1, #4
 800081c:	4618      	mov	r0, r3
 800081e:	f004 feab 	bl	8005578 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000828:	f000 fb24 	bl	8000e74 <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	3750      	adds	r7, #80	@ 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09a      	sub	sp, #104	@ 0x68
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f007 fcc2 	bl	80081d8 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	223c      	movs	r2, #60	@ 0x3c
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f007 fcbc 	bl	80081d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000860:	4b59      	ldr	r3, [pc, #356]	@ (80009c8 <MX_ADC1_Init+0x194>)
 8000862:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000866:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000868:	4b57      	ldr	r3, [pc, #348]	@ (80009c8 <MX_ADC1_Init+0x194>)
 800086a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800086e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000870:	4b55      	ldr	r3, [pc, #340]	@ (80009c8 <MX_ADC1_Init+0x194>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000876:	4b54      	ldr	r3, [pc, #336]	@ (80009c8 <MX_ADC1_Init+0x194>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800087c:	4b52      	ldr	r3, [pc, #328]	@ (80009c8 <MX_ADC1_Init+0x194>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000882:	4b51      	ldr	r3, [pc, #324]	@ (80009c8 <MX_ADC1_Init+0x194>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000888:	4b4f      	ldr	r3, [pc, #316]	@ (80009c8 <MX_ADC1_Init+0x194>)
 800088a:	2204      	movs	r2, #4
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800088e:	4b4e      	ldr	r3, [pc, #312]	@ (80009c8 <MX_ADC1_Init+0x194>)
 8000890:	2200      	movs	r2, #0
 8000892:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000894:	4b4c      	ldr	r3, [pc, #304]	@ (80009c8 <MX_ADC1_Init+0x194>)
 8000896:	2200      	movs	r2, #0
 8000898:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800089a:	4b4b      	ldr	r3, [pc, #300]	@ (80009c8 <MX_ADC1_Init+0x194>)
 800089c:	2201      	movs	r2, #1
 800089e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b49      	ldr	r3, [pc, #292]	@ (80009c8 <MX_ADC1_Init+0x194>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a8:	4b47      	ldr	r3, [pc, #284]	@ (80009c8 <MX_ADC1_Init+0x194>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ae:	4b46      	ldr	r3, [pc, #280]	@ (80009c8 <MX_ADC1_Init+0x194>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b4:	4b44      	ldr	r3, [pc, #272]	@ (80009c8 <MX_ADC1_Init+0x194>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008bc:	4b42      	ldr	r3, [pc, #264]	@ (80009c8 <MX_ADC1_Init+0x194>)
 80008be:	2200      	movs	r2, #0
 80008c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008c2:	4b41      	ldr	r3, [pc, #260]	@ (80009c8 <MX_ADC1_Init+0x194>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ca:	483f      	ldr	r0, [pc, #252]	@ (80009c8 <MX_ADC1_Init+0x194>)
 80008cc:	f001 fa0a 	bl	8001ce4 <HAL_ADC_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008d6:	f000 facd 	bl	8000e74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008da:	2300      	movs	r3, #0
 80008dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80008e2:	4619      	mov	r1, r3
 80008e4:	4838      	ldr	r0, [pc, #224]	@ (80009c8 <MX_ADC1_Init+0x194>)
 80008e6:	f003 fa4b 	bl	8003d80 <HAL_ADCEx_MultiModeConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80008f0:	f000 fac0 	bl	8000e74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008f4:	4b35      	ldr	r3, [pc, #212]	@ (80009cc <MX_ADC1_Init+0x198>)
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f8:	2306      	movs	r3, #6
 80008fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008fc:	2300      	movs	r3, #0
 80008fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000900:	237f      	movs	r3, #127	@ 0x7f
 8000902:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000904:	2304      	movs	r3, #4
 8000906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000910:	4619      	mov	r1, r3
 8000912:	482d      	ldr	r0, [pc, #180]	@ (80009c8 <MX_ADC1_Init+0x194>)
 8000914:	f001 fdce 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800091e:	f000 faa9 	bl	8000e74 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000922:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <MX_ADC1_Init+0x198>)
 8000924:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000926:	2309      	movs	r3, #9
 8000928:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800092e:	237f      	movs	r3, #127	@ 0x7f
 8000930:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000932:	2304      	movs	r3, #4
 8000934:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800093a:	2304      	movs	r3, #4
 800093c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	4619      	mov	r1, r3
 8000962:	4819      	ldr	r0, [pc, #100]	@ (80009c8 <MX_ADC1_Init+0x194>)
 8000964:	f002 fce0 	bl	8003328 <HAL_ADCEx_InjectedConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800096e:	f000 fa81 	bl	8000e74 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000972:	f240 130f 	movw	r3, #271	@ 0x10f
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4812      	ldr	r0, [pc, #72]	@ (80009c8 <MX_ADC1_Init+0x194>)
 800097e:	f002 fcd3 	bl	8003328 <HAL_ADCEx_InjectedConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8000988:	f000 fa74 	bl	8000e74 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800098c:	f240 2315 	movw	r3, #533	@ 0x215
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <MX_ADC1_Init+0x194>)
 8000998:	f002 fcc6 	bl	8003328 <HAL_ADCEx_InjectedConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80009a2:	f000 fa67 	bl	8000e74 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 80009a6:	f240 331b 	movw	r3, #795	@ 0x31b
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_ADC1_Init+0x194>)
 80009b2:	f002 fcb9 	bl	8003328 <HAL_ADCEx_InjectedConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80009bc:	f000 fa5a 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3768      	adds	r7, #104	@ 0x68
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000078 	.word	0x20000078
 80009cc:	04300002 	.word	0x04300002

080009d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 80009d6:	4a20      	ldr	r2, [pc, #128]	@ (8000a58 <MX_FDCAN1_Init+0x88>)
 80009d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80009da:	4b1e      	ldr	r3, [pc, #120]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009ec:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a00:	2214      	movs	r2, #20
 8000a02:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a04:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a0c:	220e      	movs	r2, #14
 8000a0e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a10:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_FDCAN1_Init+0x84>)
 8000a42:	f003 fbb5 	bl	80041b0 <HAL_FDCAN_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000a4c:	f000 fa12 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000e4 	.word	0x200000e4
 8000a58:	40006400 	.word	0x40006400

08000a5c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000a60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a62:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <MX_FDCAN2_Init+0x88>)
 8000a64:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000a78:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 20;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a8c:	2214      	movs	r2, #20
 8000a8e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a98:	220e      	movs	r2, #14
 8000a9a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_FDCAN2_Init+0x84>)
 8000ace:	f003 fb6f 	bl	80041b0 <HAL_FDCAN_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000ad8:	f000 f9cc 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000148 	.word	0x20000148
 8000ae4:	40006800 	.word	0x40006800

08000ae8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b098      	sub	sp, #96	@ 0x60
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2234      	movs	r2, #52	@ 0x34
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f007 fb5f 	bl	80081d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b1c:	4a4d      	ldr	r2, [pc, #308]	@ (8000c54 <MX_TIM1_Init+0x16c>)
 8000b1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b20:	4b4b      	ldr	r3, [pc, #300]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b4a      	ldr	r3, [pc, #296]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4721;
 8000b2c:	4b48      	ldr	r3, [pc, #288]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b2e:	f241 2271 	movw	r2, #4721	@ 0x1271
 8000b32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b46      	ldr	r3, [pc, #280]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3a:	4b45      	ldr	r3, [pc, #276]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b43      	ldr	r3, [pc, #268]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b46:	4842      	ldr	r0, [pc, #264]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b48:	f005 fc12 	bl	8006370 <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b52:	f000 f98f 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b56:	483e      	ldr	r0, [pc, #248]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b58:	f005 fa48 	bl	8005fec <HAL_TIM_OC_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000b62:	f000 f987 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b76:	4619      	mov	r1, r3
 8000b78:	4835      	ldr	r0, [pc, #212]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000b7a:	f006 fb4f 	bl	800721c <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000b84:	f000 f976 	bl	8000e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b88:	2360      	movs	r3, #96	@ 0x60
 8000b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b94:	2300      	movs	r3, #0
 8000b96:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4828      	ldr	r0, [pc, #160]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000bae:	f005 fdff 	bl	80067b0 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000bb8:	f000 f95c 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bbc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4822      	ldr	r0, [pc, #136]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000bc6:	f005 fdf3 	bl	80067b0 <HAL_TIM_PWM_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000bd0:	f000 f950 	bl	8000e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 2300;
 8000bd8:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000be2:	220c      	movs	r2, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	481a      	ldr	r0, [pc, #104]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000be8:	f005 fd68 	bl	80066bc <HAL_TIM_OC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000bf2:	f000 f93f 	bl	8000e74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	4807      	ldr	r0, [pc, #28]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000c34:	f006 fb88 	bl	8007348 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000c3e:	f000 f919 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c42:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <MX_TIM1_Init+0x168>)
 8000c44:	f000 fbee 	bl	8001424 <HAL_TIM_MspPostInit>

}
 8000c48:	bf00      	nop
 8000c4a:	3760      	adds	r7, #96	@ 0x60
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200001ac 	.word	0x200001ac
 8000c54:	40012c00 	.word	0x40012c00

08000c58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_TIM6_Init+0x64>)
 8000c6a:	4a15      	ldr	r2, [pc, #84]	@ (8000cc0 <MX_TIM6_Init+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <MX_TIM6_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_TIM6_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_TIM6_Init+0x64>)
 8000c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c80:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_TIM6_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <MX_TIM6_Init+0x64>)
 8000c8a:	f005 f8df 	bl	8005e4c <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c94:	f000 f8ee 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_TIM6_Init+0x64>)
 8000ca6:	f006 fab9 	bl	800721c <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cb0:	f000 f8e0 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200001f8 	.word	0x200001f8
 8000cc0:	40001000 	.word	0x40001000

08000cc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cca:	4a23      	ldr	r2, [pc, #140]	@ (8000d58 <MX_USART3_UART_Init+0x94>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cce:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d06:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d0c:	4811      	ldr	r0, [pc, #68]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d0e:	f006 fbf5 	bl	80074fc <HAL_UART_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d18:	f000 f8ac 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d20:	f007 f990 	bl	8008044 <HAL_UARTEx_SetTxFifoThreshold>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d2a:	f000 f8a3 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4808      	ldr	r0, [pc, #32]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d32:	f007 f9c5 	bl	80080c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d3c:	f000 f89a 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	@ (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d42:	f007 f946 	bl	8007fd2 <HAL_UARTEx_DisableFifoMode>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d4c:	f000 f892 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000244 	.word	0x20000244
 8000d58:	40004800 	.word	0x40004800

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	@ 0x28
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b3d      	ldr	r3, [pc, #244]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a3c      	ldr	r2, [pc, #240]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8a:	4b37      	ldr	r3, [pc, #220]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a36      	ldr	r2, [pc, #216]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000d90:	f043 0320 	orr.w	r3, r3, #32
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b34      	ldr	r3, [pc, #208]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0320 	and.w	r3, r3, #32
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b31      	ldr	r3, [pc, #196]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a30      	ldr	r2, [pc, #192]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b2e      	ldr	r3, [pc, #184]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b2b      	ldr	r3, [pc, #172]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b28      	ldr	r3, [pc, #160]	@ (8000e68 <MX_GPIO_Init+0x10c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000dd8:	4824      	ldr	r0, [pc, #144]	@ (8000e6c <MX_GPIO_Init+0x110>)
 8000dda:	f003 ffd5 	bl	8004d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GATE_GPIO_Port, RELAY_GATE_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de8:	f003 ffce 	bl	8004d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000dec:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4819      	ldr	r0, [pc, #100]	@ (8000e6c <MX_GPIO_Init+0x110>)
 8000e06:	f003 fe3d 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_Pin H2_Pin H3_Pin H4_Pin */
  GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin|H4_Pin;
 8000e0a:	23f0      	movs	r3, #240	@ 0xf0
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f003 fe30 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_GATE_Pin */
  GPIO_InitStruct.Pin = RELAY_GATE_Pin;
 8000e24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_GATE_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e40:	f003 fe20 	bl	8004a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : H5_Pin H6_Pin H7_Pin H8_Pin
                           USER_BTN_Pin */
  GPIO_InitStruct.Pin = H5_Pin|H6_Pin|H7_Pin|H8_Pin
 8000e44:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 8000e48:	617b      	str	r3, [r7, #20]
                          |USER_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_GPIO_Init+0x114>)
 8000e5a:	f003 fe13 	bl	8004a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000400 	.word	0x48000400

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <piUpdate>:
    pi->integral = 0.0f;
    pi->output = 0u;
}

unsigned int piUpdate(PIController_t* pi, float setpoint, float measurement)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e8c:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 8000e90:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc7 7a04 	vstr	s15, [r7, #16]
    pi->integral += error * pi->ki * pi->dt;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	edd3 6a01 	vldr	s13, [r3, #4]
 8000eac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	edc3 7a03 	vstr	s15, [r3, #12]

    // Антивиндап
    if (pi->integral > pi->outMax) pi->integral = pi->outMax;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	dd04      	ble.n	8000ee8 <piUpdate+0x68>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	e00e      	b.n	8000f06 <piUpdate+0x86>
    else if (pi->integral < pi->outMin) pi->integral = pi->outMin;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	ed93 7a03 	vldr	s14, [r3, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efc:	d503      	bpl.n	8000f06 <piUpdate+0x86>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	691a      	ldr	r2, [r3, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	60da      	str	r2, [r3, #12]

    unsigned int output = pi->kp * error + pi->integral;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	ed93 7a00 	vldr	s14, [r3]
 8000f0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f22:	ee17 3a90 	vmov	r3, s15
 8000f26:	617b      	str	r3, [r7, #20]

    // Ограничение выхода
    if (output > pi->outMax) output = pi->outMax;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	dd08      	ble.n	8000f54 <piUpdate+0xd4>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f4c:	ee17 3a90 	vmov	r3, s15
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e014      	b.n	8000f7e <piUpdate+0xfe>
    else if (output < pi->outMin) output = pi->outMin;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	d507      	bpl.n	8000f7e <piUpdate+0xfe>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f78:	ee17 3a90 	vmov	r3, s15
 8000f7c:	617b      	str	r3, [r7, #20]

    pi->output = output;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	619a      	str	r2, [r3, #24]
    return output;
 8000f84:	697b      	ldr	r3, [r7, #20]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <piReset>:

void piReset(PIController_t* pi)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
    pi->integral = 0.0f;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    pi->output = 0.0f;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <sensorRead>:
HAL_ADC_Start(&hadc1);
}


void sensorRead(void)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b08f      	sub	sp, #60	@ 0x3c
 8000fb8:	af00      	add	r7, sp, #0
uint32_t rawValues[5];


for (uint8_t i = 0; i < 5; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000fc0:	e02c      	b.n	800101c <sensorRead+0x68>
{
ADC_ChannelConfTypeDef sConfig = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f007 f905 	bl	80081d8 <memset>
sConfig.Channel = ADC_CHANNEL_0 + i;
 8000fce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	603b      	str	r3, [r7, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	60bb      	str	r3, [r7, #8]
HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4834      	ldr	r0, [pc, #208]	@ (80010b4 <sensorRead+0x100>)
 8000fe4:	f001 fa66 	bl	80024b4 <HAL_ADC_ConfigChannel>


HAL_ADC_Start(&hadc1);
 8000fe8:	4832      	ldr	r0, [pc, #200]	@ (80010b4 <sensorRead+0x100>)
 8000fea:	f001 f837 	bl	800205c <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc1, 10);
 8000fee:	210a      	movs	r1, #10
 8000ff0:	4830      	ldr	r0, [pc, #192]	@ (80010b4 <sensorRead+0x100>)
 8000ff2:	f001 f94b 	bl	800228c <HAL_ADC_PollForConversion>
rawValues[i] = HAL_ADC_GetValue(&hadc1);
 8000ff6:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8000ffa:	482e      	ldr	r0, [pc, #184]	@ (80010b4 <sensorRead+0x100>)
 8000ffc:	f001 fa4c 	bl	8002498 <HAL_ADC_GetValue>
 8001000:	4602      	mov	r2, r0
 8001002:	00a3      	lsls	r3, r4, #2
 8001004:	3338      	adds	r3, #56	@ 0x38
 8001006:	443b      	add	r3, r7
 8001008:	f843 2c18 	str.w	r2, [r3, #-24]
HAL_ADC_Stop(&hadc1);
 800100c:	4829      	ldr	r0, [pc, #164]	@ (80010b4 <sensorRead+0x100>)
 800100e:	f001 f909 	bl	8002224 <HAL_ADC_Stop>
for (uint8_t i = 0; i < 5; i++)
 8001012:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001016:	3301      	adds	r3, #1
 8001018:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800101c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001020:	2b04      	cmp	r3, #4
 8001022:	d9ce      	bls.n	8000fc2 <sensorRead+0xe>
}


// Преобразование ADC -> реальные значения
currentValues.currentIn    = (float)rawValues[0] * ADC_TO_CURRENT_COEFF_IN;
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80010b8 <sensorRead+0x104>
 8001032:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103a:	ee17 2a90 	vmov	r2, s15
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <sensorRead+0x108>)
 8001040:	601a      	str	r2, [r3, #0]
currentValues.currentOut   = (float)rawValues[1] * ADC_TO_CURRENT_COEFF_OUT;
 8001042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80010b8 <sensorRead+0x104>
 8001050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001058:	ee17 2a90 	vmov	r2, s15
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <sensorRead+0x108>)
 800105e:	605a      	str	r2, [r3, #4]
currentValues.currentChoke    = (float)rawValues[2] * ADC_TO_CURRENT_COEFF_CHOKE;
 8001060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80010b8 <sensorRead+0x104>
 800106e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001076:	ee17 2a90 	vmov	r2, s15
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <sensorRead+0x108>)
 800107c:	609a      	str	r2, [r3, #8]
currentValues.voltageIn    = (float)rawValues[3] * ADC_TO_VOLTAGE_COEFF_IN;
 800107e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108c:	ee17 2a90 	vmov	r2, s15
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <sensorRead+0x108>)
 8001092:	60da      	str	r2, [r3, #12]
currentValues.voltageOut   = (float)rawValues[4] * ADC_TO_VOLTAGE_COEFF_OUT;
 8001094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a2:	ee17 2a90 	vmov	r2, s15
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <sensorRead+0x108>)
 80010a8:	611a      	str	r2, [r3, #16]
}
 80010aa:	bf00      	nop
 80010ac:	373c      	adds	r7, #60	@ 0x3c
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000078 	.word	0x20000078
 80010b8:	3dcccccd 	.word	0x3dcccccd
 80010bc:	200002d8 	.word	0x200002d8

080010c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <HAL_MspInit+0x48>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001108 <HAL_MspInit+0x48>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <HAL_MspInit+0x48>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_MspInit+0x48>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e2:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <HAL_MspInit+0x48>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <HAL_MspInit+0x48>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80010f6:	2004      	movs	r0, #4
 80010f8:	f003 f81a 	bl	8004130 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010fc:	f003 ff1a 	bl	8004f34 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0a0      	sub	sp, #128	@ 0x80
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	2254      	movs	r2, #84	@ 0x54
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f007 f853 	bl	80081d8 <memset>
  if(hadc->Instance==ADC1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800113a:	d14d      	bne.n	80011d8 <HAL_ADC_MspInit+0xcc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800113c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001140:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001142:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001146:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	4618      	mov	r0, r3
 800114e:	f004 fc2f 	bl	80059b0 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001158:	f7ff fe8c 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <HAL_ADC_MspInit+0xd4>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a1f      	ldr	r2, [pc, #124]	@ (80011e0 <HAL_ADC_MspInit+0xd4>)
 8001162:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <HAL_ADC_MspInit+0xd4>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_ADC_MspInit+0xd4>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a19      	ldr	r2, [pc, #100]	@ (80011e0 <HAL_ADC_MspInit+0xd4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_ADC_MspInit+0xd4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_ADC_MspInit+0xd4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <HAL_ADC_MspInit+0xd4>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_ADC_MspInit+0xd4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011a4:	230f      	movs	r3, #15
 80011a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f003 fc63 	bl	8004a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c4:	2303      	movs	r3, #3
 80011c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011d0:	4619      	mov	r1, r3
 80011d2:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <HAL_ADC_MspInit+0xd8>)
 80011d4:	f003 fc56 	bl	8004a84 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011d8:	bf00      	nop
 80011da:	3780      	adds	r7, #128	@ 0x80
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400

080011e8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0a0      	sub	sp, #128	@ 0x80
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	2254      	movs	r2, #84	@ 0x54
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f006 ffe5 	bl	80081d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a59      	ldr	r2, [pc, #356]	@ (8001378 <HAL_FDCAN_MspInit+0x190>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d153      	bne.n	80012c0 <HAL_FDCAN_MspInit+0xd8>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800121e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001222:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4618      	mov	r0, r3
 800122a:	f004 fbc1 	bl	80059b0 <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001234:	f7ff fe1e 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001238:	4b50      	ldr	r3, [pc, #320]	@ (800137c <HAL_FDCAN_MspInit+0x194>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	4a4f      	ldr	r2, [pc, #316]	@ (800137c <HAL_FDCAN_MspInit+0x194>)
 8001240:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001242:	4b4e      	ldr	r3, [pc, #312]	@ (800137c <HAL_FDCAN_MspInit+0x194>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10b      	bne.n	8001262 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800124a:	4b4d      	ldr	r3, [pc, #308]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	4a4c      	ldr	r2, [pc, #304]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 8001250:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001254:	6593      	str	r3, [r2, #88]	@ 0x58
 8001256:	4b4a      	ldr	r3, [pc, #296]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b47      	ldr	r3, [pc, #284]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a46      	ldr	r2, [pc, #280]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b44      	ldr	r3, [pc, #272]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800127a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800127e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800128c:	2309      	movs	r3, #9
 800128e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129a:	f003 fbf3 	bl	8004a84 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2103      	movs	r1, #3
 80012a2:	2015      	movs	r0, #21
 80012a4:	f002 ff4f 	bl	8004146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80012a8:	2015      	movs	r0, #21
 80012aa:	f002 ff66 	bl	800417a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 3, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2103      	movs	r1, #3
 80012b2:	2016      	movs	r0, #22
 80012b4:	f002 ff47 	bl	8004146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80012b8:	2016      	movs	r0, #22
 80012ba:	f002 ff5e 	bl	800417a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80012be:	e056      	b.n	800136e <HAL_FDCAN_MspInit+0x186>
  else if(hfdcan->Instance==FDCAN2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001384 <HAL_FDCAN_MspInit+0x19c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d151      	bne.n	800136e <HAL_FDCAN_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80012d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012d4:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 fb68 	bl	80059b0 <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 80012e6:	f7ff fdc5 	bl	8000e74 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80012ea:	4b24      	ldr	r3, [pc, #144]	@ (800137c <HAL_FDCAN_MspInit+0x194>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a22      	ldr	r2, [pc, #136]	@ (800137c <HAL_FDCAN_MspInit+0x194>)
 80012f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <HAL_FDCAN_MspInit+0x194>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d10b      	bne.n	8001314 <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80012fc:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001300:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 8001302:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001306:	6593      	str	r3, [r2, #88]	@ 0x58
 8001308:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 800130a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	4a19      	ldr	r2, [pc, #100]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001320:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_FDCAN_MspInit+0x198>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800132c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001330:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800133e:	2309      	movs	r3, #9
 8001340:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001346:	4619      	mov	r1, r3
 8001348:	480f      	ldr	r0, [pc, #60]	@ (8001388 <HAL_FDCAN_MspInit+0x1a0>)
 800134a:	f003 fb9b 	bl	8004a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 3, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2103      	movs	r1, #3
 8001352:	2056      	movs	r0, #86	@ 0x56
 8001354:	f002 fef7 	bl	8004146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001358:	2056      	movs	r0, #86	@ 0x56
 800135a:	f002 ff0e 	bl	800417a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 3, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2103      	movs	r1, #3
 8001362:	2057      	movs	r0, #87	@ 0x57
 8001364:	f002 feef 	bl	8004146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001368:	2057      	movs	r0, #87	@ 0x57
 800136a:	f002 ff06 	bl	800417a <HAL_NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3780      	adds	r7, #128	@ 0x80
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40006400 	.word	0x40006400
 800137c:	200002ec 	.word	0x200002ec
 8001380:	40021000 	.word	0x40021000
 8001384:	40006800 	.word	0x40006800
 8001388:	48000400 	.word	0x48000400

0800138c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <HAL_TIM_PWM_MspInit+0x44>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d113      	bne.n	80013c6 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x48>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a2:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x48>)
 80013a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_TIM_PWM_MspInit+0x48>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2102      	movs	r1, #2
 80013ba:	201b      	movs	r0, #27
 80013bc:	f002 fec3 	bl	8004146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013c0:	201b      	movs	r0, #27
 80013c2:	f002 feda 	bl	800417a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40012c00 	.word	0x40012c00
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	@ (800141c <HAL_TIM_Base_MspInit+0x44>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d113      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <HAL_TIM_Base_MspInit+0x48>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <HAL_TIM_Base_MspInit+0x48>)
 80013f0:	f043 0310 	orr.w	r3, r3, #16
 80013f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <HAL_TIM_Base_MspInit+0x48>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 1);
 8001402:	2201      	movs	r2, #1
 8001404:	2102      	movs	r1, #2
 8001406:	2036      	movs	r0, #54	@ 0x36
 8001408:	f002 fe9d 	bl	8004146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800140c:	2036      	movs	r0, #54	@ 0x36
 800140e:	f002 feb4 	bl	800417a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40001000 	.word	0x40001000
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2e      	ldr	r2, [pc, #184]	@ (80014fc <HAL_TIM_MspPostInit+0xd8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d156      	bne.n	80014f4 <HAL_TIM_MspPostInit+0xd0>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b2e      	ldr	r3, [pc, #184]	@ (8001500 <HAL_TIM_MspPostInit+0xdc>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a2d      	ldr	r2, [pc, #180]	@ (8001500 <HAL_TIM_MspPostInit+0xdc>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b2b      	ldr	r3, [pc, #172]	@ (8001500 <HAL_TIM_MspPostInit+0xdc>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <HAL_TIM_MspPostInit+0xdc>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4a27      	ldr	r2, [pc, #156]	@ (8001500 <HAL_TIM_MspPostInit+0xdc>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4b25      	ldr	r3, [pc, #148]	@ (8001500 <HAL_TIM_MspPostInit+0xdc>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <HAL_TIM_MspPostInit+0xdc>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a21      	ldr	r2, [pc, #132]	@ (8001500 <HAL_TIM_MspPostInit+0xdc>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <HAL_TIM_MspPostInit+0xdc>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
    PC13     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800148e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80014a0:	2304      	movs	r3, #4
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4816      	ldr	r0, [pc, #88]	@ (8001504 <HAL_TIM_MspPostInit+0xe0>)
 80014ac:	f003 faea 	bl	8004a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014c0:	2306      	movs	r3, #6
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	480f      	ldr	r0, [pc, #60]	@ (8001508 <HAL_TIM_MspPostInit+0xe4>)
 80014cc:	f003 fada 	bl	8004a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014e2:	2306      	movs	r3, #6
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f0:	f003 fac8 	bl	8004a84 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	@ 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40012c00 	.word	0x40012c00
 8001500:	40021000 	.word	0x40021000
 8001504:	48000800 	.word	0x48000800
 8001508:	48000400 	.word	0x48000400

0800150c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b09e      	sub	sp, #120	@ 0x78
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2254      	movs	r2, #84	@ 0x54
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f006 fe53 	bl	80081d8 <memset>
  if(huart->Instance==USART3)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <HAL_UART_MspInit+0xa8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d136      	bne.n	80015aa <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800153c:	2304      	movs	r3, #4
 800153e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4618      	mov	r0, r3
 800154a:	f004 fa31 	bl	80059b0 <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001554:	f7ff fc8e 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_UART_MspInit+0xac>)
 800155a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155c:	4a16      	ldr	r2, [pc, #88]	@ (80015b8 <HAL_UART_MspInit+0xac>)
 800155e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001562:	6593      	str	r3, [r2, #88]	@ 0x58
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_UART_MspInit+0xac>)
 8001566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001568:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_UART_MspInit+0xac>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001574:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <HAL_UART_MspInit+0xac>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_UART_MspInit+0xac>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001588:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800158c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800159a:	2307      	movs	r3, #7
 800159c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <HAL_UART_MspInit+0xb0>)
 80015a6:	f003 fa6d 	bl	8004a84 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80015aa:	bf00      	nop
 80015ac:	3778      	adds	r7, #120	@ 0x78
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004800 	.word	0x40004800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000400 	.word	0x48000400

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 f8cd 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <FDCAN1_IT0_IRQHandler+0x10>)
 8001626:	f003 f825 	bl	8004674 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000e4 	.word	0x200000e4

08001634 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <FDCAN1_IT1_IRQHandler+0x10>)
 800163a:	f003 f81b 	bl	8004674 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200000e4 	.word	0x200000e4

08001648 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <TIM1_CC_IRQHandler+0x10>)
 800164e:	f004 fee6 	bl	800641e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200001ac 	.word	0x200001ac

0800165c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <TIM6_DAC_IRQHandler+0x10>)
 8001662:	f004 fedc 	bl	800641e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200001f8 	.word	0x200001f8

08001670 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <FDCAN2_IT0_IRQHandler+0x10>)
 8001676:	f002 fffd 	bl	8004674 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000148 	.word	0x20000148

08001684 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <FDCAN2_IT1_IRQHandler+0x10>)
 800168a:	f002 fff3 	bl	8004674 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000148 	.word	0x20000148

08001698 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016bc:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c0:	f7ff ffea 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c4:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	@ (80016fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <LoopForever+0xe>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001708 <LoopForever+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ea:	f006 fd7d 	bl	80081e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ee:	f7ff f835 	bl	800075c <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   r0, =_estack
 80016f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001700:	080082a8 	.word	0x080082a8
  ldr r2, =_sbss
 8001704:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001708:	200002f4 	.word	0x200002f4

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>

0800170e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f002 fd09 	bl	8004130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	2007      	movs	r0, #7
 8001720:	f000 f80e 	bl	8001740 <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e001      	b.n	8001734 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001730:	f7ff fcc6 	bl	80010c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001734:	79fb      	ldrb	r3, [r7, #7]

}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800174c:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <HAL_InitTick+0x68>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d022      	beq.n	800179a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_InitTick+0x6c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <HAL_InitTick+0x68>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001760:	fbb1 f3f3 	udiv	r3, r1, r3
 8001764:	fbb2 f3f3 	udiv	r3, r2, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fd14 	bl	8004196 <HAL_SYSTICK_Config>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10f      	bne.n	8001794 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b0f      	cmp	r3, #15
 8001778:	d809      	bhi.n	800178e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177a:	2200      	movs	r2, #0
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	f04f 30ff 	mov.w	r0, #4294967295
 8001782:	f002 fce0 	bl	8004146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <HAL_InitTick+0x70>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e007      	b.n	800179e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	e004      	b.n	800179e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000010 	.word	0x20000010
 80017ac:	20000008 	.word	0x20000008
 80017b0:	2000000c 	.word	0x2000000c

080017b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_IncTick+0x1c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_IncTick+0x20>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a03      	ldr	r2, [pc, #12]	@ (80017d0 <HAL_IncTick+0x1c>)
 80017c4:	6013      	str	r3, [r2, #0]
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	200002f0 	.word	0x200002f0
 80017d4:	20000010 	.word	0x20000010

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200002f0 	.word	0x200002f0

080017f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	609a      	str	r2, [r3, #8]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3360      	adds	r3, #96	@ 0x60
 800186a:	461a      	mov	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <LL_ADC_SetOffset+0x44>)
 800187a:	4013      	ands	r3, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	4313      	orrs	r3, r2
 8001888:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	03fff000 	.word	0x03fff000

080018a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3360      	adds	r3, #96	@ 0x60
 80018ae:	461a      	mov	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3360      	adds	r3, #96	@ 0x60
 80018dc:	461a      	mov	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001902:	b480      	push	{r7}
 8001904:	b087      	sub	sp, #28
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3360      	adds	r3, #96	@ 0x60
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	431a      	orrs	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800192c:	bf00      	nop
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3360      	adds	r3, #96	@ 0x60
 8001948:	461a      	mov	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	615a      	str	r2, [r3, #20]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b087      	sub	sp, #28
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3330      	adds	r3, #48	@ 0x30
 80019ca:	461a      	mov	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	4413      	add	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	211f      	movs	r1, #31
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	f003 011f 	and.w	r1, r3, #31
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b087      	sub	sp, #28
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3314      	adds	r3, #20
 8001a22:	461a      	mov	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	0e5b      	lsrs	r3, r3, #25
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	0d1b      	lsrs	r3, r3, #20
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	2107      	movs	r1, #7
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	401a      	ands	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	0d1b      	lsrs	r3, r3, #20
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	431a      	orrs	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a5c:	bf00      	nop
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	43db      	mvns	r3, r3
 8001a82:	401a      	ands	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0318 	and.w	r3, r3, #24
 8001a8a:	4908      	ldr	r1, [pc, #32]	@ (8001aac <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a8c:	40d9      	lsrs	r1, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	400b      	ands	r3, r1
 8001a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	0007ffff 	.word	0x0007ffff

08001ab0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 031f 	and.w	r3, r3, #31
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6093      	str	r3, [r2, #8]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b20:	d101      	bne.n	8001b26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc0:	f043 0202 	orr.w	r2, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <LL_ADC_IsEnabled+0x18>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <LL_ADC_IsEnabled+0x1a>
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d101      	bne.n	8001c12 <LL_ADC_IsDisableOngoing+0x18>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_ADC_IsDisableOngoing+0x1a>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c5c:	f043 0210 	orr.w	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d101      	bne.n	8001c88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ca6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001caa:	f043 0220 	orr.w	r2, r3, #32
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d101      	bne.n	8001cd6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e1a9      	b.n	8002052 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff f9fd 	bl	800110c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fef1 	bl	8001b0c <LL_ADC_IsDeepPowerDownEnabled>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fed7 	bl	8001ae8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff0c 	bl	8001b5c <LL_ADC_IsInternalRegulatorEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d115      	bne.n	8001d76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fef0 	bl	8001b34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d54:	4b9c      	ldr	r3, [pc, #624]	@ (8001fc8 <HAL_ADC_Init+0x2e4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	4a9c      	ldr	r2, [pc, #624]	@ (8001fcc <HAL_ADC_Init+0x2e8>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff feee 	bl	8001b5c <LL_ADC_IsInternalRegulatorEnabled>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff62 	bl	8001c70 <LL_ADC_REG_IsConversionOngoing>
 8001dac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 8142 	bne.w	8002040 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 813e 	bne.w	8002040 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dcc:	f043 0202 	orr.w	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fefb 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d141      	bne.n	8001e68 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dec:	d004      	beq.n	8001df8 <HAL_ADC_Init+0x114>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a77      	ldr	r2, [pc, #476]	@ (8001fd0 <HAL_ADC_Init+0x2ec>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d10f      	bne.n	8001e18 <HAL_ADC_Init+0x134>
 8001df8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001dfc:	f7ff feea 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001e00:	4604      	mov	r4, r0
 8001e02:	4873      	ldr	r0, [pc, #460]	@ (8001fd0 <HAL_ADC_Init+0x2ec>)
 8001e04:	f7ff fee6 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e012      	b.n	8001e3e <HAL_ADC_Init+0x15a>
 8001e18:	486e      	ldr	r0, [pc, #440]	@ (8001fd4 <HAL_ADC_Init+0x2f0>)
 8001e1a:	f7ff fedb 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001e1e:	4604      	mov	r4, r0
 8001e20:	486d      	ldr	r0, [pc, #436]	@ (8001fd8 <HAL_ADC_Init+0x2f4>)
 8001e22:	f7ff fed7 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001e26:	4603      	mov	r3, r0
 8001e28:	431c      	orrs	r4, r3
 8001e2a:	486c      	ldr	r0, [pc, #432]	@ (8001fdc <HAL_ADC_Init+0x2f8>)
 8001e2c:	f7ff fed2 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4323      	orrs	r3, r4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d012      	beq.n	8001e68 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e4a:	d004      	beq.n	8001e56 <HAL_ADC_Init+0x172>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a5f      	ldr	r2, [pc, #380]	@ (8001fd0 <HAL_ADC_Init+0x2ec>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x176>
 8001e56:	4a62      	ldr	r2, [pc, #392]	@ (8001fe0 <HAL_ADC_Init+0x2fc>)
 8001e58:	e000      	b.n	8001e5c <HAL_ADC_Init+0x178>
 8001e5a:	4a62      	ldr	r2, [pc, #392]	@ (8001fe4 <HAL_ADC_Init+0x300>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7ff fcc4 	bl	80017f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7f5b      	ldrb	r3, [r3, #29]
 8001e6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d106      	bne.n	8001ea4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	045b      	lsls	r3, r3, #17
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	4b48      	ldr	r3, [pc, #288]	@ (8001fe8 <HAL_ADC_Init+0x304>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	69b9      	ldr	r1, [r7, #24]
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fee5 	bl	8001cbe <LL_ADC_INJ_IsConversionOngoing>
 8001ef4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d17f      	bne.n	8001ffc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d17c      	bne.n	8001ffc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f06:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f0e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f1e:	f023 0302 	bic.w	r3, r3, #2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d017      	beq.n	8001f64 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6911      	ldr	r1, [r2, #16]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f62:	e013      	b.n	8001f8c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d12a      	bne.n	8001fec <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fac:	4311      	orrs	r1, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
 8001fc6:	e019      	b.n	8001ffc <HAL_ADC_Init+0x318>
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	053e2d63 	.word	0x053e2d63
 8001fd0:	50000100 	.word	0x50000100
 8001fd4:	50000400 	.word	0x50000400
 8001fd8:	50000500 	.word	0x50000500
 8001fdc:	50000600 	.word	0x50000600
 8001fe0:	50000300 	.word	0x50000300
 8001fe4:	50000700 	.word	0x50000700
 8001fe8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d10c      	bne.n	800201e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f023 010f 	bic.w	r1, r3, #15
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	1e5a      	subs	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
 800201c:	e007      	b.n	800202e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 020f 	bic.w	r2, r2, #15
 800202c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002032:	f023 0303 	bic.w	r3, r3, #3
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800203e:	e007      	b.n	8002050 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002044:	f043 0210 	orr.w	r2, r3, #16
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002050:	7ffb      	ldrb	r3, [r7, #31]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd90      	pop	{r4, r7, pc}
 800205a:	bf00      	nop

0800205c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800206c:	d004      	beq.n	8002078 <HAL_ADC_Start+0x1c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a67      	ldr	r2, [pc, #412]	@ (8002210 <HAL_ADC_Start+0x1b4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_ADC_Start+0x20>
 8002078:	4b66      	ldr	r3, [pc, #408]	@ (8002214 <HAL_ADC_Start+0x1b8>)
 800207a:	e000      	b.n	800207e <HAL_ADC_Start+0x22>
 800207c:	4b66      	ldr	r3, [pc, #408]	@ (8002218 <HAL_ADC_Start+0x1bc>)
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fd16 	bl	8001ab0 <LL_ADC_GetMultimode>
 8002084:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fdf0 	bl	8001c70 <LL_ADC_REG_IsConversionOngoing>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 80b4 	bne.w	8002200 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Start+0x4a>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0af      	b.n	8002206 <HAL_ADC_Start+0x1aa>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fefc 	bl	8002eac <ADC_Enable>
 80020b4:	4603      	mov	r3, r0
 80020b6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 809b 	bne.w	80021f6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002210 <HAL_ADC_Start+0x1b4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d009      	beq.n	80020f2 <HAL_ADC_Start+0x96>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a4e      	ldr	r2, [pc, #312]	@ (800221c <HAL_ADC_Start+0x1c0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d002      	beq.n	80020ee <HAL_ADC_Start+0x92>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	e003      	b.n	80020f6 <HAL_ADC_Start+0x9a>
 80020ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002220 <HAL_ADC_Start+0x1c4>)
 80020f0:	e001      	b.n	80020f6 <HAL_ADC_Start+0x9a>
 80020f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d002      	beq.n	8002104 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002108:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002114:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211c:	d106      	bne.n	800212c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	f023 0206 	bic.w	r2, r3, #6
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	661a      	str	r2, [r3, #96]	@ 0x60
 800212a:	e002      	b.n	8002132 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	221c      	movs	r2, #28
 8002138:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a32      	ldr	r2, [pc, #200]	@ (8002210 <HAL_ADC_Start+0x1b4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_ADC_Start+0x104>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a32      	ldr	r2, [pc, #200]	@ (800221c <HAL_ADC_Start+0x1c0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d002      	beq.n	800215c <HAL_ADC_Start+0x100>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	e003      	b.n	8002164 <HAL_ADC_Start+0x108>
 800215c:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <HAL_ADC_Start+0x1c4>)
 800215e:	e001      	b.n	8002164 <HAL_ADC_Start+0x108>
 8002160:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4293      	cmp	r3, r2
 800216a:	d008      	beq.n	800217e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d002      	beq.n	800217e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b09      	cmp	r3, #9
 800217c:	d114      	bne.n	80021a8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002190:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002194:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fd3d 	bl	8001c20 <LL_ADC_REG_StartConversion>
 80021a6:	e02d      	b.n	8002204 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a15      	ldr	r2, [pc, #84]	@ (8002210 <HAL_ADC_Start+0x1b4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d009      	beq.n	80021d2 <HAL_ADC_Start+0x176>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a16      	ldr	r2, [pc, #88]	@ (800221c <HAL_ADC_Start+0x1c0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d002      	beq.n	80021ce <HAL_ADC_Start+0x172>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	e003      	b.n	80021d6 <HAL_ADC_Start+0x17a>
 80021ce:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <HAL_ADC_Start+0x1c4>)
 80021d0:	e001      	b.n	80021d6 <HAL_ADC_Start+0x17a>
 80021d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021d6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00f      	beq.n	8002204 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021f4:	e006      	b.n	8002204 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80021fe:	e001      	b.n	8002204 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002204:	7dfb      	ldrb	r3, [r7, #23]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	50000100 	.word	0x50000100
 8002214:	50000300 	.word	0x50000300
 8002218:	50000700 	.word	0x50000700
 800221c:	50000500 	.word	0x50000500
 8002220:	50000400 	.word	0x50000400

08002224 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_Stop+0x16>
 8002236:	2302      	movs	r3, #2
 8002238:	e023      	b.n	8002282 <HAL_ADC_Stop+0x5e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002242:	2103      	movs	r1, #3
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fd75 	bl	8002d34 <ADC_ConversionStop>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d111      	bne.n	8002278 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 febf 	bl	8002fd8 <ADC_Disable>
 800225a:	4603      	mov	r3, r0
 800225c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800229e:	d004      	beq.n	80022aa <HAL_ADC_PollForConversion+0x1e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a77      	ldr	r2, [pc, #476]	@ (8002484 <HAL_ADC_PollForConversion+0x1f8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_PollForConversion+0x22>
 80022aa:	4b77      	ldr	r3, [pc, #476]	@ (8002488 <HAL_ADC_PollForConversion+0x1fc>)
 80022ac:	e000      	b.n	80022b0 <HAL_ADC_PollForConversion+0x24>
 80022ae:	4b77      	ldr	r3, [pc, #476]	@ (800248c <HAL_ADC_PollForConversion+0x200>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fbfd 	bl	8001ab0 <LL_ADC_GetMultimode>
 80022b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d102      	bne.n	80022c6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80022c0:	2308      	movs	r3, #8
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	e037      	b.n	8002336 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d002      	beq.n	80022d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d111      	bne.n	80022fc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0c1      	b.n	800247a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022f6:	2304      	movs	r3, #4
 80022f8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022fa:	e01c      	b.n	8002336 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002304:	d004      	beq.n	8002310 <HAL_ADC_PollForConversion+0x84>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5e      	ldr	r2, [pc, #376]	@ (8002484 <HAL_ADC_PollForConversion+0x1f8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <HAL_ADC_PollForConversion+0x88>
 8002310:	4b5d      	ldr	r3, [pc, #372]	@ (8002488 <HAL_ADC_PollForConversion+0x1fc>)
 8002312:	e000      	b.n	8002316 <HAL_ADC_PollForConversion+0x8a>
 8002314:	4b5d      	ldr	r3, [pc, #372]	@ (800248c <HAL_ADC_PollForConversion+0x200>)
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fbd8 	bl	8001acc <LL_ADC_GetMultiDMATransfer>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0a3      	b.n	800247a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002332:	2304      	movs	r3, #4
 8002334:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002336:	f7ff fa4f 	bl	80017d8 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800233c:	e021      	b.n	8002382 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d01d      	beq.n	8002382 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002346:	f7ff fa47 	bl	80017d8 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d302      	bcc.n	800235c <HAL_ADC_PollForConversion+0xd0>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d112      	bne.n	8002382 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10b      	bne.n	8002382 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e07b      	b.n	800247a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0d6      	beq.n	800233e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002394:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff faf7 	bl	8001994 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01c      	beq.n	80023e6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7f5b      	ldrb	r3, [r3, #29]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d118      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d111      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a26      	ldr	r2, [pc, #152]	@ (8002484 <HAL_ADC_PollForConversion+0x1f8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d009      	beq.n	8002404 <HAL_ADC_PollForConversion+0x178>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a26      	ldr	r2, [pc, #152]	@ (8002490 <HAL_ADC_PollForConversion+0x204>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d002      	beq.n	8002400 <HAL_ADC_PollForConversion+0x174>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	e003      	b.n	8002408 <HAL_ADC_PollForConversion+0x17c>
 8002400:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <HAL_ADC_PollForConversion+0x208>)
 8002402:	e001      	b.n	8002408 <HAL_ADC_PollForConversion+0x17c>
 8002404:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	4293      	cmp	r3, r2
 800240e:	d008      	beq.n	8002422 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d002      	beq.n	8002422 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b09      	cmp	r3, #9
 8002420:	d104      	bne.n	800242c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	e014      	b.n	8002456 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <HAL_ADC_PollForConversion+0x1f8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_ADC_PollForConversion+0x1be>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a15      	ldr	r2, [pc, #84]	@ (8002490 <HAL_ADC_PollForConversion+0x204>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d002      	beq.n	8002446 <HAL_ADC_PollForConversion+0x1ba>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	e003      	b.n	800244e <HAL_ADC_PollForConversion+0x1c2>
 8002446:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <HAL_ADC_PollForConversion+0x208>)
 8002448:	e001      	b.n	800244e <HAL_ADC_PollForConversion+0x1c2>
 800244a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800244e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d104      	bne.n	8002466 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2208      	movs	r2, #8
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e008      	b.n	8002478 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d103      	bne.n	8002478 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	220c      	movs	r2, #12
 8002476:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	50000100 	.word	0x50000100
 8002488:	50000300 	.word	0x50000300
 800248c:	50000700 	.word	0x50000700
 8002490:	50000500 	.word	0x50000500
 8002494:	50000400 	.word	0x50000400

08002498 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0b6      	sub	sp, #216	@ 0xd8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d102      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x24>
 80024d2:	2302      	movs	r3, #2
 80024d4:	f000 bc13 	b.w	8002cfe <HAL_ADC_ConfigChannel+0x84a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fbc3 	bl	8001c70 <LL_ADC_REG_IsConversionOngoing>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f040 83f3 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	f7ff fa5b 	bl	80019ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fbb1 	bl	8001c70 <LL_ADC_REG_IsConversionOngoing>
 800250e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fbd1 	bl	8001cbe <LL_ADC_INJ_IsConversionOngoing>
 800251c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002520:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 81d9 	bne.w	80028dc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800252a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 81d4 	bne.w	80028dc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800253c:	d10f      	bne.n	800255e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	4619      	mov	r1, r3
 800254a:	f7ff fa62 	bl	8001a12 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fa09 	bl	800196e <LL_ADC_SetSamplingTimeCommonConfig>
 800255c:	e00e      	b.n	800257c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	461a      	mov	r2, r3
 800256c:	f7ff fa51 	bl	8001a12 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f9f9 	bl	800196e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d022      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6919      	ldr	r1, [r3, #16]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025ae:	f7ff f953 	bl	8001858 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6919      	ldr	r1, [r3, #16]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	461a      	mov	r2, r3
 80025c0:	f7ff f99f 	bl	8001902 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d102      	bne.n	80025da <HAL_ADC_ConfigChannel+0x126>
 80025d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d8:	e000      	b.n	80025dc <HAL_ADC_ConfigChannel+0x128>
 80025da:	2300      	movs	r3, #0
 80025dc:	461a      	mov	r2, r3
 80025de:	f7ff f9ab 	bl	8001938 <LL_ADC_SetOffsetSaturation>
 80025e2:	e17b      	b.n	80028dc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f958 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x15c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff f94d 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	f003 021f 	and.w	r2, r3, #31
 800260e:	e01e      	b.n	800264e <HAL_ADC_ConfigChannel+0x19a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f942 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800262e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002632:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002636:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e004      	b.n	800264c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	2b00      	cmp	r3, #0
 8002658:	d105      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x1b2>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0e9b      	lsrs	r3, r3, #26
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	e018      	b.n	8002698 <HAL_ADC_ConfigChannel+0x1e4>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800267a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800267e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e004      	b.n	8002698 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800268e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff f911 	bl	80018cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2101      	movs	r1, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f8f5 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x222>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f8ea 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 80026cc:	4603      	mov	r3, r0
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	e01e      	b.n	8002714 <HAL_ADC_ConfigChannel+0x260>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2101      	movs	r1, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff f8df 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80026f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80026fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002704:	2320      	movs	r3, #32
 8002706:	e004      	b.n	8002712 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <HAL_ADC_ConfigChannel+0x278>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	e018      	b.n	800275e <HAL_ADC_ConfigChannel+0x2aa>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002740:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002748:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e004      	b.n	800275e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002754:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800275e:	429a      	cmp	r2, r3
 8002760:	d106      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2200      	movs	r2, #0
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f8ae 	bl	80018cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2102      	movs	r1, #2
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f892 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <HAL_ADC_ConfigChannel+0x2e8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2102      	movs	r1, #2
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f887 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	0e9b      	lsrs	r3, r3, #26
 8002796:	f003 021f 	and.w	r2, r3, #31
 800279a:	e01e      	b.n	80027da <HAL_ADC_ConfigChannel+0x326>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2102      	movs	r1, #2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f87c 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80027ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80027c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e004      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80027ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x33e>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0e9b      	lsrs	r3, r3, #26
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	e016      	b.n	8002820 <HAL_ADC_ConfigChannel+0x36c>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002804:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800280a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e004      	b.n	8002820 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002816:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	2102      	movs	r1, #2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff f84d 	bl	80018cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2103      	movs	r1, #3
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff f831 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_ADC_ConfigChannel+0x3aa>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2103      	movs	r1, #3
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f826 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	e017      	b.n	800288e <HAL_ADC_ConfigChannel+0x3da>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2103      	movs	r1, #3
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff f81b 	bl	80018a0 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002878:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800287a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002880:	2320      	movs	r3, #32
 8002882:	e003      	b.n	800288c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x3f2>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0e9b      	lsrs	r3, r3, #26
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	e011      	b.n	80028ca <HAL_ADC_ConfigChannel+0x416>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80028b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80028b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80028be:	2320      	movs	r3, #32
 80028c0:	e003      	b.n	80028ca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80028c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d106      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2103      	movs	r1, #3
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fff8 	bl	80018cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f977 	bl	8001bd4 <LL_ADC_IsEnabled>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 813d 	bne.w	8002b68 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f7ff f8b4 	bl	8001a68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4aa2      	ldr	r2, [pc, #648]	@ (8002b90 <HAL_ADC_ConfigChannel+0x6dc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	f040 812e 	bne.w	8002b68 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x480>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	3301      	adds	r3, #1
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	2b09      	cmp	r3, #9
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e019      	b.n	8002968 <HAL_ADC_ConfigChannel+0x4b4>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002942:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002944:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002946:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800294c:	2320      	movs	r3, #32
 800294e:	e003      	b.n	8002958 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002950:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2b09      	cmp	r3, #9
 8002960:	bf94      	ite	ls
 8002962:	2301      	movls	r3, #1
 8002964:	2300      	movhi	r3, #0
 8002966:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002968:	2b00      	cmp	r3, #0
 800296a:	d079      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x4d4>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	3301      	adds	r3, #1
 8002980:	069b      	lsls	r3, r3, #26
 8002982:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002986:	e015      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x500>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002998:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800299a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e003      	b.n	80029ac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80029a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	069b      	lsls	r3, r3, #26
 80029b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x520>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	3301      	adds	r3, #1
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	e017      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x550>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80029e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80029e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80029f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	ea42 0103 	orr.w	r1, r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x576>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	051b      	lsls	r3, r3, #20
 8002a28:	e018      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x5a8>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002a42:	2320      	movs	r3, #32
 8002a44:	e003      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	e07e      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x5c8>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	3301      	adds	r3, #1
 8002a74:	069b      	lsls	r3, r3, #26
 8002a76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a7a:	e015      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x5f4>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	069b      	lsls	r3, r3, #26
 8002aa4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x614>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	e017      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x644>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	ea42 0103 	orr.w	r1, r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10d      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x670>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b1e      	subs	r3, #30
 8002b1c:	051b      	lsls	r3, r3, #20
 8002b1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	e01b      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x6a8>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	613b      	str	r3, [r7, #16]
  return result;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e003      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f003 021f 	and.w	r2, r3, #31
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	3b1e      	subs	r3, #30
 8002b56:	051b      	lsls	r3, r3, #20
 8002b58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b5c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b62:	4619      	mov	r1, r3
 8002b64:	f7fe ff55 	bl	8001a12 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_ADC_ConfigChannel+0x6e0>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80be 	beq.w	8002cf2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b7e:	d004      	beq.n	8002b8a <HAL_ADC_ConfigChannel+0x6d6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <HAL_ADC_ConfigChannel+0x6e4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d10a      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x6ec>
 8002b8a:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <HAL_ADC_ConfigChannel+0x6e8>)
 8002b8c:	e009      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x6ee>
 8002b8e:	bf00      	nop
 8002b90:	407f0000 	.word	0x407f0000
 8002b94:	80080000 	.word	0x80080000
 8002b98:	50000100 	.word	0x50000100
 8002b9c:	50000300 	.word	0x50000300
 8002ba0:	4b59      	ldr	r3, [pc, #356]	@ (8002d08 <HAL_ADC_ConfigChannel+0x854>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fe4a 	bl	800183c <LL_ADC_GetCommonPathInternalCh>
 8002ba8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a56      	ldr	r2, [pc, #344]	@ (8002d0c <HAL_ADC_ConfigChannel+0x858>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <HAL_ADC_ConfigChannel+0x70c>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a55      	ldr	r2, [pc, #340]	@ (8002d10 <HAL_ADC_ConfigChannel+0x85c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d13a      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d134      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd4:	d005      	beq.n	8002be2 <HAL_ADC_ConfigChannel+0x72e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a4e      	ldr	r2, [pc, #312]	@ (8002d14 <HAL_ADC_ConfigChannel+0x860>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	f040 8085 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bea:	d004      	beq.n	8002bf6 <HAL_ADC_ConfigChannel+0x742>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a49      	ldr	r2, [pc, #292]	@ (8002d18 <HAL_ADC_ConfigChannel+0x864>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x746>
 8002bf6:	4a49      	ldr	r2, [pc, #292]	@ (8002d1c <HAL_ADC_ConfigChannel+0x868>)
 8002bf8:	e000      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x748>
 8002bfa:	4a43      	ldr	r2, [pc, #268]	@ (8002d08 <HAL_ADC_ConfigChannel+0x854>)
 8002bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f7fe fe05 	bl	8001816 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c0c:	4b44      	ldr	r3, [pc, #272]	@ (8002d20 <HAL_ADC_ConfigChannel+0x86c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	4a44      	ldr	r2, [pc, #272]	@ (8002d24 <HAL_ADC_ConfigChannel+0x870>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c26:	e002      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f9      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c34:	e05a      	b.n	8002cec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d28 <HAL_ADC_ConfigChannel+0x874>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d125      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11f      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a31      	ldr	r2, [pc, #196]	@ (8002d18 <HAL_ADC_ConfigChannel+0x864>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d104      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x7ac>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a34      	ldr	r2, [pc, #208]	@ (8002d2c <HAL_ADC_ConfigChannel+0x878>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d047      	beq.n	8002cf0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c68:	d004      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x7c0>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002d18 <HAL_ADC_ConfigChannel+0x864>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x7c4>
 8002c74:	4a29      	ldr	r2, [pc, #164]	@ (8002d1c <HAL_ADC_ConfigChannel+0x868>)
 8002c76:	e000      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x7c6>
 8002c78:	4a23      	ldr	r2, [pc, #140]	@ (8002d08 <HAL_ADC_ConfigChannel+0x854>)
 8002c7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f7fe fdc6 	bl	8001816 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c8a:	e031      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a27      	ldr	r2, [pc, #156]	@ (8002d30 <HAL_ADC_ConfigChannel+0x87c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d12d      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d127      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <HAL_ADC_ConfigChannel+0x864>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d022      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb4:	d004      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x80c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a17      	ldr	r2, [pc, #92]	@ (8002d18 <HAL_ADC_ConfigChannel+0x864>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x810>
 8002cc0:	4a16      	ldr	r2, [pc, #88]	@ (8002d1c <HAL_ADC_ConfigChannel+0x868>)
 8002cc2:	e000      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x812>
 8002cc4:	4a10      	ldr	r2, [pc, #64]	@ (8002d08 <HAL_ADC_ConfigChannel+0x854>)
 8002cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f7fe fda0 	bl	8001816 <LL_ADC_SetCommonPathInternalCh>
 8002cd6:	e00c      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002cea:	e002      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cec:	bf00      	nop
 8002cee:	e000      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cfa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	37d8      	adds	r7, #216	@ 0xd8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	50000700 	.word	0x50000700
 8002d0c:	c3210000 	.word	0xc3210000
 8002d10:	90c00010 	.word	0x90c00010
 8002d14:	50000600 	.word	0x50000600
 8002d18:	50000100 	.word	0x50000100
 8002d1c:	50000300 	.word	0x50000300
 8002d20:	20000008 	.word	0x20000008
 8002d24:	053e2d63 	.word	0x053e2d63
 8002d28:	c7520000 	.word	0xc7520000
 8002d2c:	50000500 	.word	0x50000500
 8002d30:	cb840000 	.word	0xcb840000

08002d34 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe ff90 	bl	8001c70 <LL_ADC_REG_IsConversionOngoing>
 8002d50:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe ffb1 	bl	8001cbe <LL_ADC_INJ_IsConversionOngoing>
 8002d5c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8098 	beq.w	8002e9c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d02a      	beq.n	8002dd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7f5b      	ldrb	r3, [r3, #29]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d126      	bne.n	8002dd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7f1b      	ldrb	r3, [r3, #28]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d122      	bne.n	8002dd0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d8e:	e014      	b.n	8002dba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4a45      	ldr	r2, [pc, #276]	@ (8002ea8 <ADC_ConversionStop+0x174>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d90d      	bls.n	8002db4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9c:	f043 0210 	orr.w	r2, r3, #16
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e074      	b.n	8002e9e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	3301      	adds	r3, #1
 8002db8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b40      	cmp	r3, #64	@ 0x40
 8002dc6:	d1e3      	bne.n	8002d90 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2240      	movs	r2, #64	@ 0x40
 8002dce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d014      	beq.n	8002e00 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe ff48 	bl	8001c70 <LL_ADC_REG_IsConversionOngoing>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe ff05 	bl	8001bfa <LL_ADC_IsDisableOngoing>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe ff24 	bl	8001c48 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d014      	beq.n	8002e30 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe ff57 	bl	8001cbe <LL_ADC_INJ_IsConversionOngoing>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe feed 	bl	8001bfa <LL_ADC_IsDisableOngoing>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe ff33 	bl	8001c96 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d005      	beq.n	8002e42 <ADC_ConversionStop+0x10e>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d105      	bne.n	8002e48 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	617b      	str	r3, [r7, #20]
        break;
 8002e40:	e005      	b.n	8002e4e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e42:	2308      	movs	r3, #8
 8002e44:	617b      	str	r3, [r7, #20]
        break;
 8002e46:	e002      	b.n	8002e4e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	617b      	str	r3, [r7, #20]
        break;
 8002e4c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e4e:	f7fe fcc3 	bl	80017d8 <HAL_GetTick>
 8002e52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e54:	e01b      	b.n	8002e8e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e56:	f7fe fcbf 	bl	80017d8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d914      	bls.n	8002e8e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e007      	b.n	8002e9e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1dc      	bne.n	8002e56 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	a33fffff 	.word	0xa33fffff

08002eac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fe89 	bl	8001bd4 <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d176      	bne.n	8002fb6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc0 <ADC_Enable+0x114>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e062      	b.n	8002fb8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fe44 	bl	8001b84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f04:	d004      	beq.n	8002f10 <ADC_Enable+0x64>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc4 <ADC_Enable+0x118>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <ADC_Enable+0x68>
 8002f10:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc8 <ADC_Enable+0x11c>)
 8002f12:	e000      	b.n	8002f16 <ADC_Enable+0x6a>
 8002f14:	4b2d      	ldr	r3, [pc, #180]	@ (8002fcc <ADC_Enable+0x120>)
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fc90 	bl	800183c <LL_ADC_GetCommonPathInternalCh>
 8002f1c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d013      	beq.n	8002f4e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f26:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd0 <ADC_Enable+0x124>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	4a29      	ldr	r2, [pc, #164]	@ (8002fd4 <ADC_Enable+0x128>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f40:	e002      	b.n	8002f48 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f9      	bne.n	8002f42 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fc43 	bl	80017d8 <HAL_GetTick>
 8002f52:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f54:	e028      	b.n	8002fa8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fe3a 	bl	8001bd4 <LL_ADC_IsEnabled>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d104      	bne.n	8002f70 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fe0a 	bl	8001b84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f70:	f7fe fc32 	bl	80017d8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d914      	bls.n	8002fa8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d00d      	beq.n	8002fa8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f90:	f043 0210 	orr.w	r2, r3, #16
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d1cf      	bne.n	8002f56 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	8000003f 	.word	0x8000003f
 8002fc4:	50000100 	.word	0x50000100
 8002fc8:	50000300 	.word	0x50000300
 8002fcc:	50000700 	.word	0x50000700
 8002fd0:	20000008 	.word	0x20000008
 8002fd4:	053e2d63 	.word	0x053e2d63

08002fd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe fe08 	bl	8001bfa <LL_ADC_IsDisableOngoing>
 8002fea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fdef 	bl	8001bd4 <LL_ADC_IsEnabled>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d047      	beq.n	800308c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d144      	bne.n	800308c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030d 	and.w	r3, r3, #13
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10c      	bne.n	800302a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fdc9 	bl	8001bac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2203      	movs	r2, #3
 8003020:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003022:	f7fe fbd9 	bl	80017d8 <HAL_GetTick>
 8003026:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003028:	e029      	b.n	800307e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	f043 0210 	orr.w	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e023      	b.n	800308e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003046:	f7fe fbc7 	bl	80017d8 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d914      	bls.n	800307e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	f043 0210 	orr.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e007      	b.n	800308e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1dc      	bne.n	8003046 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <LL_ADC_SetCommonPathInternalCh>:
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_GetCommonPathInternalCh>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_SetOffset>:
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3360      	adds	r3, #96	@ 0x60
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b08      	ldr	r3, [pc, #32]	@ (800311c <LL_ADC_SetOffset+0x44>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	4313      	orrs	r3, r2
 8003108:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	601a      	str	r2, [r3, #0]
}
 8003110:	bf00      	nop
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	03fff000 	.word	0x03fff000

08003120 <LL_ADC_GetOffsetChannel>:
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3360      	adds	r3, #96	@ 0x60
 800312e:	461a      	mov	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_SetOffsetState>:
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3360      	adds	r3, #96	@ 0x60
 800315c:	461a      	mov	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	431a      	orrs	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	601a      	str	r2, [r3, #0]
}
 8003176:	bf00      	nop
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_ADC_SetOffsetSign>:
{
 8003182:	b480      	push	{r7}
 8003184:	b087      	sub	sp, #28
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3360      	adds	r3, #96	@ 0x60
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_SetOffsetSaturation>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3360      	adds	r3, #96	@ 0x60
 80031c8:	461a      	mov	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	431a      	orrs	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	601a      	str	r2, [r3, #0]
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	615a      	str	r2, [r3, #20]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_SetChannelSamplingTime>:
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3314      	adds	r3, #20
 8003224:	461a      	mov	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	0e5b      	lsrs	r3, r3, #25
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	4413      	add	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	0d1b      	lsrs	r3, r3, #20
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	2107      	movs	r1, #7
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	401a      	ands	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	0d1b      	lsrs	r3, r3, #20
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	431a      	orrs	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	601a      	str	r2, [r3, #0]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <LL_ADC_SetChannelSingleDiff>:
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003284:	43db      	mvns	r3, r3
 8003286:	401a      	ands	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0318 	and.w	r3, r3, #24
 800328e:	4908      	ldr	r1, [pc, #32]	@ (80032b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003290:	40d9      	lsrs	r1, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	400b      	ands	r3, r1
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	431a      	orrs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	0007ffff 	.word	0x0007ffff

080032b4 <LL_ADC_IsEnabled>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <LL_ADC_IsEnabled+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_ADC_IsEnabled+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_ADC_REG_IsConversionOngoing>:
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d101      	bne.n	80032f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b08      	cmp	r3, #8
 8003312:	d101      	bne.n	8003318 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b0b6      	sub	sp, #216	@ 0xd8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003348:	2b01      	cmp	r3, #1
 800334a:	d102      	bne.n	8003352 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 800334c:	2302      	movs	r3, #2
 800334e:	f000 bcfd 	b.w	8003d4c <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003366:	2b01      	cmp	r3, #1
 8003368:	d130      	bne.n	80033cc <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b09      	cmp	r3, #9
 8003370:	d179      	bne.n	8003466 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	2b00      	cmp	r3, #0
 8003378:	d010      	beq.n	800339c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	0e9b      	lsrs	r3, r3, #26
 8003380:	025b      	lsls	r3, r3, #9
 8003382:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338a:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800338e:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800339a:	e007      	b.n	80033ac <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	025b      	lsls	r3, r3, #9
 80033a4:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80033a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033b2:	4b84      	ldr	r3, [pc, #528]	@ (80035c4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80033be:	430b      	orrs	r3, r1
 80033c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033c8:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80033ca:	e04c      	b.n	8003466 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11d      	bne.n	8003410 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f4:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80033f8:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003404:	e004      	b.n	8003410 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	3b01      	subs	r3, #1
 800340c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0e9b      	lsrs	r3, r3, #26
 8003416:	f003 021f 	and.w	r2, r3, #31
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800343e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003456:	4b5b      	ldr	r3, [pc, #364]	@ (80035c4 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	430b      	orrs	r3, r1
 8003464:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff48 	bl	8003300 <LL_ADC_INJ_IsConversionOngoing>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d124      	bne.n	80034c0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800347c:	2b00      	cmp	r3, #0
 800347e:	d112      	bne.n	80034a6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003490:	055a      	lsls	r2, r3, #21
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003498:	051b      	lsls	r3, r3, #20
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	e00c      	b.n	80034c0 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80034b6:	055a      	lsls	r2, r3, #21
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff08 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 80034ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff14 	bl	8003300 <LL_ADC_INJ_IsConversionOngoing>
 80034d8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f040 822e 	bne.w	8003942 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 8229 	bne.w	8003942 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d116      	bne.n	800352e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003518:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800351a:	e01f      	b.n	800355c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800352a:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800352c:	e016      	b.n	800355c <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003534:	2b01      	cmp	r3, #1
 8003536:	d109      	bne.n	800354c <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800354a:	e007      	b.n	800355c <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800355a:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003562:	2b01      	cmp	r3, #1
 8003564:	d110      	bne.n	8003588 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	430b      	orrs	r3, r1
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0202 	orr.w	r2, r2, #2
 8003584:	611a      	str	r2, [r3, #16]
 8003586:	e007      	b.n	8003598 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0202 	bic.w	r2, r2, #2
 8003596:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035a0:	d112      	bne.n	80035c8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7ff fe31 	bl	8003214 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fe17 	bl	80031ee <LL_ADC_SetSamplingTimeCommonConfig>
 80035c0:	e011      	b.n	80035e6 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80035c2:	bf00      	nop
 80035c4:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 80035d4:	461a      	mov	r2, r3
 80035d6:	f7ff fe1d 	bl	8003214 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fe04 	bl	80031ee <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	08db      	lsrs	r3, r3, #3
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d022      	beq.n	800364e <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6919      	ldr	r1, [r3, #16]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003618:	f7ff fd5e 	bl	80030d8 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6919      	ldr	r1, [r3, #16]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	461a      	mov	r2, r3
 800362a:	f7ff fdaa 	bl	8003182 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800363a:	2b01      	cmp	r3, #1
 800363c:	d102      	bne.n	8003644 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800363e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003642:	e000      	b.n	8003646 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003644:	2300      	movs	r3, #0
 8003646:	461a      	mov	r2, r3
 8003648:	f7ff fdb6 	bl	80031b8 <LL_ADC_SetOffsetSaturation>
 800364c:	e179      	b.n	8003942 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fd63 	bl	8003120 <LL_ADC_GetOffsetChannel>
 800365a:	4603      	mov	r3, r0
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fd58 	bl	8003120 <LL_ADC_GetOffsetChannel>
 8003670:	4603      	mov	r3, r0
 8003672:	0e9b      	lsrs	r3, r3, #26
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	e01e      	b.n	80036b8 <HAL_ADCEx_InjectedConfigChannel+0x390>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fd4d 	bl	8003120 <LL_ADC_GetOffsetChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8003698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800369c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80036a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80036a8:	2320      	movs	r3, #32
 80036aa:	e004      	b.n	80036b6 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80036ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036b0:	fab3 f383 	clz	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0e9b      	lsrs	r3, r3, #26
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	e018      	b.n	8003702 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80036e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80036ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 80036f4:	2320      	movs	r3, #32
 80036f6:	e004      	b.n	8003702 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 80036f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036fc:	fab3 f383 	clz	r3, r3
 8003700:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003702:	429a      	cmp	r2, r3
 8003704:	d106      	bne.n	8003714 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fd1c 	bl	800314c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2101      	movs	r1, #1
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fd00 	bl	8003120 <LL_ADC_GetOffsetChannel>
 8003720:	4603      	mov	r3, r0
 8003722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2101      	movs	r1, #1
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fcf5 	bl	8003120 <LL_ADC_GetOffsetChannel>
 8003736:	4603      	mov	r3, r0
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	f003 021f 	and.w	r2, r3, #31
 800373e:	e01e      	b.n	800377e <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fcea 	bl	8003120 <LL_ADC_GetOffsetChannel>
 800374c:	4603      	mov	r3, r0
 800374e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800375e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003762:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 800376e:	2320      	movs	r3, #32
 8003770:	e004      	b.n	800377c <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0e9b      	lsrs	r3, r3, #26
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	e018      	b.n	80037c8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80037aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80037b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80037ba:	2320      	movs	r3, #32
 80037bc:	e004      	b.n	80037c8 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80037be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d106      	bne.n	80037da <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2101      	movs	r1, #1
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fcb9 	bl	800314c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2102      	movs	r1, #2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fc9d 	bl	8003120 <LL_ADC_GetOffsetChannel>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fc92 	bl	8003120 <LL_ADC_GetOffsetChannel>
 80037fc:	4603      	mov	r3, r0
 80037fe:	0e9b      	lsrs	r3, r3, #26
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	e01e      	b.n	8003844 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2102      	movs	r1, #2
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fc87 	bl	8003120 <LL_ADC_GetOffsetChannel>
 8003812:	4603      	mov	r3, r0
 8003814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003824:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003828:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800382c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003834:	2320      	movs	r3, #32
 8003836:	e004      	b.n	8003842 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	e014      	b.n	8003886 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800386a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800386c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8003878:	2320      	movs	r3, #32
 800387a:	e004      	b.n	8003886 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 800387c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003886:	429a      	cmp	r2, r3
 8003888:	d106      	bne.n	8003898 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	2102      	movs	r1, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fc5a 	bl	800314c <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2103      	movs	r1, #3
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fc3e 	bl	8003120 <LL_ADC_GetOffsetChannel>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2103      	movs	r1, #3
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fc33 	bl	8003120 <LL_ADC_GetOffsetChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	0e9b      	lsrs	r3, r3, #26
 80038be:	f003 021f 	and.w	r2, r3, #31
 80038c2:	e017      	b.n	80038f4 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2103      	movs	r1, #3
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fc28 	bl	8003120 <LL_ADC_GetOffsetChannel>
 80038d0:	4603      	mov	r3, r0
 80038d2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80038dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038de:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80038e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80038e6:	2320      	movs	r3, #32
 80038e8:	e003      	b.n	80038f2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80038ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ec:	fab3 f383 	clz	r3, r3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0e9b      	lsrs	r3, r3, #26
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	e011      	b.n	8003930 <HAL_ADCEx_InjectedConfigChannel+0x608>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800391a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800391c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800391e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8003928:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003930:	429a      	cmp	r2, r3
 8003932:	d106      	bne.n	8003942 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	2103      	movs	r1, #3
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fc05 	bl	800314c <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fcb4 	bl	80032b4 <LL_ADC_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 813d 	bne.w	8003bce <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	461a      	mov	r2, r3
 8003962:	f7ff fc83 	bl	800326c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4aa2      	ldr	r2, [pc, #648]	@ (8003bf4 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	f040 812e 	bne.w	8003bce <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	3301      	adds	r3, #1
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2b09      	cmp	r3, #9
 8003990:	bf94      	ite	ls
 8003992:	2301      	movls	r3, #1
 8003994:	2300      	movhi	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	e019      	b.n	80039ce <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80039a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80039ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80039b2:	2320      	movs	r3, #32
 80039b4:	e003      	b.n	80039be <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80039b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	3301      	adds	r3, #1
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d079      	beq.n	8003ac6 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	0e9b      	lsrs	r3, r3, #26
 80039e4:	3301      	adds	r3, #1
 80039e6:	069b      	lsls	r3, r3, #26
 80039e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039ec:	e015      	b.n	8003a1a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80039fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039fe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e003      	b.n	8003a12 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	069b      	lsls	r3, r3, #26
 8003a16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_ADCEx_InjectedConfigChannel+0x712>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	0e9b      	lsrs	r3, r3, #26
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2101      	movs	r1, #1
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	e017      	b.n	8003a6a <HAL_ADCEx_InjectedConfigChannel+0x742>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8003a52:	2320      	movs	r3, #32
 8003a54:	e003      	b.n	8003a5e <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8003a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	2101      	movs	r1, #1
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	ea42 0103 	orr.w	r1, r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	0e9b      	lsrs	r3, r3, #26
 8003a80:	3301      	adds	r3, #1
 8003a82:	f003 021f 	and.w	r2, r3, #31
 8003a86:	4613      	mov	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	4413      	add	r3, r2
 8003a8c:	051b      	lsls	r3, r3, #20
 8003a8e:	e018      	b.n	8003ac2 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	e003      	b.n	8003ab4 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f003 021f 	and.w	r2, r3, #31
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	e07e      	b.n	8003bc4 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	0e9b      	lsrs	r3, r3, #26
 8003ad8:	3301      	adds	r3, #1
 8003ada:	069b      	lsls	r3, r3, #26
 8003adc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ae0:	e015      	b.n	8003b0e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8003afa:	2320      	movs	r3, #32
 8003afc:	e003      	b.n	8003b06 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8003afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b00:	fab3 f383 	clz	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	3301      	adds	r3, #1
 8003b08:	069b      	lsls	r3, r3, #26
 8003b0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_ADCEx_InjectedConfigChannel+0x806>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	0e9b      	lsrs	r3, r3, #26
 8003b20:	3301      	adds	r3, #1
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	e017      	b.n	8003b5e <HAL_ADCEx_InjectedConfigChannel+0x836>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	61bb      	str	r3, [r7, #24]
  return result;
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8003b46:	2320      	movs	r3, #32
 8003b48:	e003      	b.n	8003b52 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	3301      	adds	r3, #1
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2101      	movs	r1, #1
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10d      	bne.n	8003b8a <HAL_ADCEx_InjectedConfigChannel+0x862>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	0e9b      	lsrs	r3, r3, #26
 8003b74:	3301      	adds	r3, #1
 8003b76:	f003 021f 	and.w	r2, r3, #31
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	3b1e      	subs	r3, #30
 8003b82:	051b      	lsls	r3, r3, #20
 8003b84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b88:	e01b      	b.n	8003bc2 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	fa93 f3a3 	rbit	r3, r3
 8003b96:	60fb      	str	r3, [r7, #12]
  return result;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	e003      	b.n	8003bae <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	fab3 f383 	clz	r3, r3
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	3b1e      	subs	r3, #30
 8003bbc:	051b      	lsls	r3, r3, #20
 8003bbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc2:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f7ff fb23 	bl	8003214 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80b2 	beq.w	8003d40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be4:	d004      	beq.n	8003bf0 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d109      	bne.n	8003c04 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8003bf0:	4b03      	ldr	r3, [pc, #12]	@ (8003c00 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8003bf2:	e008      	b.n	8003c06 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8003bf4:	407f0000 	.word	0x407f0000
 8003bf8:	80080000 	.word	0x80080000
 8003bfc:	50000100 	.word	0x50000100
 8003c00:	50000300 	.word	0x50000300
 8003c04:	4b53      	ldr	r3, [pc, #332]	@ (8003d54 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fa58 	bl	80030bc <LL_ADC_GetCommonPathInternalCh>
 8003c0c:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a50      	ldr	r2, [pc, #320]	@ (8003d58 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a4f      	ldr	r2, [pc, #316]	@ (8003d5c <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d139      	bne.n	8003c98 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d133      	bne.n	8003c98 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c38:	d004      	beq.n	8003c44 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a48      	ldr	r2, [pc, #288]	@ (8003d60 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d17a      	bne.n	8003d3a <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a44      	ldr	r2, [pc, #272]	@ (8003d64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_ADCEx_InjectedConfigChannel+0x934>
 8003c58:	4a43      	ldr	r2, [pc, #268]	@ (8003d68 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003c5a:	e000      	b.n	8003c5e <HAL_ADCEx_InjectedConfigChannel+0x936>
 8003c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d54 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003c5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f7ff fa14 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d6c <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	4a3e      	ldr	r2, [pc, #248]	@ (8003d70 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	099a      	lsrs	r2, r3, #6
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003c86:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003c88:	e002      	b.n	8003c90 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f9      	bne.n	8003c8a <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c96:	e050      	b.n	8003d3a <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a35      	ldr	r2, [pc, #212]	@ (8003d74 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d125      	bne.n	8003cee <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ca2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ca6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11f      	bne.n	8003cee <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d104      	bne.n	8003cc2 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8003d78 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d03d      	beq.n	8003d3e <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cca:	d004      	beq.n	8003cd6 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a24      	ldr	r2, [pc, #144]	@ (8003d64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8003cd6:	4a24      	ldr	r2, [pc, #144]	@ (8003d68 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003cd8:	e000      	b.n	8003cdc <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8003cda:	4a1e      	ldr	r2, [pc, #120]	@ (8003d54 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ce0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f7ff f9d5 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cec:	e027      	b.n	8003d3e <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a22      	ldr	r2, [pc, #136]	@ (8003d7c <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d123      	bne.n	8003d40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d11d      	bne.n	8003d40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a16      	ldr	r2, [pc, #88]	@ (8003d64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d018      	beq.n	8003d40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d16:	d004      	beq.n	8003d22 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a11      	ldr	r2, [pc, #68]	@ (8003d64 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8003d22:	4a11      	ldr	r2, [pc, #68]	@ (8003d68 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003d24:	e000      	b.n	8003d28 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8003d26:	4a0b      	ldr	r2, [pc, #44]	@ (8003d54 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f7ff f9af 	bl	8003096 <LL_ADC_SetCommonPathInternalCh>
 8003d38:	e002      	b.n	8003d40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d3e:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d48:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	37d8      	adds	r7, #216	@ 0xd8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	50000700 	.word	0x50000700
 8003d58:	c3210000 	.word	0xc3210000
 8003d5c:	90c00010 	.word	0x90c00010
 8003d60:	50000600 	.word	0x50000600
 8003d64:	50000100 	.word	0x50000100
 8003d68:	50000300 	.word	0x50000300
 8003d6c:	20000008 	.word	0x20000008
 8003d70:	053e2d63 	.word	0x053e2d63
 8003d74:	c7520000 	.word	0xc7520000
 8003d78:	50000500 	.word	0x50000500
 8003d7c:	cb840000 	.word	0xcb840000

08003d80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b0a1      	sub	sp, #132	@ 0x84
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0e7      	b.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003da6:	2300      	movs	r3, #0
 8003da8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003daa:	2300      	movs	r3, #0
 8003dac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db6:	d102      	bne.n	8003dbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003db8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	e009      	b.n	8003dd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6e      	ldr	r2, [pc, #440]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d102      	bne.n	8003dce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003dc8:	4b6d      	ldr	r3, [pc, #436]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	e001      	b.n	8003dd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10b      	bne.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0be      	b.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fa71 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 8003df8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fa6b 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 80a0 	bne.w	8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 809c 	bne.w	8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e1c:	d004      	beq.n	8003e28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a55      	ldr	r2, [pc, #340]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e28:	4b56      	ldr	r3, [pc, #344]	@ (8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e2a:	e000      	b.n	8003e2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003e2c:	4b56      	ldr	r3, [pc, #344]	@ (8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003e2e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d04b      	beq.n	8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e4a:	035b      	lsls	r3, r3, #13
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e5c:	d004      	beq.n	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a45      	ldr	r2, [pc, #276]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10f      	bne.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e6c:	f7ff fa22 	bl	80032b4 <LL_ADC_IsEnabled>
 8003e70:	4604      	mov	r4, r0
 8003e72:	4841      	ldr	r0, [pc, #260]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e74:	f7ff fa1e 	bl	80032b4 <LL_ADC_IsEnabled>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4323      	orrs	r3, r4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e012      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e88:	483c      	ldr	r0, [pc, #240]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e8a:	f7ff fa13 	bl	80032b4 <LL_ADC_IsEnabled>
 8003e8e:	4604      	mov	r4, r0
 8003e90:	483b      	ldr	r0, [pc, #236]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e92:	f7ff fa0f 	bl	80032b4 <LL_ADC_IsEnabled>
 8003e96:	4603      	mov	r3, r0
 8003e98:	431c      	orrs	r4, r3
 8003e9a:	483c      	ldr	r0, [pc, #240]	@ (8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e9c:	f7ff fa0a 	bl	80032b4 <LL_ADC_IsEnabled>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4323      	orrs	r3, r4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d056      	beq.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003eba:	f023 030f 	bic.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	6811      	ldr	r1, [r2, #0]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	6892      	ldr	r2, [r2, #8]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ecc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ece:	e047      	b.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ed0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ee4:	d004      	beq.n	8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a23      	ldr	r2, [pc, #140]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10f      	bne.n	8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ef0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ef4:	f7ff f9de 	bl	80032b4 <LL_ADC_IsEnabled>
 8003ef8:	4604      	mov	r4, r0
 8003efa:	481f      	ldr	r0, [pc, #124]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003efc:	f7ff f9da 	bl	80032b4 <LL_ADC_IsEnabled>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4323      	orrs	r3, r4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e012      	b.n	8003f36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f10:	481a      	ldr	r0, [pc, #104]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f12:	f7ff f9cf 	bl	80032b4 <LL_ADC_IsEnabled>
 8003f16:	4604      	mov	r4, r0
 8003f18:	4819      	ldr	r0, [pc, #100]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f1a:	f7ff f9cb 	bl	80032b4 <LL_ADC_IsEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	431c      	orrs	r4, r3
 8003f22:	481a      	ldr	r0, [pc, #104]	@ (8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f24:	f7ff f9c6 	bl	80032b4 <LL_ADC_IsEnabled>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4323      	orrs	r3, r4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d012      	beq.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f42:	f023 030f 	bic.w	r3, r3, #15
 8003f46:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f48:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f4a:	e009      	b.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f5e:	e000      	b.n	8003f62 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3784      	adds	r7, #132	@ 0x84
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	50000100 	.word	0x50000100
 8003f7c:	50000400 	.word	0x50000400
 8003f80:	50000500 	.word	0x50000500
 8003f84:	50000300 	.word	0x50000300
 8003f88:	50000700 	.word	0x50000700
 8003f8c:	50000600 	.word	0x50000600

08003f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fac:	4013      	ands	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fc2:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	60d3      	str	r3, [r2, #12]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fdc:	4b04      	ldr	r3, [pc, #16]	@ (8003ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	f003 0307 	and.w	r3, r3, #7
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004002:	2b00      	cmp	r3, #0
 8004004:	db0b      	blt.n	800401e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	f003 021f 	and.w	r2, r3, #31
 800400c:	4907      	ldr	r1, [pc, #28]	@ (800402c <__NVIC_EnableIRQ+0x38>)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2001      	movs	r0, #1
 8004016:	fa00 f202 	lsl.w	r2, r0, r2
 800401a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000e100 	.word	0xe000e100

08004030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	6039      	str	r1, [r7, #0]
 800403a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004040:	2b00      	cmp	r3, #0
 8004042:	db0a      	blt.n	800405a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	b2da      	uxtb	r2, r3
 8004048:	490c      	ldr	r1, [pc, #48]	@ (800407c <__NVIC_SetPriority+0x4c>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	0112      	lsls	r2, r2, #4
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	440b      	add	r3, r1
 8004054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004058:	e00a      	b.n	8004070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	4908      	ldr	r1, [pc, #32]	@ (8004080 <__NVIC_SetPriority+0x50>)
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	3b04      	subs	r3, #4
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	440b      	add	r3, r1
 800406e:	761a      	strb	r2, [r3, #24]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000e100 	.word	0xe000e100
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004084:	b480      	push	{r7}
 8004086:	b089      	sub	sp, #36	@ 0x24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f1c3 0307 	rsb	r3, r3, #7
 800409e:	2b04      	cmp	r3, #4
 80040a0:	bf28      	it	cs
 80040a2:	2304      	movcs	r3, #4
 80040a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d902      	bls.n	80040b4 <NVIC_EncodePriority+0x30>
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3b03      	subs	r3, #3
 80040b2:	e000      	b.n	80040b6 <NVIC_EncodePriority+0x32>
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43da      	mvns	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	401a      	ands	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040cc:	f04f 31ff 	mov.w	r1, #4294967295
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	43d9      	mvns	r1, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040dc:	4313      	orrs	r3, r2
         );
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3724      	adds	r7, #36	@ 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040fc:	d301      	bcc.n	8004102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040fe:	2301      	movs	r3, #1
 8004100:	e00f      	b.n	8004122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004102:	4a0a      	ldr	r2, [pc, #40]	@ (800412c <SysTick_Config+0x40>)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800410a:	210f      	movs	r1, #15
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	f7ff ff8e 	bl	8004030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <SysTick_Config+0x40>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800411a:	4b04      	ldr	r3, [pc, #16]	@ (800412c <SysTick_Config+0x40>)
 800411c:	2207      	movs	r2, #7
 800411e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	e000e010 	.word	0xe000e010

08004130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff29 	bl	8003f90 <__NVIC_SetPriorityGrouping>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b086      	sub	sp, #24
 800414a:	af00      	add	r7, sp, #0
 800414c:	4603      	mov	r3, r0
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004154:	f7ff ff40 	bl	8003fd8 <__NVIC_GetPriorityGrouping>
 8004158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f7ff ff90 	bl	8004084 <NVIC_EncodePriority>
 8004164:	4602      	mov	r2, r0
 8004166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416a:	4611      	mov	r1, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff ff5f 	bl	8004030 <__NVIC_SetPriority>
}
 8004172:	bf00      	nop
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	4603      	mov	r3, r0
 8004182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff ff33 	bl	8003ff4 <__NVIC_EnableIRQ>
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff ffa4 	bl	80040ec <SysTick_Config>
 80041a4:	4603      	mov	r3, r0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e147      	b.n	8004452 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd f806 	bl	80011e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0210 	bic.w	r2, r2, #16
 80041ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041ec:	f7fd faf4 	bl	80017d8 <HAL_GetTick>
 80041f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041f2:	e012      	b.n	800421a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041f4:	f7fd faf0 	bl	80017d8 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b0a      	cmp	r3, #10
 8004200:	d90b      	bls.n	800421a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2203      	movs	r2, #3
 8004212:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e11b      	b.n	8004452 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b08      	cmp	r3, #8
 8004226:	d0e5      	beq.n	80041f4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004238:	f7fd face 	bl	80017d8 <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800423e:	e012      	b.n	8004266 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004240:	f7fd faca 	bl	80017d8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b0a      	cmp	r3, #10
 800424c:	d90b      	bls.n	8004266 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2203      	movs	r2, #3
 800425e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e0f5      	b.n	8004452 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0e5      	beq.n	8004240 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0202 	orr.w	r2, r2, #2
 8004282:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a74      	ldr	r2, [pc, #464]	@ (800445c <HAL_FDCAN_Init+0x2ac>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d103      	bne.n	8004296 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800428e:	4a74      	ldr	r2, [pc, #464]	@ (8004460 <HAL_FDCAN_Init+0x2b0>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7c1b      	ldrb	r3, [r3, #16]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d108      	bne.n	80042b0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ac:	619a      	str	r2, [r3, #24]
 80042ae:	e007      	b.n	80042c0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042be:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	7c5b      	ldrb	r3, [r3, #17]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d108      	bne.n	80042da <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042d6:	619a      	str	r2, [r3, #24]
 80042d8:	e007      	b.n	80042ea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699a      	ldr	r2, [r3, #24]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	7c9b      	ldrb	r3, [r3, #18]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d108      	bne.n	8004304 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004300:	619a      	str	r2, [r3, #24]
 8004302:	e007      	b.n	8004314 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004312:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004338:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0210 	bic.w	r2, r2, #16
 8004348:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d108      	bne.n	8004364 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699a      	ldr	r2, [r3, #24]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0204 	orr.w	r2, r2, #4
 8004360:	619a      	str	r2, [r3, #24]
 8004362:	e02c      	b.n	80043be <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d028      	beq.n	80043be <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d01c      	beq.n	80043ae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004382:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0210 	orr.w	r2, r2, #16
 8004392:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d110      	bne.n	80043be <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0220 	orr.w	r2, r2, #32
 80043aa:	619a      	str	r2, [r3, #24]
 80043ac:	e007      	b.n	80043be <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0220 	orr.w	r2, r2, #32
 80043bc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043ce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80043d6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	3b01      	subs	r3, #1
 80043e0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80043e6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80043e8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043f2:	d115      	bne.n	8004420 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	3b01      	subs	r3, #1
 8004400:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004402:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	3b01      	subs	r3, #1
 800440a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800440c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	3b01      	subs	r3, #1
 8004416:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800441c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800441e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fab8 	bl	80049ac <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40006400 	.word	0x40006400
 8004460:	40006500 	.word	0x40006500

08004464 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004464:	b480      	push	{r7}
 8004466:	b08b      	sub	sp, #44	@ 0x2c
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800447c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800447e:	7efb      	ldrb	r3, [r7, #27]
 8004480:	2b02      	cmp	r3, #2
 8004482:	f040 80e8 	bne.w	8004656 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b40      	cmp	r3, #64	@ 0x40
 800448a:	d137      	bne.n	80044fc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	2b00      	cmp	r3, #0
 800449a:	d107      	bne.n	80044ac <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0db      	b.n	8004664 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044bc:	d10a      	bne.n	80044d4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d101      	bne.n	80044d4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80044d0:	2301      	movs	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4413      	add	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	440b      	add	r3, r1
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fa:	e036      	b.n	800456a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	2b00      	cmp	r3, #0
 800450a:	d107      	bne.n	800451c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004510:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0a3      	b.n	8004664 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800452c:	d10a      	bne.n	8004544 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800453e:	d101      	bne.n	8004544 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004540:	2301      	movs	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	440b      	add	r3, r1
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0c9b      	lsrs	r3, r3, #18
 8004584:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e005      	b.n	800459a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	3304      	adds	r3, #4
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	b29a      	uxth	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	f003 020f 	and.w	r2, r3, #15
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0e1b      	lsrs	r3, r3, #24
 80045ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	0fda      	lsrs	r2, r3, #31
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	3304      	adds	r3, #4
 8004604:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800460a:	2300      	movs	r3, #0
 800460c:	623b      	str	r3, [r7, #32]
 800460e:	e00a      	b.n	8004626 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	441a      	add	r2, r3
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	440b      	add	r3, r1
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	3301      	adds	r3, #1
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4a11      	ldr	r2, [pc, #68]	@ (8004670 <HAL_FDCAN_GetRxMessage+0x20c>)
 800462c:	5cd3      	ldrb	r3, [r2, r3]
 800462e:	461a      	mov	r2, r3
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	4293      	cmp	r3, r2
 8004634:	d3ec      	bcc.n	8004610 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b40      	cmp	r3, #64	@ 0x40
 800463a:	d105      	bne.n	8004648 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004646:	e004      	b.n	8004652 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e006      	b.n	8004664 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465a:	f043 0208 	orr.w	r2, r3, #8
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
  }
}
 8004664:	4618      	mov	r0, r3
 8004666:	372c      	adds	r7, #44	@ 0x2c
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	08008260 	.word	0x08008260

08004674 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08c      	sub	sp, #48	@ 0x30
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004682:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004690:	4013      	ands	r3, r2
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046a8:	4013      	ands	r3, r2
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c0:	4013      	ands	r3, r2
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ca:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80046ce:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d6:	6a3a      	ldr	r2, [r7, #32]
 80046d8:	4013      	ands	r3, r2
 80046da:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80046e6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004702:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00c      	beq.n	800472a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d006      	beq.n	800472a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2240      	movs	r2, #64	@ 0x40
 8004722:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f922 	bl	800496e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01a      	beq.n	800476c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	0a1b      	lsrs	r3, r3, #8
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d014      	beq.n	800476c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800474a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4013      	ands	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004762:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004764:	6939      	ldr	r1, [r7, #16]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8e2 	bl	8004930 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800476c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004778:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800477a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8ac 	bl	80048da <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800478e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004790:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fb ff06 	bl	80005a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80047a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f8a1 	bl	80048f0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	0a5b      	lsrs	r3, r3, #9
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	0a5b      	lsrs	r3, r3, #9
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f898 	bl	8004906 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	09db      	lsrs	r3, r3, #7
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d019      	beq.n	8004816 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	09db      	lsrs	r3, r3, #7
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d013      	beq.n	8004816 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047f6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4013      	ands	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2280      	movs	r2, #128	@ 0x80
 800480c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800480e:	68f9      	ldr	r1, [r7, #12]
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f882 	bl	800491a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	0b5b      	lsrs	r3, r3, #13
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00d      	beq.n	800483e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	0b5b      	lsrs	r3, r3, #13
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004836:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f884 	bl	8004946 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	0bdb      	lsrs	r3, r3, #15
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	0bdb      	lsrs	r3, r3, #15
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800485e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f87a 	bl	800495a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	0b9b      	lsrs	r3, r3, #14
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d010      	beq.n	8004894 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	0b9b      	lsrs	r3, r3, #14
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004886:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80048a2:	69f9      	ldr	r1, [r7, #28]
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f876 	bl	8004996 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f858 	bl	8004982 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80048d2:	bf00      	nop
 80048d4:	3730      	adds	r7, #48	@ 0x30
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80049b4:	4b30      	ldr	r3, [pc, #192]	@ (8004a78 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80049b6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2f      	ldr	r2, [pc, #188]	@ (8004a7c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d103      	bne.n	80049ca <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80049c8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004a80 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d103      	bne.n	80049dc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80049da:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ea:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f2:	041a      	lsls	r2, r3, #16
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a10:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	061a      	lsls	r2, r3, #24
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e005      	b.n	8004a5e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3f3      	bcc.n	8004a52 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	4000a400 	.word	0x4000a400
 8004a7c:	40006800 	.word	0x40006800
 8004a80:	40006c00 	.word	0x40006c00

08004a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a92:	e15a      	b.n	8004d4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 814c 	beq.w	8004d44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d005      	beq.n	8004ac4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d130      	bne.n	8004b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	2203      	movs	r2, #3
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004afa:	2201      	movs	r2, #1
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 0201 	and.w	r2, r3, #1
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d017      	beq.n	8004b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43db      	mvns	r3, r3
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4013      	ands	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d123      	bne.n	8004bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	08da      	lsrs	r2, r3, #3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3208      	adds	r2, #8
 8004b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	220f      	movs	r2, #15
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	08da      	lsrs	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3208      	adds	r2, #8
 8004bb0:	6939      	ldr	r1, [r7, #16]
 8004bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0203 	and.w	r2, r3, #3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a6 	beq.w	8004d44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8004d68 <HAL_GPIO_Init+0x2e4>)
 8004bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8004d68 <HAL_GPIO_Init+0x2e4>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c04:	4b58      	ldr	r3, [pc, #352]	@ (8004d68 <HAL_GPIO_Init+0x2e4>)
 8004c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c10:	4a56      	ldr	r2, [pc, #344]	@ (8004d6c <HAL_GPIO_Init+0x2e8>)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	089b      	lsrs	r3, r3, #2
 8004c16:	3302      	adds	r3, #2
 8004c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	220f      	movs	r2, #15
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4013      	ands	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c3a:	d01f      	beq.n	8004c7c <HAL_GPIO_Init+0x1f8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a4c      	ldr	r2, [pc, #304]	@ (8004d70 <HAL_GPIO_Init+0x2ec>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d019      	beq.n	8004c78 <HAL_GPIO_Init+0x1f4>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a4b      	ldr	r2, [pc, #300]	@ (8004d74 <HAL_GPIO_Init+0x2f0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_GPIO_Init+0x1f0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d78 <HAL_GPIO_Init+0x2f4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00d      	beq.n	8004c70 <HAL_GPIO_Init+0x1ec>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a49      	ldr	r2, [pc, #292]	@ (8004d7c <HAL_GPIO_Init+0x2f8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <HAL_GPIO_Init+0x1e8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a48      	ldr	r2, [pc, #288]	@ (8004d80 <HAL_GPIO_Init+0x2fc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <HAL_GPIO_Init+0x1e4>
 8004c64:	2305      	movs	r3, #5
 8004c66:	e00a      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c68:	2306      	movs	r3, #6
 8004c6a:	e008      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	e006      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c70:	2303      	movs	r3, #3
 8004c72:	e004      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e002      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_GPIO_Init+0x1fa>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	f002 0203 	and.w	r2, r2, #3
 8004c84:	0092      	lsls	r2, r2, #2
 8004c86:	4093      	lsls	r3, r2
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c8e:	4937      	ldr	r1, [pc, #220]	@ (8004d6c <HAL_GPIO_Init+0x2e8>)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	3302      	adds	r3, #2
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c9c:	4b39      	ldr	r3, [pc, #228]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cc0:	4a30      	ldr	r2, [pc, #192]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cea:	4a26      	ldr	r2, [pc, #152]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004cf0:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d14:	4a1b      	ldr	r2, [pc, #108]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4013      	ands	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d3e:	4a11      	ldr	r2, [pc, #68]	@ (8004d84 <HAL_GPIO_Init+0x300>)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	3301      	adds	r3, #1
 8004d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f47f ae9d 	bne.w	8004a94 <HAL_GPIO_Init+0x10>
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	48000400 	.word	0x48000400
 8004d74:	48000800 	.word	0x48000800
 8004d78:	48000c00 	.word	0x48000c00
 8004d7c:	48001000 	.word	0x48001000
 8004d80:	48001400 	.word	0x48001400
 8004d84:	40010400 	.word	0x40010400

08004d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]
 8004d94:	4613      	mov	r3, r2
 8004d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d98:	787b      	ldrb	r3, [r7, #1]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d9e:	887a      	ldrh	r2, [r7, #2]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004da4:	e002      	b.n	8004dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dca:	887a      	ldrh	r2, [r7, #2]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	041a      	lsls	r2, r3, #16
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	43d9      	mvns	r1, r3
 8004dd6:	887b      	ldrh	r3, [r7, #2]
 8004dd8:	400b      	ands	r3, r1
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	619a      	str	r2, [r3, #24]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d141      	bne.n	8004e7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e06:	d131      	bne.n	8004e6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e08:	4b47      	ldr	r3, [pc, #284]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0e:	4a46      	ldr	r2, [pc, #280]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e18:	4b43      	ldr	r3, [pc, #268]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e20:	4a41      	ldr	r2, [pc, #260]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e28:	4b40      	ldr	r3, [pc, #256]	@ (8004f2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2232      	movs	r2, #50	@ 0x32
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	4a3f      	ldr	r2, [pc, #252]	@ (8004f30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	0c9b      	lsrs	r3, r3, #18
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e3e:	e002      	b.n	8004e46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e46:	4b38      	ldr	r3, [pc, #224]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e52:	d102      	bne.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f2      	bne.n	8004e40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e5a:	4b33      	ldr	r3, [pc, #204]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e66:	d158      	bne.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e057      	b.n	8004f1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e72:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e7c:	e04d      	b.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e84:	d141      	bne.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e86:	4b28      	ldr	r3, [pc, #160]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e92:	d131      	bne.n	8004ef8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e94:	4b24      	ldr	r3, [pc, #144]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e9a:	4a23      	ldr	r2, [pc, #140]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ea4:	4b20      	ldr	r3, [pc, #128]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004eac:	4a1e      	ldr	r2, [pc, #120]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2232      	movs	r2, #50	@ 0x32
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	0c9b      	lsrs	r3, r3, #18
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eca:	e002      	b.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ed2:	4b15      	ldr	r3, [pc, #84]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ede:	d102      	bne.n	8004ee6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f2      	bne.n	8004ecc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ee6:	4b10      	ldr	r3, [pc, #64]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef2:	d112      	bne.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e011      	b.n	8004f1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004efe:	4a0a      	ldr	r2, [pc, #40]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f08:	e007      	b.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f0a:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f12:	4a05      	ldr	r2, [pc, #20]	@ (8004f28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40007000 	.word	0x40007000
 8004f2c:	20000008 	.word	0x20000008
 8004f30:	431bde83 	.word	0x431bde83

08004f34 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4a04      	ldr	r2, [pc, #16]	@ (8004f50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f42:	6093      	str	r3, [r2, #8]
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40007000 	.word	0x40007000

08004f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e2fe      	b.n	8005564 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d075      	beq.n	800505e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f72:	4b97      	ldr	r3, [pc, #604]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f7c:	4b94      	ldr	r3, [pc, #592]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d102      	bne.n	8004f92 <HAL_RCC_OscConfig+0x3e>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_OscConfig+0x44>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d10b      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	4b8d      	ldr	r3, [pc, #564]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d05b      	beq.n	800505c <HAL_RCC_OscConfig+0x108>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d157      	bne.n	800505c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e2d9      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb8:	d106      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x74>
 8004fba:	4b85      	ldr	r3, [pc, #532]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a84      	ldr	r2, [pc, #528]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e01d      	b.n	8005004 <HAL_RCC_OscConfig+0xb0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x98>
 8004fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b7c      	ldr	r3, [pc, #496]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a7b      	ldr	r2, [pc, #492]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0xb0>
 8004fec:	4b78      	ldr	r3, [pc, #480]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a77      	ldr	r2, [pc, #476]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b75      	ldr	r3, [pc, #468]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a74      	ldr	r2, [pc, #464]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8004ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d013      	beq.n	8005034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fc fbe4 	bl	80017d8 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005014:	f7fc fbe0 	bl	80017d8 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	@ 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e29e      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005026:	4b6a      	ldr	r3, [pc, #424]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0xc0>
 8005032:	e014      	b.n	800505e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fc fbd0 	bl	80017d8 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800503c:	f7fc fbcc 	bl	80017d8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	@ 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e28a      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800504e:	4b60      	ldr	r3, [pc, #384]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0xe8>
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d075      	beq.n	8005156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800506a:	4b59      	ldr	r3, [pc, #356]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005074:	4b56      	ldr	r3, [pc, #344]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b0c      	cmp	r3, #12
 8005082:	d102      	bne.n	800508a <HAL_RCC_OscConfig+0x136>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d002      	beq.n	8005090 <HAL_RCC_OscConfig+0x13c>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d11f      	bne.n	80050d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005090:	4b4f      	ldr	r3, [pc, #316]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_OscConfig+0x154>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e25d      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a8:	4b49      	ldr	r3, [pc, #292]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	061b      	lsls	r3, r3, #24
 80050b6:	4946      	ldr	r1, [pc, #280]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050bc:	4b45      	ldr	r3, [pc, #276]	@ (80051d4 <HAL_RCC_OscConfig+0x280>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fc fb3d 	bl	8001740 <HAL_InitTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d043      	beq.n	8005154 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e249      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d023      	beq.n	8005120 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d8:	4b3d      	ldr	r3, [pc, #244]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3c      	ldr	r2, [pc, #240]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 80050de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc fb78 	bl	80017d8 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ec:	f7fc fb74 	bl	80017d8 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e232      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050fe:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510a:	4b31      	ldr	r3, [pc, #196]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	492d      	ldr	r1, [pc, #180]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	604b      	str	r3, [r1, #4]
 800511e:	e01a      	b.n	8005156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005120:	4b2b      	ldr	r3, [pc, #172]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2a      	ldr	r2, [pc, #168]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005126:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800512a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fc fb54 	bl	80017d8 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005134:	f7fc fb50 	bl	80017d8 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e20e      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005146:	4b22      	ldr	r3, [pc, #136]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <HAL_RCC_OscConfig+0x1e0>
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005154:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d041      	beq.n	80051e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01c      	beq.n	80051a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516a:	4b19      	ldr	r3, [pc, #100]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 800516c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005170:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517a:	f7fc fb2d 	bl	80017d8 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005182:	f7fc fb29 	bl	80017d8 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e1e7      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005194:	4b0e      	ldr	r3, [pc, #56]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 8005196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0ef      	beq.n	8005182 <HAL_RCC_OscConfig+0x22e>
 80051a2:	e020      	b.n	80051e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a4:	4b0a      	ldr	r3, [pc, #40]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051aa:	4a09      	ldr	r2, [pc, #36]	@ (80051d0 <HAL_RCC_OscConfig+0x27c>)
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7fc fb10 	bl	80017d8 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051ba:	e00d      	b.n	80051d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051bc:	f7fc fb0c 	bl	80017d8 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d906      	bls.n	80051d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e1ca      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000
 80051d4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051d8:	4b8c      	ldr	r3, [pc, #560]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80051da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ea      	bne.n	80051bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80a6 	beq.w	8005340 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f4:	2300      	movs	r3, #0
 80051f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051f8:	4b84      	ldr	r3, [pc, #528]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_OscConfig+0x2b4>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x2b6>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00d      	beq.n	800522a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b7f      	ldr	r3, [pc, #508]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005212:	4a7e      	ldr	r2, [pc, #504]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005218:	6593      	str	r3, [r2, #88]	@ 0x58
 800521a:	4b7c      	ldr	r3, [pc, #496]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522a:	4b79      	ldr	r3, [pc, #484]	@ (8005410 <HAL_RCC_OscConfig+0x4bc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d118      	bne.n	8005268 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005236:	4b76      	ldr	r3, [pc, #472]	@ (8005410 <HAL_RCC_OscConfig+0x4bc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a75      	ldr	r2, [pc, #468]	@ (8005410 <HAL_RCC_OscConfig+0x4bc>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005242:	f7fc fac9 	bl	80017d8 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fc fac5 	bl	80017d8 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e183      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800525c:	4b6c      	ldr	r3, [pc, #432]	@ (8005410 <HAL_RCC_OscConfig+0x4bc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d108      	bne.n	8005282 <HAL_RCC_OscConfig+0x32e>
 8005270:	4b66      	ldr	r3, [pc, #408]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005276:	4a65      	ldr	r2, [pc, #404]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005280:	e024      	b.n	80052cc <HAL_RCC_OscConfig+0x378>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b05      	cmp	r3, #5
 8005288:	d110      	bne.n	80052ac <HAL_RCC_OscConfig+0x358>
 800528a:	4b60      	ldr	r3, [pc, #384]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005290:	4a5e      	ldr	r2, [pc, #376]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005292:	f043 0304 	orr.w	r3, r3, #4
 8005296:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800529a:	4b5c      	ldr	r3, [pc, #368]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a0:	4a5a      	ldr	r2, [pc, #360]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052aa:	e00f      	b.n	80052cc <HAL_RCC_OscConfig+0x378>
 80052ac:	4b57      	ldr	r3, [pc, #348]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b2:	4a56      	ldr	r2, [pc, #344]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052bc:	4b53      	ldr	r3, [pc, #332]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c2:	4a52      	ldr	r2, [pc, #328]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d016      	beq.n	8005302 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fc fa80 	bl	80017d8 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052da:	e00a      	b.n	80052f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052dc:	f7fc fa7c 	bl	80017d8 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e138      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f2:	4b46      	ldr	r3, [pc, #280]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ed      	beq.n	80052dc <HAL_RCC_OscConfig+0x388>
 8005300:	e015      	b.n	800532e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005302:	f7fc fa69 	bl	80017d8 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005308:	e00a      	b.n	8005320 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fc fa65 	bl	80017d8 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e121      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005320:	4b3a      	ldr	r3, [pc, #232]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1ed      	bne.n	800530a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800532e:	7ffb      	ldrb	r3, [r7, #31]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d105      	bne.n	8005340 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005334:	4b35      	ldr	r3, [pc, #212]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005338:	4a34      	ldr	r2, [pc, #208]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 800533a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800533e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d03c      	beq.n	80053c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01c      	beq.n	800538e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005354:	4b2d      	ldr	r3, [pc, #180]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800535a:	4a2c      	ldr	r2, [pc, #176]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fc fa38 	bl	80017d8 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800536c:	f7fc fa34 	bl	80017d8 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e0f2      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800537e:	4b23      	ldr	r3, [pc, #140]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005380:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ef      	beq.n	800536c <HAL_RCC_OscConfig+0x418>
 800538c:	e01b      	b.n	80053c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800538e:	4b1f      	ldr	r3, [pc, #124]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005390:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005394:	4a1d      	ldr	r2, [pc, #116]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539e:	f7fc fa1b 	bl	80017d8 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053a6:	f7fc fa17 	bl	80017d8 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e0d5      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053b8:	4b14      	ldr	r3, [pc, #80]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80053ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1ef      	bne.n	80053a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 80c9 	beq.w	8005562 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053d0:	4b0e      	ldr	r3, [pc, #56]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 030c 	and.w	r3, r3, #12
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	f000 8083 	beq.w	80054e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d15e      	bne.n	80054a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e6:	4b09      	ldr	r3, [pc, #36]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a08      	ldr	r2, [pc, #32]	@ (800540c <HAL_RCC_OscConfig+0x4b8>)
 80053ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f2:	f7fc f9f1 	bl	80017d8 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f8:	e00c      	b.n	8005414 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fa:	f7fc f9ed 	bl	80017d8 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d905      	bls.n	8005414 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0ab      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
 800540c:	40021000 	.word	0x40021000
 8005410:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005414:	4b55      	ldr	r3, [pc, #340]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ec      	bne.n	80053fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005420:	4b52      	ldr	r3, [pc, #328]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	4b52      	ldr	r3, [pc, #328]	@ (8005570 <HAL_RCC_OscConfig+0x61c>)
 8005426:	4013      	ands	r3, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6a11      	ldr	r1, [r2, #32]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005430:	3a01      	subs	r2, #1
 8005432:	0112      	lsls	r2, r2, #4
 8005434:	4311      	orrs	r1, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800543a:	0212      	lsls	r2, r2, #8
 800543c:	4311      	orrs	r1, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005442:	0852      	lsrs	r2, r2, #1
 8005444:	3a01      	subs	r2, #1
 8005446:	0552      	lsls	r2, r2, #21
 8005448:	4311      	orrs	r1, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800544e:	0852      	lsrs	r2, r2, #1
 8005450:	3a01      	subs	r2, #1
 8005452:	0652      	lsls	r2, r2, #25
 8005454:	4311      	orrs	r1, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800545a:	06d2      	lsls	r2, r2, #27
 800545c:	430a      	orrs	r2, r1
 800545e:	4943      	ldr	r1, [pc, #268]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 8005460:	4313      	orrs	r3, r2
 8005462:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005464:	4b41      	ldr	r3, [pc, #260]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a40      	ldr	r2, [pc, #256]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 800546a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800546e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005470:	4b3e      	ldr	r3, [pc, #248]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a3d      	ldr	r2, [pc, #244]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 8005476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800547a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fc f9ac 	bl	80017d8 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fc f9a8 	bl	80017d8 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e066      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005496:	4b35      	ldr	r3, [pc, #212]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x530>
 80054a2:	e05e      	b.n	8005562 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a4:	4b31      	ldr	r3, [pc, #196]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a30      	ldr	r2, [pc, #192]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 80054aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fc f992 	bl	80017d8 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fc f98e 	bl	80017d8 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e04c      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ca:	4b28      	ldr	r3, [pc, #160]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80054d6:	4b25      	ldr	r3, [pc, #148]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	4924      	ldr	r1, [pc, #144]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 80054dc:	4b25      	ldr	r3, [pc, #148]	@ (8005574 <HAL_RCC_OscConfig+0x620>)
 80054de:	4013      	ands	r3, r2
 80054e0:	60cb      	str	r3, [r1, #12]
 80054e2:	e03e      	b.n	8005562 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e039      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80054f0:	4b1e      	ldr	r3, [pc, #120]	@ (800556c <HAL_RCC_OscConfig+0x618>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f003 0203 	and.w	r2, r3, #3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	429a      	cmp	r2, r3
 8005502:	d12c      	bne.n	800555e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550e:	3b01      	subs	r3, #1
 8005510:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005512:	429a      	cmp	r2, r3
 8005514:	d123      	bne.n	800555e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d11b      	bne.n	800555e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005532:	429a      	cmp	r2, r3
 8005534:	d113      	bne.n	800555e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	3b01      	subs	r3, #1
 8005544:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005546:	429a      	cmp	r2, r3
 8005548:	d109      	bne.n	800555e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	3b01      	subs	r3, #1
 8005558:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d001      	beq.n	8005562 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000
 8005570:	019f800c 	.word	0x019f800c
 8005574:	feeefffc 	.word	0xfeeefffc

08005578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e11e      	b.n	80057ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005590:	4b91      	ldr	r3, [pc, #580]	@ (80057d8 <HAL_RCC_ClockConfig+0x260>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d910      	bls.n	80055c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b8e      	ldr	r3, [pc, #568]	@ (80057d8 <HAL_RCC_ClockConfig+0x260>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 020f 	bic.w	r2, r3, #15
 80055a6:	498c      	ldr	r1, [pc, #560]	@ (80057d8 <HAL_RCC_ClockConfig+0x260>)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b8a      	ldr	r3, [pc, #552]	@ (80057d8 <HAL_RCC_ClockConfig+0x260>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e106      	b.n	80057ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d073      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d129      	bne.n	8005628 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055d4:	4b81      	ldr	r3, [pc, #516]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0f4      	b.n	80057ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80055e4:	f000 f99e 	bl	8005924 <RCC_GetSysClockFreqFromPLLSource>
 80055e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4a7c      	ldr	r2, [pc, #496]	@ (80057e0 <HAL_RCC_ClockConfig+0x268>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d93f      	bls.n	8005672 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055f2:	4b7a      	ldr	r3, [pc, #488]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005606:	2b00      	cmp	r3, #0
 8005608:	d033      	beq.n	8005672 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800560e:	2b00      	cmp	r3, #0
 8005610:	d12f      	bne.n	8005672 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005612:	4b72      	ldr	r3, [pc, #456]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800561a:	4a70      	ldr	r2, [pc, #448]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 800561c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005620:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005622:	2380      	movs	r3, #128	@ 0x80
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e024      	b.n	8005672 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d107      	bne.n	8005640 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005630:	4b6a      	ldr	r3, [pc, #424]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0c6      	b.n	80057ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005640:	4b66      	ldr	r3, [pc, #408]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0be      	b.n	80057ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005650:	f000 f8ce 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 8005654:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4a61      	ldr	r2, [pc, #388]	@ (80057e0 <HAL_RCC_ClockConfig+0x268>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d909      	bls.n	8005672 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800565e:	4b5f      	ldr	r3, [pc, #380]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005666:	4a5d      	ldr	r2, [pc, #372]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800566c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800566e:	2380      	movs	r3, #128	@ 0x80
 8005670:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005672:	4b5a      	ldr	r3, [pc, #360]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f023 0203 	bic.w	r2, r3, #3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	4957      	ldr	r1, [pc, #348]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005680:	4313      	orrs	r3, r2
 8005682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005684:	f7fc f8a8 	bl	80017d8 <HAL_GetTick>
 8005688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	e00a      	b.n	80056a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800568c:	f7fc f8a4 	bl	80017d8 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800569a:	4293      	cmp	r3, r2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e095      	b.n	80057ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a2:	4b4e      	ldr	r3, [pc, #312]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 020c 	and.w	r2, r3, #12
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d1eb      	bne.n	800568c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d023      	beq.n	8005708 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056cc:	4b43      	ldr	r3, [pc, #268]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4a42      	ldr	r2, [pc, #264]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 80056d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d007      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80056e4:	4b3d      	ldr	r3, [pc, #244]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056ec:	4a3b      	ldr	r2, [pc, #236]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 80056ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f4:	4b39      	ldr	r3, [pc, #228]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4936      	ldr	r1, [pc, #216]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005702:	4313      	orrs	r3, r2
 8005704:	608b      	str	r3, [r1, #8]
 8005706:	e008      	b.n	800571a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b80      	cmp	r3, #128	@ 0x80
 800570c:	d105      	bne.n	800571a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800570e:	4b33      	ldr	r3, [pc, #204]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4a32      	ldr	r2, [pc, #200]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005714:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005718:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800571a:	4b2f      	ldr	r3, [pc, #188]	@ (80057d8 <HAL_RCC_ClockConfig+0x260>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d21d      	bcs.n	8005764 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005728:	4b2b      	ldr	r3, [pc, #172]	@ (80057d8 <HAL_RCC_ClockConfig+0x260>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 020f 	bic.w	r2, r3, #15
 8005730:	4929      	ldr	r1, [pc, #164]	@ (80057d8 <HAL_RCC_ClockConfig+0x260>)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005738:	f7fc f84e 	bl	80017d8 <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573e:	e00a      	b.n	8005756 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005740:	f7fc f84a 	bl	80017d8 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e03b      	b.n	80057ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005756:	4b20      	ldr	r3, [pc, #128]	@ (80057d8 <HAL_RCC_ClockConfig+0x260>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d1ed      	bne.n	8005740 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005770:	4b1a      	ldr	r3, [pc, #104]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4917      	ldr	r1, [pc, #92]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800578e:	4b13      	ldr	r3, [pc, #76]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	490f      	ldr	r1, [pc, #60]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057a2:	f000 f825 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 80057a6:	4602      	mov	r2, r0
 80057a8:	4b0c      	ldr	r3, [pc, #48]	@ (80057dc <HAL_RCC_ClockConfig+0x264>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	490c      	ldr	r1, [pc, #48]	@ (80057e4 <HAL_RCC_ClockConfig+0x26c>)
 80057b4:	5ccb      	ldrb	r3, [r1, r3]
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	fa22 f303 	lsr.w	r3, r2, r3
 80057be:	4a0a      	ldr	r2, [pc, #40]	@ (80057e8 <HAL_RCC_ClockConfig+0x270>)
 80057c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057c2:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <HAL_RCC_ClockConfig+0x274>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fb ffba 	bl	8001740 <HAL_InitTick>
 80057cc:	4603      	mov	r3, r0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40022000 	.word	0x40022000
 80057dc:	40021000 	.word	0x40021000
 80057e0:	04c4b400 	.word	0x04c4b400
 80057e4:	08008248 	.word	0x08008248
 80057e8:	20000008 	.word	0x20000008
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057f6:	4b2c      	ldr	r3, [pc, #176]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d102      	bne.n	8005808 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005802:	4b2a      	ldr	r3, [pc, #168]	@ (80058ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e047      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005808:	4b27      	ldr	r3, [pc, #156]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b08      	cmp	r3, #8
 8005812:	d102      	bne.n	800581a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005814:	4b26      	ldr	r3, [pc, #152]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	e03e      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800581a:	4b23      	ldr	r3, [pc, #140]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d136      	bne.n	8005894 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005826:	4b20      	ldr	r3, [pc, #128]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005830:	4b1d      	ldr	r3, [pc, #116]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	3301      	adds	r3, #1
 800583c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b03      	cmp	r3, #3
 8005842:	d10c      	bne.n	800585e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005844:	4a1a      	ldr	r2, [pc, #104]	@ (80058b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	fbb2 f3f3 	udiv	r3, r2, r3
 800584c:	4a16      	ldr	r2, [pc, #88]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800584e:	68d2      	ldr	r2, [r2, #12]
 8005850:	0a12      	lsrs	r2, r2, #8
 8005852:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	617b      	str	r3, [r7, #20]
      break;
 800585c:	e00c      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800585e:	4a13      	ldr	r2, [pc, #76]	@ (80058ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	4a10      	ldr	r2, [pc, #64]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005868:	68d2      	ldr	r2, [r2, #12]
 800586a:	0a12      	lsrs	r2, r2, #8
 800586c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]
      break;
 8005876:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005878:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	0e5b      	lsrs	r3, r3, #25
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	3301      	adds	r3, #1
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	e001      	b.n	8005898 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005898:	693b      	ldr	r3, [r7, #16]
}
 800589a:	4618      	mov	r0, r3
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000
 80058ac:	00f42400 	.word	0x00f42400
 80058b0:	007a1200 	.word	0x007a1200

080058b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058b8:	4b03      	ldr	r3, [pc, #12]	@ (80058c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ba:	681b      	ldr	r3, [r3, #0]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	20000008 	.word	0x20000008

080058cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058d0:	f7ff fff0 	bl	80058b4 <HAL_RCC_GetHCLKFreq>
 80058d4:	4602      	mov	r2, r0
 80058d6:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	4904      	ldr	r1, [pc, #16]	@ (80058f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058e2:	5ccb      	ldrb	r3, [r1, r3]
 80058e4:	f003 031f 	and.w	r3, r3, #31
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40021000 	.word	0x40021000
 80058f4:	08008258 	.word	0x08008258

080058f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058fc:	f7ff ffda 	bl	80058b4 <HAL_RCC_GetHCLKFreq>
 8005900:	4602      	mov	r2, r0
 8005902:	4b06      	ldr	r3, [pc, #24]	@ (800591c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	0adb      	lsrs	r3, r3, #11
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	4904      	ldr	r1, [pc, #16]	@ (8005920 <HAL_RCC_GetPCLK2Freq+0x28>)
 800590e:	5ccb      	ldrb	r3, [r1, r3]
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40021000 	.word	0x40021000
 8005920:	08008258 	.word	0x08008258

08005924 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800592a:	4b1e      	ldr	r3, [pc, #120]	@ (80059a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005934:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	091b      	lsrs	r3, r3, #4
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	3301      	adds	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b03      	cmp	r3, #3
 8005946:	d10c      	bne.n	8005962 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005948:	4a17      	ldr	r2, [pc, #92]	@ (80059a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	4a14      	ldr	r2, [pc, #80]	@ (80059a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005952:	68d2      	ldr	r2, [r2, #12]
 8005954:	0a12      	lsrs	r2, r2, #8
 8005956:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	617b      	str	r3, [r7, #20]
    break;
 8005960:	e00c      	b.n	800597c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005962:	4a12      	ldr	r2, [pc, #72]	@ (80059ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	4a0e      	ldr	r2, [pc, #56]	@ (80059a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800596c:	68d2      	ldr	r2, [r2, #12]
 800596e:	0a12      	lsrs	r2, r2, #8
 8005970:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005974:	fb02 f303 	mul.w	r3, r2, r3
 8005978:	617b      	str	r3, [r7, #20]
    break;
 800597a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800597c:	4b09      	ldr	r3, [pc, #36]	@ (80059a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	0e5b      	lsrs	r3, r3, #25
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	3301      	adds	r3, #1
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005996:	687b      	ldr	r3, [r7, #4]
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40021000 	.word	0x40021000
 80059a8:	007a1200 	.word	0x007a1200
 80059ac:	00f42400 	.word	0x00f42400

080059b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059b8:	2300      	movs	r3, #0
 80059ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059bc:	2300      	movs	r3, #0
 80059be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8098 	beq.w	8005afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ce:	2300      	movs	r3, #0
 80059d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d2:	4b43      	ldr	r3, [pc, #268]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10d      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059de:	4b40      	ldr	r3, [pc, #256]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ea:	4b3d      	ldr	r3, [pc, #244]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059f6:	2301      	movs	r3, #1
 80059f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059fa:	4b3a      	ldr	r3, [pc, #232]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a39      	ldr	r2, [pc, #228]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a06:	f7fb fee7 	bl	80017d8 <HAL_GetTick>
 8005a0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a0c:	e009      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a0e:	f7fb fee3 	bl	80017d8 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d902      	bls.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	74fb      	strb	r3, [r7, #19]
        break;
 8005a20:	e005      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a22:	4b30      	ldr	r3, [pc, #192]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0ef      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d159      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a34:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01e      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d019      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a50:	4b23      	ldr	r3, [pc, #140]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a5c:	4b20      	ldr	r3, [pc, #128]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a7c:	4a18      	ldr	r2, [pc, #96]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d016      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7fb fea3 	bl	80017d8 <HAL_GetTick>
 8005a92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a94:	e00b      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7fb fe9f 	bl	80017d8 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d902      	bls.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	74fb      	strb	r3, [r7, #19]
            break;
 8005aac:	e006      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0ec      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005abc:	7cfb      	ldrb	r3, [r7, #19]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ac2:	4b07      	ldr	r3, [pc, #28]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad0:	4903      	ldr	r1, [pc, #12]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ad8:	e008      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	74bb      	strb	r3, [r7, #18]
 8005ade:	e005      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aec:	7c7b      	ldrb	r3, [r7, #17]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d105      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af2:	4ba7      	ldr	r3, [pc, #668]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af6:	4aa6      	ldr	r2, [pc, #664]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005afc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b0a:	4ba1      	ldr	r3, [pc, #644]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b10:	f023 0203 	bic.w	r2, r3, #3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	499d      	ldr	r1, [pc, #628]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b2c:	4b98      	ldr	r3, [pc, #608]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b32:	f023 020c 	bic.w	r2, r3, #12
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4995      	ldr	r1, [pc, #596]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b4e:	4b90      	ldr	r3, [pc, #576]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	498c      	ldr	r1, [pc, #560]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b70:	4b87      	ldr	r3, [pc, #540]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	4984      	ldr	r1, [pc, #528]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b92:	4b7f      	ldr	r3, [pc, #508]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	497b      	ldr	r1, [pc, #492]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bb4:	4b76      	ldr	r3, [pc, #472]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	4973      	ldr	r1, [pc, #460]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bdc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	496a      	ldr	r1, [pc, #424]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bf8:	4b65      	ldr	r3, [pc, #404]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	4962      	ldr	r1, [pc, #392]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	4959      	ldr	r1, [pc, #356]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c3c:	4b54      	ldr	r3, [pc, #336]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c42:	f023 0203 	bic.w	r2, r3, #3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4a:	4951      	ldr	r1, [pc, #324]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	4948      	ldr	r1, [pc, #288]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d015      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c80:	4b43      	ldr	r3, [pc, #268]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8e:	4940      	ldr	r1, [pc, #256]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9e:	d105      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005caa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d015      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cb8:	4b35      	ldr	r3, [pc, #212]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc6:	4932      	ldr	r1, [pc, #200]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cd6:	d105      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ce2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d015      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cf0:	4b27      	ldr	r3, [pc, #156]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	4924      	ldr	r1, [pc, #144]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d0e:	d105      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d10:	4b1f      	ldr	r3, [pc, #124]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4a1e      	ldr	r2, [pc, #120]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d015      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d28:	4b19      	ldr	r3, [pc, #100]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d36:	4916      	ldr	r1, [pc, #88]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d46:	d105      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d48:	4b11      	ldr	r3, [pc, #68]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	4a10      	ldr	r2, [pc, #64]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d019      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d60:	4b0b      	ldr	r3, [pc, #44]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	4908      	ldr	r1, [pc, #32]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d7e:	d109      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d80:	4b03      	ldr	r3, [pc, #12]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4a02      	ldr	r2, [pc, #8]	@ (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d8a:	60d3      	str	r3, [r2, #12]
 8005d8c:	e002      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005d8e:	bf00      	nop
 8005d90:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d015      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005da0:	4b29      	ldr	r3, [pc, #164]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	4926      	ldr	r1, [pc, #152]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dbe:	d105      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dc0:	4b21      	ldr	r3, [pc, #132]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	4a20      	ldr	r2, [pc, #128]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d015      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dde:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de6:	4918      	ldr	r1, [pc, #96]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df6:	d105      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005df8:	4b13      	ldr	r3, [pc, #76]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	4a12      	ldr	r2, [pc, #72]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d015      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e10:	4b0d      	ldr	r3, [pc, #52]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1e:	490a      	ldr	r1, [pc, #40]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e30:	4b05      	ldr	r3, [pc, #20]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	4a04      	ldr	r2, [pc, #16]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40021000 	.word	0x40021000

08005e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e049      	b.n	8005ef2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fb fab0 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f000 fdc2 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d001      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e054      	b.n	8005fbe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a26      	ldr	r2, [pc, #152]	@ (8005fcc <HAL_TIM_Base_Start_IT+0xd0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d022      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f3e:	d01d      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a22      	ldr	r2, [pc, #136]	@ (8005fd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a21      	ldr	r2, [pc, #132]	@ (8005fd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1e      	ldr	r2, [pc, #120]	@ (8005fdc <HAL_TIM_Base_Start_IT+0xe0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fe0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d115      	bne.n	8005fa8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	4b19      	ldr	r3, [pc, #100]	@ (8005fe8 <HAL_TIM_Base_Start_IT+0xec>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d015      	beq.n	8005fba <HAL_TIM_Base_Start_IT+0xbe>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f94:	d011      	beq.n	8005fba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa6:	e008      	b.n	8005fba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e000      	b.n	8005fbc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00
 8005fdc:	40013400 	.word	0x40013400
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40015000 	.word	0x40015000
 8005fe8:	00010007 	.word	0x00010007

08005fec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e049      	b.n	8006092 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f841 	bl	800609a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f000 fcf2 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <HAL_TIM_OC_Start_IT+0x28>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e03c      	b.n	8006152 <HAL_TIM_OC_Start_IT+0xa2>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d109      	bne.n	80060f2 <HAL_TIM_OC_Start_IT+0x42>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	bf14      	ite	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	2300      	moveq	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	e02f      	b.n	8006152 <HAL_TIM_OC_Start_IT+0xa2>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d109      	bne.n	800610c <HAL_TIM_OC_Start_IT+0x5c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e022      	b.n	8006152 <HAL_TIM_OC_Start_IT+0xa2>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b0c      	cmp	r3, #12
 8006110:	d109      	bne.n	8006126 <HAL_TIM_OC_Start_IT+0x76>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	bf14      	ite	ne
 800611e:	2301      	movne	r3, #1
 8006120:	2300      	moveq	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	e015      	b.n	8006152 <HAL_TIM_OC_Start_IT+0xa2>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b10      	cmp	r3, #16
 800612a:	d109      	bne.n	8006140 <HAL_TIM_OC_Start_IT+0x90>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	bf14      	ite	ne
 8006138:	2301      	movne	r3, #1
 800613a:	2300      	moveq	r3, #0
 800613c:	b2db      	uxtb	r3, r3
 800613e:	e008      	b.n	8006152 <HAL_TIM_OC_Start_IT+0xa2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	bf14      	ite	ne
 800614c:	2301      	movne	r3, #1
 800614e:	2300      	moveq	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0f1      	b.n	800633e <HAL_TIM_OC_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <HAL_TIM_OC_Start_IT+0xba>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006168:	e023      	b.n	80061b2 <HAL_TIM_OC_Start_IT+0x102>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b04      	cmp	r3, #4
 800616e:	d104      	bne.n	800617a <HAL_TIM_OC_Start_IT+0xca>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006178:	e01b      	b.n	80061b2 <HAL_TIM_OC_Start_IT+0x102>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d104      	bne.n	800618a <HAL_TIM_OC_Start_IT+0xda>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006188:	e013      	b.n	80061b2 <HAL_TIM_OC_Start_IT+0x102>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b0c      	cmp	r3, #12
 800618e:	d104      	bne.n	800619a <HAL_TIM_OC_Start_IT+0xea>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006198:	e00b      	b.n	80061b2 <HAL_TIM_OC_Start_IT+0x102>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b10      	cmp	r3, #16
 800619e:	d104      	bne.n	80061aa <HAL_TIM_OC_Start_IT+0xfa>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a8:	e003      	b.n	80061b2 <HAL_TIM_OC_Start_IT+0x102>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2202      	movs	r2, #2
 80061ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b0c      	cmp	r3, #12
 80061b6:	d841      	bhi.n	800623c <HAL_TIM_OC_Start_IT+0x18c>
 80061b8:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <HAL_TIM_OC_Start_IT+0x110>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	0800623d 	.word	0x0800623d
 80061c8:	0800623d 	.word	0x0800623d
 80061cc:	0800623d 	.word	0x0800623d
 80061d0:	08006207 	.word	0x08006207
 80061d4:	0800623d 	.word	0x0800623d
 80061d8:	0800623d 	.word	0x0800623d
 80061dc:	0800623d 	.word	0x0800623d
 80061e0:	08006219 	.word	0x08006219
 80061e4:	0800623d 	.word	0x0800623d
 80061e8:	0800623d 	.word	0x0800623d
 80061ec:	0800623d 	.word	0x0800623d
 80061f0:	0800622b 	.word	0x0800622b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0202 	orr.w	r2, r2, #2
 8006202:	60da      	str	r2, [r3, #12]
      break;
 8006204:	e01d      	b.n	8006242 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0204 	orr.w	r2, r2, #4
 8006214:	60da      	str	r2, [r3, #12]
      break;
 8006216:	e014      	b.n	8006242 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0208 	orr.w	r2, r2, #8
 8006226:	60da      	str	r2, [r3, #12]
      break;
 8006228:	e00b      	b.n	8006242 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0210 	orr.w	r2, r2, #16
 8006238:	60da      	str	r2, [r3, #12]
      break;
 800623a:	e002      	b.n	8006242 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
      break;
 8006240:	bf00      	nop
  }

  if (status == HAL_OK)
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d179      	bne.n	800633c <HAL_TIM_OC_Start_IT+0x28c>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 ffbd 	bl	80071d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a3b      	ldr	r2, [pc, #236]	@ (8006348 <HAL_TIM_OC_Start_IT+0x298>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d018      	beq.n	8006292 <HAL_TIM_OC_Start_IT+0x1e2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a39      	ldr	r2, [pc, #228]	@ (800634c <HAL_TIM_OC_Start_IT+0x29c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <HAL_TIM_OC_Start_IT+0x1e2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a38      	ldr	r2, [pc, #224]	@ (8006350 <HAL_TIM_OC_Start_IT+0x2a0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00e      	beq.n	8006292 <HAL_TIM_OC_Start_IT+0x1e2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a36      	ldr	r2, [pc, #216]	@ (8006354 <HAL_TIM_OC_Start_IT+0x2a4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_TIM_OC_Start_IT+0x1e2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a35      	ldr	r2, [pc, #212]	@ (8006358 <HAL_TIM_OC_Start_IT+0x2a8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d004      	beq.n	8006292 <HAL_TIM_OC_Start_IT+0x1e2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a33      	ldr	r2, [pc, #204]	@ (800635c <HAL_TIM_OC_Start_IT+0x2ac>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d101      	bne.n	8006296 <HAL_TIM_OC_Start_IT+0x1e6>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <HAL_TIM_OC_Start_IT+0x1e8>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a25      	ldr	r2, [pc, #148]	@ (8006348 <HAL_TIM_OC_Start_IT+0x298>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d022      	beq.n	80062fc <HAL_TIM_OC_Start_IT+0x24c>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062be:	d01d      	beq.n	80062fc <HAL_TIM_OC_Start_IT+0x24c>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a26      	ldr	r2, [pc, #152]	@ (8006360 <HAL_TIM_OC_Start_IT+0x2b0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d018      	beq.n	80062fc <HAL_TIM_OC_Start_IT+0x24c>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a25      	ldr	r2, [pc, #148]	@ (8006364 <HAL_TIM_OC_Start_IT+0x2b4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d013      	beq.n	80062fc <HAL_TIM_OC_Start_IT+0x24c>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a23      	ldr	r2, [pc, #140]	@ (8006368 <HAL_TIM_OC_Start_IT+0x2b8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00e      	beq.n	80062fc <HAL_TIM_OC_Start_IT+0x24c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1a      	ldr	r2, [pc, #104]	@ (800634c <HAL_TIM_OC_Start_IT+0x29c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d009      	beq.n	80062fc <HAL_TIM_OC_Start_IT+0x24c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a18      	ldr	r2, [pc, #96]	@ (8006350 <HAL_TIM_OC_Start_IT+0x2a0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <HAL_TIM_OC_Start_IT+0x24c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a19      	ldr	r2, [pc, #100]	@ (800635c <HAL_TIM_OC_Start_IT+0x2ac>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d115      	bne.n	8006328 <HAL_TIM_OC_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	4b1a      	ldr	r3, [pc, #104]	@ (800636c <HAL_TIM_OC_Start_IT+0x2bc>)
 8006304:	4013      	ands	r3, r2
 8006306:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b06      	cmp	r3, #6
 800630c:	d015      	beq.n	800633a <HAL_TIM_OC_Start_IT+0x28a>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006314:	d011      	beq.n	800633a <HAL_TIM_OC_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006326:	e008      	b.n	800633a <HAL_TIM_OC_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e000      	b.n	800633c <HAL_TIM_OC_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800
 800635c:	40015000 	.word	0x40015000
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800
 8006368:	40000c00 	.word	0x40000c00
 800636c:	00010007 	.word	0x00010007

08006370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e049      	b.n	8006416 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fa fff8 	bl	800138c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f000 fb30 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d020      	beq.n	8006482 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01b      	beq.n	8006482 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f06f 0202 	mvn.w	r2, #2
 8006452:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fab5 	bl	80069d8 <HAL_TIM_IC_CaptureCallback>
 800646e:	e005      	b.n	800647c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fa f92b 	bl	80006cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fab8 	bl	80069ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d020      	beq.n	80064ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01b      	beq.n	80064ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f06f 0204 	mvn.w	r2, #4
 800649e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa8f 	bl	80069d8 <HAL_TIM_IC_CaptureCallback>
 80064ba:	e005      	b.n	80064c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fa f905 	bl	80006cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fa92 	bl	80069ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d020      	beq.n	800651a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01b      	beq.n	800651a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f06f 0208 	mvn.w	r2, #8
 80064ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2204      	movs	r2, #4
 80064f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fa69 	bl	80069d8 <HAL_TIM_IC_CaptureCallback>
 8006506:	e005      	b.n	8006514 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7fa f8df 	bl	80006cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa6c 	bl	80069ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b00      	cmp	r3, #0
 8006522:	d020      	beq.n	8006566 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01b      	beq.n	8006566 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f06f 0210 	mvn.w	r2, #16
 8006536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2208      	movs	r2, #8
 800653c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa43 	bl	80069d8 <HAL_TIM_IC_CaptureCallback>
 8006552:	e005      	b.n	8006560 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fa f8b9 	bl	80006cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa46 	bl	80069ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00c      	beq.n	800658a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f06f 0201 	mvn.w	r2, #1
 8006582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7fa f8cd 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00c      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 ff66 	bl	8007484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00c      	beq.n	80065dc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 ff5e 	bl	8007498 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00c      	beq.n	8006600 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa00 	bl	8006a00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0220 	mvn.w	r2, #32
 800661c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 ff26 	bl	8007470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 ff32 	bl	80074ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00c      	beq.n	800666c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 ff2a 	bl	80074c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00c      	beq.n	8006690 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 ff22 	bl	80074d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80066ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 ff1a 	bl	80074e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_TIM_OC_ConfigChannel+0x1e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e066      	b.n	80067a8 <HAL_TIM_OC_ConfigChannel+0xec>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b14      	cmp	r3, #20
 80066e6:	d857      	bhi.n	8006798 <HAL_TIM_OC_ConfigChannel+0xdc>
 80066e8:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006745 	.word	0x08006745
 80066f4:	08006799 	.word	0x08006799
 80066f8:	08006799 	.word	0x08006799
 80066fc:	08006799 	.word	0x08006799
 8006700:	08006753 	.word	0x08006753
 8006704:	08006799 	.word	0x08006799
 8006708:	08006799 	.word	0x08006799
 800670c:	08006799 	.word	0x08006799
 8006710:	08006761 	.word	0x08006761
 8006714:	08006799 	.word	0x08006799
 8006718:	08006799 	.word	0x08006799
 800671c:	08006799 	.word	0x08006799
 8006720:	0800676f 	.word	0x0800676f
 8006724:	08006799 	.word	0x08006799
 8006728:	08006799 	.word	0x08006799
 800672c:	08006799 	.word	0x08006799
 8006730:	0800677d 	.word	0x0800677d
 8006734:	08006799 	.word	0x08006799
 8006738:	08006799 	.word	0x08006799
 800673c:	08006799 	.word	0x08006799
 8006740:	0800678b 	.word	0x0800678b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fa16 	bl	8006b7c <TIM_OC1_SetConfig>
      break;
 8006750:	e025      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 faa9 	bl	8006cb0 <TIM_OC2_SetConfig>
      break;
 800675e:	e01e      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fb36 	bl	8006dd8 <TIM_OC3_SetConfig>
      break;
 800676c:	e017      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fbc1 	bl	8006efc <TIM_OC4_SetConfig>
      break;
 800677a:	e010      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fc4e 	bl	8007024 <TIM_OC5_SetConfig>
      break;
 8006788:	e009      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fcb1 	bl	80070f8 <TIM_OC6_SetConfig>
      break;
 8006796:	e002      	b.n	800679e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]
      break;
 800679c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e0ff      	b.n	80069ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b14      	cmp	r3, #20
 80067da:	f200 80f0 	bhi.w	80069be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067de:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006839 	.word	0x08006839
 80067e8:	080069bf 	.word	0x080069bf
 80067ec:	080069bf 	.word	0x080069bf
 80067f0:	080069bf 	.word	0x080069bf
 80067f4:	08006879 	.word	0x08006879
 80067f8:	080069bf 	.word	0x080069bf
 80067fc:	080069bf 	.word	0x080069bf
 8006800:	080069bf 	.word	0x080069bf
 8006804:	080068bb 	.word	0x080068bb
 8006808:	080069bf 	.word	0x080069bf
 800680c:	080069bf 	.word	0x080069bf
 8006810:	080069bf 	.word	0x080069bf
 8006814:	080068fb 	.word	0x080068fb
 8006818:	080069bf 	.word	0x080069bf
 800681c:	080069bf 	.word	0x080069bf
 8006820:	080069bf 	.word	0x080069bf
 8006824:	0800693d 	.word	0x0800693d
 8006828:	080069bf 	.word	0x080069bf
 800682c:	080069bf 	.word	0x080069bf
 8006830:	080069bf 	.word	0x080069bf
 8006834:	0800697d 	.word	0x0800697d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68b9      	ldr	r1, [r7, #8]
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f99c 	bl	8006b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0208 	orr.w	r2, r2, #8
 8006852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0204 	bic.w	r2, r2, #4
 8006862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6999      	ldr	r1, [r3, #24]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	619a      	str	r2, [r3, #24]
      break;
 8006876:	e0a5      	b.n	80069c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fa16 	bl	8006cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6999      	ldr	r1, [r3, #24]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	021a      	lsls	r2, r3, #8
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	619a      	str	r2, [r3, #24]
      break;
 80068b8:	e084      	b.n	80069c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fa89 	bl	8006dd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69da      	ldr	r2, [r3, #28]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f042 0208 	orr.w	r2, r2, #8
 80068d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69da      	ldr	r2, [r3, #28]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0204 	bic.w	r2, r2, #4
 80068e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69d9      	ldr	r1, [r3, #28]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	61da      	str	r2, [r3, #28]
      break;
 80068f8:	e064      	b.n	80069c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fafb 	bl	8006efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69d9      	ldr	r1, [r3, #28]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	021a      	lsls	r2, r3, #8
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	61da      	str	r2, [r3, #28]
      break;
 800693a:	e043      	b.n	80069c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fb6e 	bl	8007024 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0208 	orr.w	r2, r2, #8
 8006956:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0204 	bic.w	r2, r2, #4
 8006966:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800697a:	e023      	b.n	80069c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fbb8 	bl	80070f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006996:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	021a      	lsls	r2, r3, #8
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80069bc:	e002      	b.n	80069c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
      break;
 80069c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop

080069d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a4c      	ldr	r2, [pc, #304]	@ (8006b58 <TIM_Base_SetConfig+0x144>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d017      	beq.n	8006a5c <TIM_Base_SetConfig+0x48>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a32:	d013      	beq.n	8006a5c <TIM_Base_SetConfig+0x48>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a49      	ldr	r2, [pc, #292]	@ (8006b5c <TIM_Base_SetConfig+0x148>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00f      	beq.n	8006a5c <TIM_Base_SetConfig+0x48>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a48      	ldr	r2, [pc, #288]	@ (8006b60 <TIM_Base_SetConfig+0x14c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00b      	beq.n	8006a5c <TIM_Base_SetConfig+0x48>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a47      	ldr	r2, [pc, #284]	@ (8006b64 <TIM_Base_SetConfig+0x150>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d007      	beq.n	8006a5c <TIM_Base_SetConfig+0x48>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a46      	ldr	r2, [pc, #280]	@ (8006b68 <TIM_Base_SetConfig+0x154>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_Base_SetConfig+0x48>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a45      	ldr	r2, [pc, #276]	@ (8006b6c <TIM_Base_SetConfig+0x158>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d108      	bne.n	8006a6e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a39      	ldr	r2, [pc, #228]	@ (8006b58 <TIM_Base_SetConfig+0x144>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d023      	beq.n	8006abe <TIM_Base_SetConfig+0xaa>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a7c:	d01f      	beq.n	8006abe <TIM_Base_SetConfig+0xaa>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a36      	ldr	r2, [pc, #216]	@ (8006b5c <TIM_Base_SetConfig+0x148>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d01b      	beq.n	8006abe <TIM_Base_SetConfig+0xaa>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a35      	ldr	r2, [pc, #212]	@ (8006b60 <TIM_Base_SetConfig+0x14c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d017      	beq.n	8006abe <TIM_Base_SetConfig+0xaa>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a34      	ldr	r2, [pc, #208]	@ (8006b64 <TIM_Base_SetConfig+0x150>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d013      	beq.n	8006abe <TIM_Base_SetConfig+0xaa>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a33      	ldr	r2, [pc, #204]	@ (8006b68 <TIM_Base_SetConfig+0x154>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00f      	beq.n	8006abe <TIM_Base_SetConfig+0xaa>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a33      	ldr	r2, [pc, #204]	@ (8006b70 <TIM_Base_SetConfig+0x15c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00b      	beq.n	8006abe <TIM_Base_SetConfig+0xaa>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a32      	ldr	r2, [pc, #200]	@ (8006b74 <TIM_Base_SetConfig+0x160>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d007      	beq.n	8006abe <TIM_Base_SetConfig+0xaa>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a31      	ldr	r2, [pc, #196]	@ (8006b78 <TIM_Base_SetConfig+0x164>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <TIM_Base_SetConfig+0xaa>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8006b6c <TIM_Base_SetConfig+0x158>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d108      	bne.n	8006ad0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a18      	ldr	r2, [pc, #96]	@ (8006b58 <TIM_Base_SetConfig+0x144>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <TIM_Base_SetConfig+0x110>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a1a      	ldr	r2, [pc, #104]	@ (8006b68 <TIM_Base_SetConfig+0x154>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00f      	beq.n	8006b24 <TIM_Base_SetConfig+0x110>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1a      	ldr	r2, [pc, #104]	@ (8006b70 <TIM_Base_SetConfig+0x15c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_Base_SetConfig+0x110>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a19      	ldr	r2, [pc, #100]	@ (8006b74 <TIM_Base_SetConfig+0x160>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_Base_SetConfig+0x110>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a18      	ldr	r2, [pc, #96]	@ (8006b78 <TIM_Base_SetConfig+0x164>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_Base_SetConfig+0x110>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a13      	ldr	r2, [pc, #76]	@ (8006b6c <TIM_Base_SetConfig+0x158>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d103      	bne.n	8006b2c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d105      	bne.n	8006b4a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f023 0201 	bic.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	611a      	str	r2, [r3, #16]
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	40000400 	.word	0x40000400
 8006b60:	40000800 	.word	0x40000800
 8006b64:	40000c00 	.word	0x40000c00
 8006b68:	40013400 	.word	0x40013400
 8006b6c:	40015000 	.word	0x40015000
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800

08006b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f023 0201 	bic.w	r2, r3, #1
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f023 0302 	bic.w	r3, r3, #2
 8006bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a30      	ldr	r2, [pc, #192]	@ (8006c98 <TIM_OC1_SetConfig+0x11c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d013      	beq.n	8006c04 <TIM_OC1_SetConfig+0x88>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a2f      	ldr	r2, [pc, #188]	@ (8006c9c <TIM_OC1_SetConfig+0x120>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00f      	beq.n	8006c04 <TIM_OC1_SetConfig+0x88>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a2e      	ldr	r2, [pc, #184]	@ (8006ca0 <TIM_OC1_SetConfig+0x124>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00b      	beq.n	8006c04 <TIM_OC1_SetConfig+0x88>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a2d      	ldr	r2, [pc, #180]	@ (8006ca4 <TIM_OC1_SetConfig+0x128>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d007      	beq.n	8006c04 <TIM_OC1_SetConfig+0x88>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca8 <TIM_OC1_SetConfig+0x12c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_OC1_SetConfig+0x88>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8006cac <TIM_OC1_SetConfig+0x130>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d10c      	bne.n	8006c1e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f023 0308 	bic.w	r3, r3, #8
 8006c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f023 0304 	bic.w	r3, r3, #4
 8006c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a1d      	ldr	r2, [pc, #116]	@ (8006c98 <TIM_OC1_SetConfig+0x11c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <TIM_OC1_SetConfig+0xd2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a1c      	ldr	r2, [pc, #112]	@ (8006c9c <TIM_OC1_SetConfig+0x120>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00f      	beq.n	8006c4e <TIM_OC1_SetConfig+0xd2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca0 <TIM_OC1_SetConfig+0x124>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00b      	beq.n	8006c4e <TIM_OC1_SetConfig+0xd2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1a      	ldr	r2, [pc, #104]	@ (8006ca4 <TIM_OC1_SetConfig+0x128>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d007      	beq.n	8006c4e <TIM_OC1_SetConfig+0xd2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a19      	ldr	r2, [pc, #100]	@ (8006ca8 <TIM_OC1_SetConfig+0x12c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_OC1_SetConfig+0xd2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a18      	ldr	r2, [pc, #96]	@ (8006cac <TIM_OC1_SetConfig+0x130>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d111      	bne.n	8006c72 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	621a      	str	r2, [r3, #32]
}
 8006c8c:	bf00      	nop
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	40013400 	.word	0x40013400
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800
 8006cac:	40015000 	.word	0x40015000

08006cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f023 0210 	bic.w	r2, r3, #16
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	021b      	lsls	r3, r3, #8
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f023 0320 	bic.w	r3, r3, #32
 8006cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8006dc0 <TIM_OC2_SetConfig+0x110>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_OC2_SetConfig+0x74>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a2b      	ldr	r2, [pc, #172]	@ (8006dc4 <TIM_OC2_SetConfig+0x114>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC2_SetConfig+0x74>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc8 <TIM_OC2_SetConfig+0x118>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10d      	bne.n	8006d40 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc0 <TIM_OC2_SetConfig+0x110>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <TIM_OC2_SetConfig+0xc0>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <TIM_OC2_SetConfig+0x114>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00f      	beq.n	8006d70 <TIM_OC2_SetConfig+0xc0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a1e      	ldr	r2, [pc, #120]	@ (8006dcc <TIM_OC2_SetConfig+0x11c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00b      	beq.n	8006d70 <TIM_OC2_SetConfig+0xc0>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd0 <TIM_OC2_SetConfig+0x120>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d007      	beq.n	8006d70 <TIM_OC2_SetConfig+0xc0>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd4 <TIM_OC2_SetConfig+0x124>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_OC2_SetConfig+0xc0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a17      	ldr	r2, [pc, #92]	@ (8006dc8 <TIM_OC2_SetConfig+0x118>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d113      	bne.n	8006d98 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	621a      	str	r2, [r3, #32]
}
 8006db2:	bf00      	nop
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40012c00 	.word	0x40012c00
 8006dc4:	40013400 	.word	0x40013400
 8006dc8:	40015000 	.word	0x40015000
 8006dcc:	40014000 	.word	0x40014000
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a2b      	ldr	r2, [pc, #172]	@ (8006ee4 <TIM_OC3_SetConfig+0x10c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d007      	beq.n	8006e4a <TIM_OC3_SetConfig+0x72>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8006ee8 <TIM_OC3_SetConfig+0x110>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_OC3_SetConfig+0x72>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a29      	ldr	r2, [pc, #164]	@ (8006eec <TIM_OC3_SetConfig+0x114>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d10d      	bne.n	8006e66 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a1e      	ldr	r2, [pc, #120]	@ (8006ee4 <TIM_OC3_SetConfig+0x10c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <TIM_OC3_SetConfig+0xbe>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <TIM_OC3_SetConfig+0x110>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00f      	beq.n	8006e96 <TIM_OC3_SetConfig+0xbe>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef0 <TIM_OC3_SetConfig+0x118>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00b      	beq.n	8006e96 <TIM_OC3_SetConfig+0xbe>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef4 <TIM_OC3_SetConfig+0x11c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d007      	beq.n	8006e96 <TIM_OC3_SetConfig+0xbe>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef8 <TIM_OC3_SetConfig+0x120>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_OC3_SetConfig+0xbe>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a16      	ldr	r2, [pc, #88]	@ (8006eec <TIM_OC3_SetConfig+0x114>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d113      	bne.n	8006ebe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	621a      	str	r2, [r3, #32]
}
 8006ed8:	bf00      	nop
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	40012c00 	.word	0x40012c00
 8006ee8:	40013400 	.word	0x40013400
 8006eec:	40015000 	.word	0x40015000
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800

08006efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	031b      	lsls	r3, r3, #12
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800700c <TIM_OC4_SetConfig+0x110>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_OC4_SetConfig+0x74>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a2b      	ldr	r2, [pc, #172]	@ (8007010 <TIM_OC4_SetConfig+0x114>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC4_SetConfig+0x74>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8007014 <TIM_OC4_SetConfig+0x118>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10d      	bne.n	8006f8c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	031b      	lsls	r3, r3, #12
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800700c <TIM_OC4_SetConfig+0x110>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d013      	beq.n	8006fbc <TIM_OC4_SetConfig+0xc0>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a1e      	ldr	r2, [pc, #120]	@ (8007010 <TIM_OC4_SetConfig+0x114>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00f      	beq.n	8006fbc <TIM_OC4_SetConfig+0xc0>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8007018 <TIM_OC4_SetConfig+0x11c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00b      	beq.n	8006fbc <TIM_OC4_SetConfig+0xc0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800701c <TIM_OC4_SetConfig+0x120>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d007      	beq.n	8006fbc <TIM_OC4_SetConfig+0xc0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1c      	ldr	r2, [pc, #112]	@ (8007020 <TIM_OC4_SetConfig+0x124>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC4_SetConfig+0xc0>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a17      	ldr	r2, [pc, #92]	@ (8007014 <TIM_OC4_SetConfig+0x118>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d113      	bne.n	8006fe4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fc2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006fca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	019b      	lsls	r3, r3, #6
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	019b      	lsls	r3, r3, #6
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00
 8007010:	40013400 	.word	0x40013400
 8007014:	40015000 	.word	0x40015000
 8007018:	40014000 	.word	0x40014000
 800701c:	40014400 	.word	0x40014400
 8007020:	40014800 	.word	0x40014800

08007024 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	041b      	lsls	r3, r3, #16
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4313      	orrs	r3, r2
 8007074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <TIM_OC5_SetConfig+0xbc>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d013      	beq.n	80070a6 <TIM_OC5_SetConfig+0x82>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a18      	ldr	r2, [pc, #96]	@ (80070e4 <TIM_OC5_SetConfig+0xc0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00f      	beq.n	80070a6 <TIM_OC5_SetConfig+0x82>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a17      	ldr	r2, [pc, #92]	@ (80070e8 <TIM_OC5_SetConfig+0xc4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00b      	beq.n	80070a6 <TIM_OC5_SetConfig+0x82>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a16      	ldr	r2, [pc, #88]	@ (80070ec <TIM_OC5_SetConfig+0xc8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d007      	beq.n	80070a6 <TIM_OC5_SetConfig+0x82>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a15      	ldr	r2, [pc, #84]	@ (80070f0 <TIM_OC5_SetConfig+0xcc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_OC5_SetConfig+0x82>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a14      	ldr	r2, [pc, #80]	@ (80070f4 <TIM_OC5_SetConfig+0xd0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d109      	bne.n	80070ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	621a      	str	r2, [r3, #32]
}
 80070d4:	bf00      	nop
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40013400 	.word	0x40013400
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40014400 	.word	0x40014400
 80070f0:	40014800 	.word	0x40014800
 80070f4:	40015000 	.word	0x40015000

080070f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800712a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800713e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	051b      	lsls	r3, r3, #20
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a1a      	ldr	r2, [pc, #104]	@ (80071b8 <TIM_OC6_SetConfig+0xc0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d013      	beq.n	800717c <TIM_OC6_SetConfig+0x84>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a19      	ldr	r2, [pc, #100]	@ (80071bc <TIM_OC6_SetConfig+0xc4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00f      	beq.n	800717c <TIM_OC6_SetConfig+0x84>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a18      	ldr	r2, [pc, #96]	@ (80071c0 <TIM_OC6_SetConfig+0xc8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00b      	beq.n	800717c <TIM_OC6_SetConfig+0x84>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a17      	ldr	r2, [pc, #92]	@ (80071c4 <TIM_OC6_SetConfig+0xcc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d007      	beq.n	800717c <TIM_OC6_SetConfig+0x84>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a16      	ldr	r2, [pc, #88]	@ (80071c8 <TIM_OC6_SetConfig+0xd0>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_OC6_SetConfig+0x84>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a15      	ldr	r2, [pc, #84]	@ (80071cc <TIM_OC6_SetConfig+0xd4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d109      	bne.n	8007190 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	029b      	lsls	r3, r3, #10
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	621a      	str	r2, [r3, #32]
}
 80071aa:	bf00      	nop
 80071ac:	371c      	adds	r7, #28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	40012c00 	.word	0x40012c00
 80071bc:	40013400 	.word	0x40013400
 80071c0:	40014000 	.word	0x40014000
 80071c4:	40014400 	.word	0x40014400
 80071c8:	40014800 	.word	0x40014800
 80071cc:	40015000 	.word	0x40015000

080071d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	2201      	movs	r2, #1
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a1a      	ldr	r2, [r3, #32]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	43db      	mvns	r3, r3
 80071f2:	401a      	ands	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a1a      	ldr	r2, [r3, #32]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	fa01 f303 	lsl.w	r3, r1, r3
 8007208:	431a      	orrs	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	621a      	str	r2, [r3, #32]
}
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007230:	2302      	movs	r3, #2
 8007232:	e074      	b.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a34      	ldr	r2, [pc, #208]	@ (800732c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d009      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a33      	ldr	r2, [pc, #204]	@ (8007330 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d004      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a31      	ldr	r2, [pc, #196]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d108      	bne.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007278:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800728a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a21      	ldr	r2, [pc, #132]	@ (800732c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d022      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b4:	d01d      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d018      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1d      	ldr	r2, [pc, #116]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a15      	ldr	r2, [pc, #84]	@ (8007330 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a18      	ldr	r2, [pc, #96]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a11      	ldr	r2, [pc, #68]	@ (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10c      	bne.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	4313      	orrs	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40013400 	.word	0x40013400
 8007334:	40015000 	.word	0x40015000
 8007338:	40000400 	.word	0x40000400
 800733c:	40000800 	.word	0x40000800
 8007340:	40000c00 	.word	0x40000c00
 8007344:	40014000 	.word	0x40014000

08007348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007360:	2302      	movs	r3, #2
 8007362:	e078      	b.n	8007456 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4313      	orrs	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	041b      	lsls	r3, r3, #16
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007464 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007468 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a19      	ldr	r2, [pc, #100]	@ (800746c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d11c      	bne.n	8007444 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007414:	051b      	lsls	r3, r3, #20
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40012c00 	.word	0x40012c00
 8007468:	40013400 	.word	0x40013400
 800746c:	40015000 	.word	0x40015000

08007470 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e042      	b.n	8007594 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7f9 fff3 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2224      	movs	r2, #36	@ 0x24
 800752a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0201 	bic.w	r2, r2, #1
 800753c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fb24 	bl	8007b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f825 	bl	800759c <UART_SetConfig>
 8007552:	4603      	mov	r3, r0
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e01b      	b.n	8007594 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800756a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800757a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fba3 	bl	8007cd8 <UART_CheckIdleState>
 8007592:	4603      	mov	r3, r0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800759c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075a0:	b08c      	sub	sp, #48	@ 0x30
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	4baa      	ldr	r3, [pc, #680]	@ (8007874 <UART_SetConfig+0x2d8>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	6812      	ldr	r2, [r2, #0]
 80075d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075d4:	430b      	orrs	r3, r1
 80075d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a9f      	ldr	r2, [pc, #636]	@ (8007878 <UART_SetConfig+0x2dc>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d004      	beq.n	8007608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007604:	4313      	orrs	r3, r2
 8007606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007612:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	6812      	ldr	r2, [r2, #0]
 800761a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800761c:	430b      	orrs	r3, r1
 800761e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007626:	f023 010f 	bic.w	r1, r3, #15
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a90      	ldr	r2, [pc, #576]	@ (800787c <UART_SetConfig+0x2e0>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d125      	bne.n	800768c <UART_SetConfig+0xf0>
 8007640:	4b8f      	ldr	r3, [pc, #572]	@ (8007880 <UART_SetConfig+0x2e4>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b03      	cmp	r3, #3
 800764c:	d81a      	bhi.n	8007684 <UART_SetConfig+0xe8>
 800764e:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <UART_SetConfig+0xb8>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	08007665 	.word	0x08007665
 8007658:	08007675 	.word	0x08007675
 800765c:	0800766d 	.word	0x0800766d
 8007660:	0800767d 	.word	0x0800767d
 8007664:	2301      	movs	r3, #1
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766a:	e116      	b.n	800789a <UART_SetConfig+0x2fe>
 800766c:	2302      	movs	r3, #2
 800766e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007672:	e112      	b.n	800789a <UART_SetConfig+0x2fe>
 8007674:	2304      	movs	r3, #4
 8007676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800767a:	e10e      	b.n	800789a <UART_SetConfig+0x2fe>
 800767c:	2308      	movs	r3, #8
 800767e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007682:	e10a      	b.n	800789a <UART_SetConfig+0x2fe>
 8007684:	2310      	movs	r3, #16
 8007686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800768a:	e106      	b.n	800789a <UART_SetConfig+0x2fe>
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a7c      	ldr	r2, [pc, #496]	@ (8007884 <UART_SetConfig+0x2e8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d138      	bne.n	8007708 <UART_SetConfig+0x16c>
 8007696:	4b7a      	ldr	r3, [pc, #488]	@ (8007880 <UART_SetConfig+0x2e4>)
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769c:	f003 030c 	and.w	r3, r3, #12
 80076a0:	2b0c      	cmp	r3, #12
 80076a2:	d82d      	bhi.n	8007700 <UART_SetConfig+0x164>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <UART_SetConfig+0x110>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076e1 	.word	0x080076e1
 80076b0:	08007701 	.word	0x08007701
 80076b4:	08007701 	.word	0x08007701
 80076b8:	08007701 	.word	0x08007701
 80076bc:	080076f1 	.word	0x080076f1
 80076c0:	08007701 	.word	0x08007701
 80076c4:	08007701 	.word	0x08007701
 80076c8:	08007701 	.word	0x08007701
 80076cc:	080076e9 	.word	0x080076e9
 80076d0:	08007701 	.word	0x08007701
 80076d4:	08007701 	.word	0x08007701
 80076d8:	08007701 	.word	0x08007701
 80076dc:	080076f9 	.word	0x080076f9
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076e6:	e0d8      	b.n	800789a <UART_SetConfig+0x2fe>
 80076e8:	2302      	movs	r3, #2
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ee:	e0d4      	b.n	800789a <UART_SetConfig+0x2fe>
 80076f0:	2304      	movs	r3, #4
 80076f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076f6:	e0d0      	b.n	800789a <UART_SetConfig+0x2fe>
 80076f8:	2308      	movs	r3, #8
 80076fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076fe:	e0cc      	b.n	800789a <UART_SetConfig+0x2fe>
 8007700:	2310      	movs	r3, #16
 8007702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007706:	e0c8      	b.n	800789a <UART_SetConfig+0x2fe>
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a5e      	ldr	r2, [pc, #376]	@ (8007888 <UART_SetConfig+0x2ec>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d125      	bne.n	800775e <UART_SetConfig+0x1c2>
 8007712:	4b5b      	ldr	r3, [pc, #364]	@ (8007880 <UART_SetConfig+0x2e4>)
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007718:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800771c:	2b30      	cmp	r3, #48	@ 0x30
 800771e:	d016      	beq.n	800774e <UART_SetConfig+0x1b2>
 8007720:	2b30      	cmp	r3, #48	@ 0x30
 8007722:	d818      	bhi.n	8007756 <UART_SetConfig+0x1ba>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d00a      	beq.n	800773e <UART_SetConfig+0x1a2>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d814      	bhi.n	8007756 <UART_SetConfig+0x1ba>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <UART_SetConfig+0x19a>
 8007730:	2b10      	cmp	r3, #16
 8007732:	d008      	beq.n	8007746 <UART_SetConfig+0x1aa>
 8007734:	e00f      	b.n	8007756 <UART_SetConfig+0x1ba>
 8007736:	2300      	movs	r3, #0
 8007738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773c:	e0ad      	b.n	800789a <UART_SetConfig+0x2fe>
 800773e:	2302      	movs	r3, #2
 8007740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007744:	e0a9      	b.n	800789a <UART_SetConfig+0x2fe>
 8007746:	2304      	movs	r3, #4
 8007748:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774c:	e0a5      	b.n	800789a <UART_SetConfig+0x2fe>
 800774e:	2308      	movs	r3, #8
 8007750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007754:	e0a1      	b.n	800789a <UART_SetConfig+0x2fe>
 8007756:	2310      	movs	r3, #16
 8007758:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800775c:	e09d      	b.n	800789a <UART_SetConfig+0x2fe>
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a4a      	ldr	r2, [pc, #296]	@ (800788c <UART_SetConfig+0x2f0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d125      	bne.n	80077b4 <UART_SetConfig+0x218>
 8007768:	4b45      	ldr	r3, [pc, #276]	@ (8007880 <UART_SetConfig+0x2e4>)
 800776a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007772:	2bc0      	cmp	r3, #192	@ 0xc0
 8007774:	d016      	beq.n	80077a4 <UART_SetConfig+0x208>
 8007776:	2bc0      	cmp	r3, #192	@ 0xc0
 8007778:	d818      	bhi.n	80077ac <UART_SetConfig+0x210>
 800777a:	2b80      	cmp	r3, #128	@ 0x80
 800777c:	d00a      	beq.n	8007794 <UART_SetConfig+0x1f8>
 800777e:	2b80      	cmp	r3, #128	@ 0x80
 8007780:	d814      	bhi.n	80077ac <UART_SetConfig+0x210>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <UART_SetConfig+0x1f0>
 8007786:	2b40      	cmp	r3, #64	@ 0x40
 8007788:	d008      	beq.n	800779c <UART_SetConfig+0x200>
 800778a:	e00f      	b.n	80077ac <UART_SetConfig+0x210>
 800778c:	2300      	movs	r3, #0
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007792:	e082      	b.n	800789a <UART_SetConfig+0x2fe>
 8007794:	2302      	movs	r3, #2
 8007796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800779a:	e07e      	b.n	800789a <UART_SetConfig+0x2fe>
 800779c:	2304      	movs	r3, #4
 800779e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a2:	e07a      	b.n	800789a <UART_SetConfig+0x2fe>
 80077a4:	2308      	movs	r3, #8
 80077a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077aa:	e076      	b.n	800789a <UART_SetConfig+0x2fe>
 80077ac:	2310      	movs	r3, #16
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b2:	e072      	b.n	800789a <UART_SetConfig+0x2fe>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a35      	ldr	r2, [pc, #212]	@ (8007890 <UART_SetConfig+0x2f4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d12a      	bne.n	8007814 <UART_SetConfig+0x278>
 80077be:	4b30      	ldr	r3, [pc, #192]	@ (8007880 <UART_SetConfig+0x2e4>)
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077cc:	d01a      	beq.n	8007804 <UART_SetConfig+0x268>
 80077ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d2:	d81b      	bhi.n	800780c <UART_SetConfig+0x270>
 80077d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d8:	d00c      	beq.n	80077f4 <UART_SetConfig+0x258>
 80077da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077de:	d815      	bhi.n	800780c <UART_SetConfig+0x270>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <UART_SetConfig+0x250>
 80077e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077e8:	d008      	beq.n	80077fc <UART_SetConfig+0x260>
 80077ea:	e00f      	b.n	800780c <UART_SetConfig+0x270>
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f2:	e052      	b.n	800789a <UART_SetConfig+0x2fe>
 80077f4:	2302      	movs	r3, #2
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077fa:	e04e      	b.n	800789a <UART_SetConfig+0x2fe>
 80077fc:	2304      	movs	r3, #4
 80077fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007802:	e04a      	b.n	800789a <UART_SetConfig+0x2fe>
 8007804:	2308      	movs	r3, #8
 8007806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800780a:	e046      	b.n	800789a <UART_SetConfig+0x2fe>
 800780c:	2310      	movs	r3, #16
 800780e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007812:	e042      	b.n	800789a <UART_SetConfig+0x2fe>
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a17      	ldr	r2, [pc, #92]	@ (8007878 <UART_SetConfig+0x2dc>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d13a      	bne.n	8007894 <UART_SetConfig+0x2f8>
 800781e:	4b18      	ldr	r3, [pc, #96]	@ (8007880 <UART_SetConfig+0x2e4>)
 8007820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007824:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800782c:	d01a      	beq.n	8007864 <UART_SetConfig+0x2c8>
 800782e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007832:	d81b      	bhi.n	800786c <UART_SetConfig+0x2d0>
 8007834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007838:	d00c      	beq.n	8007854 <UART_SetConfig+0x2b8>
 800783a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800783e:	d815      	bhi.n	800786c <UART_SetConfig+0x2d0>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <UART_SetConfig+0x2b0>
 8007844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007848:	d008      	beq.n	800785c <UART_SetConfig+0x2c0>
 800784a:	e00f      	b.n	800786c <UART_SetConfig+0x2d0>
 800784c:	2300      	movs	r3, #0
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007852:	e022      	b.n	800789a <UART_SetConfig+0x2fe>
 8007854:	2302      	movs	r3, #2
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800785a:	e01e      	b.n	800789a <UART_SetConfig+0x2fe>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007862:	e01a      	b.n	800789a <UART_SetConfig+0x2fe>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800786a:	e016      	b.n	800789a <UART_SetConfig+0x2fe>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007872:	e012      	b.n	800789a <UART_SetConfig+0x2fe>
 8007874:	cfff69f3 	.word	0xcfff69f3
 8007878:	40008000 	.word	0x40008000
 800787c:	40013800 	.word	0x40013800
 8007880:	40021000 	.word	0x40021000
 8007884:	40004400 	.word	0x40004400
 8007888:	40004800 	.word	0x40004800
 800788c:	40004c00 	.word	0x40004c00
 8007890:	40005000 	.word	0x40005000
 8007894:	2310      	movs	r3, #16
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4aae      	ldr	r2, [pc, #696]	@ (8007b58 <UART_SetConfig+0x5bc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	f040 8097 	bne.w	80079d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d823      	bhi.n	80078f6 <UART_SetConfig+0x35a>
 80078ae:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <UART_SetConfig+0x318>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078f7 	.word	0x080078f7
 80078bc:	080078e1 	.word	0x080078e1
 80078c0:	080078f7 	.word	0x080078f7
 80078c4:	080078e7 	.word	0x080078e7
 80078c8:	080078f7 	.word	0x080078f7
 80078cc:	080078f7 	.word	0x080078f7
 80078d0:	080078f7 	.word	0x080078f7
 80078d4:	080078ef 	.word	0x080078ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078d8:	f7fd fff8 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
 80078dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078de:	e010      	b.n	8007902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078e0:	4b9e      	ldr	r3, [pc, #632]	@ (8007b5c <UART_SetConfig+0x5c0>)
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078e4:	e00d      	b.n	8007902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078e6:	f7fd ff83 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 80078ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078ec:	e009      	b.n	8007902 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078f4:	e005      	b.n	8007902 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007900:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8130 	beq.w	8007b6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790e:	4a94      	ldr	r2, [pc, #592]	@ (8007b60 <UART_SetConfig+0x5c4>)
 8007910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007914:	461a      	mov	r2, r3
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	fbb3 f3f2 	udiv	r3, r3, r2
 800791c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	4613      	mov	r3, r2
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	4413      	add	r3, r2
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	429a      	cmp	r2, r3
 800792c:	d305      	bcc.n	800793a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	429a      	cmp	r2, r3
 8007938:	d903      	bls.n	8007942 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007940:	e113      	b.n	8007b6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007944:	2200      	movs	r2, #0
 8007946:	60bb      	str	r3, [r7, #8]
 8007948:	60fa      	str	r2, [r7, #12]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794e:	4a84      	ldr	r2, [pc, #528]	@ (8007b60 <UART_SetConfig+0x5c4>)
 8007950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007954:	b29b      	uxth	r3, r3
 8007956:	2200      	movs	r2, #0
 8007958:	603b      	str	r3, [r7, #0]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007960:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007964:	f7f8 fc58 	bl	8000218 <__aeabi_uldivmod>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	4610      	mov	r0, r2
 800796e:	4619      	mov	r1, r3
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	020b      	lsls	r3, r1, #8
 800797a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800797e:	0202      	lsls	r2, r0, #8
 8007980:	6979      	ldr	r1, [r7, #20]
 8007982:	6849      	ldr	r1, [r1, #4]
 8007984:	0849      	lsrs	r1, r1, #1
 8007986:	2000      	movs	r0, #0
 8007988:	460c      	mov	r4, r1
 800798a:	4605      	mov	r5, r0
 800798c:	eb12 0804 	adds.w	r8, r2, r4
 8007990:	eb43 0905 	adc.w	r9, r3, r5
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	469a      	mov	sl, r3
 800799c:	4693      	mov	fp, r2
 800799e:	4652      	mov	r2, sl
 80079a0:	465b      	mov	r3, fp
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	f7f8 fc37 	bl	8000218 <__aeabi_uldivmod>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4613      	mov	r3, r2
 80079b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079b8:	d308      	bcc.n	80079cc <UART_SetConfig+0x430>
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c0:	d204      	bcs.n	80079cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6a3a      	ldr	r2, [r7, #32]
 80079c8:	60da      	str	r2, [r3, #12]
 80079ca:	e0ce      	b.n	8007b6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079d2:	e0ca      	b.n	8007b6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079dc:	d166      	bne.n	8007aac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80079de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079e2:	2b08      	cmp	r3, #8
 80079e4:	d827      	bhi.n	8007a36 <UART_SetConfig+0x49a>
 80079e6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ec <UART_SetConfig+0x450>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	08007a37 	.word	0x08007a37
 80079fc:	08007a27 	.word	0x08007a27
 8007a00:	08007a37 	.word	0x08007a37
 8007a04:	08007a37 	.word	0x08007a37
 8007a08:	08007a37 	.word	0x08007a37
 8007a0c:	08007a2f 	.word	0x08007a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a10:	f7fd ff5c 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
 8007a14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a16:	e014      	b.n	8007a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a18:	f7fd ff6e 	bl	80058f8 <HAL_RCC_GetPCLK2Freq>
 8007a1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a1e:	e010      	b.n	8007a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a20:	4b4e      	ldr	r3, [pc, #312]	@ (8007b5c <UART_SetConfig+0x5c0>)
 8007a22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a24:	e00d      	b.n	8007a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a26:	f7fd fee3 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 8007a2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a2c:	e009      	b.n	8007a42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a34:	e005      	b.n	8007a42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 8090 	beq.w	8007b6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4e:	4a44      	ldr	r2, [pc, #272]	@ (8007b60 <UART_SetConfig+0x5c4>)
 8007a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a5c:	005a      	lsls	r2, r3, #1
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	085b      	lsrs	r3, r3, #1
 8007a64:	441a      	add	r2, r3
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	2b0f      	cmp	r3, #15
 8007a74:	d916      	bls.n	8007aa4 <UART_SetConfig+0x508>
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a7c:	d212      	bcs.n	8007aa4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f023 030f 	bic.w	r3, r3, #15
 8007a86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	8bfb      	ldrh	r3, [r7, #30]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	8bfa      	ldrh	r2, [r7, #30]
 8007aa0:	60da      	str	r2, [r3, #12]
 8007aa2:	e062      	b.n	8007b6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007aaa:	e05e      	b.n	8007b6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d828      	bhi.n	8007b06 <UART_SetConfig+0x56a>
 8007ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <UART_SetConfig+0x520>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007af1 	.word	0x08007af1
 8007ac8:	08007b07 	.word	0x08007b07
 8007acc:	08007af7 	.word	0x08007af7
 8007ad0:	08007b07 	.word	0x08007b07
 8007ad4:	08007b07 	.word	0x08007b07
 8007ad8:	08007b07 	.word	0x08007b07
 8007adc:	08007aff 	.word	0x08007aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae0:	f7fd fef4 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
 8007ae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ae6:	e014      	b.n	8007b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ae8:	f7fd ff06 	bl	80058f8 <HAL_RCC_GetPCLK2Freq>
 8007aec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007aee:	e010      	b.n	8007b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b5c <UART_SetConfig+0x5c0>)
 8007af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007af4:	e00d      	b.n	8007b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007af6:	f7fd fe7b 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 8007afa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007afc:	e009      	b.n	8007b12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b04:	e005      	b.n	8007b12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b10:	bf00      	nop
    }

    if (pclk != 0U)
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d028      	beq.n	8007b6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1c:	4a10      	ldr	r2, [pc, #64]	@ (8007b60 <UART_SetConfig+0x5c4>)
 8007b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	085b      	lsrs	r3, r3, #1
 8007b30:	441a      	add	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	d910      	bls.n	8007b64 <UART_SetConfig+0x5c8>
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b48:	d20c      	bcs.n	8007b64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60da      	str	r2, [r3, #12]
 8007b54:	e009      	b.n	8007b6a <UART_SetConfig+0x5ce>
 8007b56:	bf00      	nop
 8007b58:	40008000 	.word	0x40008000
 8007b5c:	00f42400 	.word	0x00f42400
 8007b60:	08008270 	.word	0x08008270
      }
      else
      {
        ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	2200      	movs	r2, #0
 8007b84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3730      	adds	r7, #48	@ 0x30
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d01a      	beq.n	8007caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c92:	d10a      	bne.n	8007caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	605a      	str	r2, [r3, #4]
  }
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b098      	sub	sp, #96	@ 0x60
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ce8:	f7f9 fd76 	bl	80017d8 <HAL_GetTick>
 8007cec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d12f      	bne.n	8007d5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d04:	2200      	movs	r2, #0
 8007d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f88e 	bl	8007e2c <UART_WaitOnFlagUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d022      	beq.n	8007d5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e6      	bne.n	8007d16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e063      	b.n	8007e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0304 	and.w	r3, r3, #4
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d149      	bne.n	8007dfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d72:	2200      	movs	r2, #0
 8007d74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f857 	bl	8007e2c <UART_WaitOnFlagUntilTimeout>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d03c      	beq.n	8007dfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	623b      	str	r3, [r7, #32]
   return(result);
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e6      	bne.n	8007d84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f023 0301 	bic.w	r3, r3, #1
 8007dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dd6:	61fa      	str	r2, [r7, #28]
 8007dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	69b9      	ldr	r1, [r7, #24]
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	617b      	str	r3, [r7, #20]
   return(result);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e5      	bne.n	8007db6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e012      	b.n	8007e24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3758      	adds	r7, #88	@ 0x58
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e3c:	e04f      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d04b      	beq.n	8007ede <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e46:	f7f9 fcc7 	bl	80017d8 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d302      	bcc.n	8007e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e04e      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0304 	and.w	r3, r3, #4
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d037      	beq.n	8007ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b80      	cmp	r3, #128	@ 0x80
 8007e72:	d034      	beq.n	8007ede <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2b40      	cmp	r3, #64	@ 0x40
 8007e78:	d031      	beq.n	8007ede <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d110      	bne.n	8007eaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f838 	bl	8007f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2208      	movs	r2, #8
 8007e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e029      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eb8:	d111      	bne.n	8007ede <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f81e 	bl	8007f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e00f      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69da      	ldr	r2, [r3, #28]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	bf0c      	ite	eq
 8007eee:	2301      	moveq	r3, #1
 8007ef0:	2300      	movne	r3, #0
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d0a0      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b095      	sub	sp, #84	@ 0x54
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e6      	bne.n	8007f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3308      	adds	r3, #8
 8007f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f56:	f023 0301 	bic.w	r3, r3, #1
 8007f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3308      	adds	r3, #8
 8007f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e3      	bne.n	8007f40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d118      	bne.n	8007fb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f023 0310 	bic.w	r3, r3, #16
 8007f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f9e:	61bb      	str	r3, [r7, #24]
 8007fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	6979      	ldr	r1, [r7, #20]
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	613b      	str	r3, [r7, #16]
   return(result);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e6      	bne.n	8007f80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007fc6:	bf00      	nop
 8007fc8:	3754      	adds	r7, #84	@ 0x54
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b085      	sub	sp, #20
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e027      	b.n	8008038 <HAL_UARTEx_DisableFifoMode+0x66>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2224      	movs	r2, #36	@ 0x24
 8007ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0201 	bic.w	r2, r2, #1
 800800e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008016:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008058:	2302      	movs	r3, #2
 800805a:	e02d      	b.n	80080b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2224      	movs	r2, #36	@ 0x24
 8008068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0201 	bic.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f84f 	bl	800813c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e02d      	b.n	8008134 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2224      	movs	r2, #36	@ 0x24
 80080e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f811 	bl	800813c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008148:	2b00      	cmp	r3, #0
 800814a:	d108      	bne.n	800815e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800815c:	e031      	b.n	80081c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800815e:	2308      	movs	r3, #8
 8008160:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008162:	2308      	movs	r3, #8
 8008164:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	0e5b      	lsrs	r3, r3, #25
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	0f5b      	lsrs	r3, r3, #29
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	7b3a      	ldrb	r2, [r7, #12]
 800818a:	4911      	ldr	r1, [pc, #68]	@ (80081d0 <UARTEx_SetNbDataToProcess+0x94>)
 800818c:	5c8a      	ldrb	r2, [r1, r2]
 800818e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008192:	7b3a      	ldrb	r2, [r7, #12]
 8008194:	490f      	ldr	r1, [pc, #60]	@ (80081d4 <UARTEx_SetNbDataToProcess+0x98>)
 8008196:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008198:	fb93 f3f2 	sdiv	r3, r3, r2
 800819c:	b29a      	uxth	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	7b7a      	ldrb	r2, [r7, #13]
 80081a8:	4909      	ldr	r1, [pc, #36]	@ (80081d0 <UARTEx_SetNbDataToProcess+0x94>)
 80081aa:	5c8a      	ldrb	r2, [r1, r2]
 80081ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081b0:	7b7a      	ldrb	r2, [r7, #13]
 80081b2:	4908      	ldr	r1, [pc, #32]	@ (80081d4 <UARTEx_SetNbDataToProcess+0x98>)
 80081b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081c2:	bf00      	nop
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	08008288 	.word	0x08008288
 80081d4:	08008290 	.word	0x08008290

080081d8 <memset>:
 80081d8:	4402      	add	r2, r0
 80081da:	4603      	mov	r3, r0
 80081dc:	4293      	cmp	r3, r2
 80081de:	d100      	bne.n	80081e2 <memset+0xa>
 80081e0:	4770      	bx	lr
 80081e2:	f803 1b01 	strb.w	r1, [r3], #1
 80081e6:	e7f9      	b.n	80081dc <memset+0x4>

080081e8 <__libc_init_array>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	4d0d      	ldr	r5, [pc, #52]	@ (8008220 <__libc_init_array+0x38>)
 80081ec:	4c0d      	ldr	r4, [pc, #52]	@ (8008224 <__libc_init_array+0x3c>)
 80081ee:	1b64      	subs	r4, r4, r5
 80081f0:	10a4      	asrs	r4, r4, #2
 80081f2:	2600      	movs	r6, #0
 80081f4:	42a6      	cmp	r6, r4
 80081f6:	d109      	bne.n	800820c <__libc_init_array+0x24>
 80081f8:	4d0b      	ldr	r5, [pc, #44]	@ (8008228 <__libc_init_array+0x40>)
 80081fa:	4c0c      	ldr	r4, [pc, #48]	@ (800822c <__libc_init_array+0x44>)
 80081fc:	f000 f818 	bl	8008230 <_init>
 8008200:	1b64      	subs	r4, r4, r5
 8008202:	10a4      	asrs	r4, r4, #2
 8008204:	2600      	movs	r6, #0
 8008206:	42a6      	cmp	r6, r4
 8008208:	d105      	bne.n	8008216 <__libc_init_array+0x2e>
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008210:	4798      	blx	r3
 8008212:	3601      	adds	r6, #1
 8008214:	e7ee      	b.n	80081f4 <__libc_init_array+0xc>
 8008216:	f855 3b04 	ldr.w	r3, [r5], #4
 800821a:	4798      	blx	r3
 800821c:	3601      	adds	r6, #1
 800821e:	e7f2      	b.n	8008206 <__libc_init_array+0x1e>
 8008220:	080082a0 	.word	0x080082a0
 8008224:	080082a0 	.word	0x080082a0
 8008228:	080082a0 	.word	0x080082a0
 800822c:	080082a4 	.word	0x080082a4

08008230 <_init>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	bf00      	nop
 8008234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008236:	bc08      	pop	{r3}
 8008238:	469e      	mov	lr, r3
 800823a:	4770      	bx	lr

0800823c <_fini>:
 800823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823e:	bf00      	nop
 8008240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008242:	bc08      	pop	{r3}
 8008244:	469e      	mov	lr, r3
 8008246:	4770      	bx	lr
