
convCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c90  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008e68  08008e68  00009e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ec0  08008ec0  0000a018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ec0  08008ec0  00009ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ec8  08008ec8  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ec8  08008ec8  00009ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ecc  08008ecc  00009ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08008ed0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000018  08008ee8  0000a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08008ee8  0000a2dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001baab  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363a  00000000  00000000  00025af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00029130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001263  00000000  00000000  0002a900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241e2  00000000  00000000  0002bb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcce  00000000  00000000  0004fd45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f43f3  00000000  00000000  0006ba13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fe06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a4  00000000  00000000  0015fe4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001663f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008e50 	.word	0x08008e50

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08008e50 	.word	0x08008e50

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <canPublishTelemetry>:
}
}


void canPublishTelemetry(SystemState_t state, uint32_t errorMask, const SensorValues_t* s)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b092      	sub	sp, #72	@ 0x48
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	73fb      	strb	r3, [r7, #15]
uint8_t data[8];


data[0] = (uint8_t)state;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
data[1] = (uint8_t)(errorMask & 0xFF);
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41


int16_t vin = (int16_t)(s->voltageIn / 100);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a27      	ldr	r2, [pc, #156]	@ (8000604 <canPublishTelemetry+0xc0>)
 8000566:	fb82 1203 	smull	r1, r2, r2, r3
 800056a:	1152      	asrs	r2, r2, #5
 800056c:	17db      	asrs	r3, r3, #31
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	b21b      	sxth	r3, r3
 8000572:	87fb      	strh	r3, [r7, #62]	@ 0x3e
int16_t vout = (int16_t)(s->voltageOut / 100);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	4a22      	ldr	r2, [pc, #136]	@ (8000604 <canPublishTelemetry+0xc0>)
 800057a:	fb82 1203 	smull	r1, r2, r2, r3
 800057e:	1152      	asrs	r2, r2, #5
 8000580:	17db      	asrs	r3, r3, #31
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	b21b      	sxth	r3, r3
 8000586:	87bb      	strh	r3, [r7, #60]	@ 0x3c
int16_t iL = (int16_t)(s->currentChoke / 100);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	4a1d      	ldr	r2, [pc, #116]	@ (8000604 <canPublishTelemetry+0xc0>)
 800058e:	fb82 1203 	smull	r1, r2, r2, r3
 8000592:	1152      	asrs	r2, r2, #5
 8000594:	17db      	asrs	r3, r3, #31
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	b21b      	sxth	r3, r3
 800059a:	877b      	strh	r3, [r7, #58]	@ 0x3a


memcpy(&data[2], &vin, 2);
 800059c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800059e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
memcpy(&data[4], &vout, 2);
 80005a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80005a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
memcpy(&data[6], &iL, 2);
 80005a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80005aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


FDCAN_TxHeaderTypeDef txHeader;
txHeader.Identifier = 0x123;
 80005ae:	f240 1323 	movw	r3, #291	@ 0x123
 80005b2:	617b      	str	r3, [r7, #20]
txHeader.IdType = FDCAN_STANDARD_ID;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
txHeader.DataLength = FDCAN_DLC_BYTES_8;
 80005bc:	2308      	movs	r3, #8
 80005be:	623b      	str	r3, [r7, #32]
txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28
txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80005cc:	2300      	movs	r3, #0
 80005ce:	633b      	str	r3, [r7, #48]	@ 0x30


uint32_t mailbox;


if (sendOnCan1)
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <canPublishTelemetry+0xc4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d008      	beq.n	80005ea <canPublishTelemetry+0xa6>
HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, data);
 80005d8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	480a      	ldr	r0, [pc, #40]	@ (800060c <canPublishTelemetry+0xc8>)
 80005e4:	f004 f980 	bl	80048e8 <HAL_FDCAN_AddMessageToTxFifoQ>
else
HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, data);
}
 80005e8:	e007      	b.n	80005fa <canPublishTelemetry+0xb6>
HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, data);
 80005ea:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	4806      	ldr	r0, [pc, #24]	@ (8000610 <canPublishTelemetry+0xcc>)
 80005f6:	f004 f977 	bl	80048e8 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80005fa:	bf00      	nop
 80005fc:	3748      	adds	r7, #72	@ 0x48
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	51eb851f 	.word	0x51eb851f
 8000608:	20000000 	.word	0x20000000
 800060c:	200000c8 	.word	0x200000c8
 8000610:	2000012c 	.word	0x2000012c

08000614 <canReceiveHandler>:


void canReceiveHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	@ 0x40
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
FDCAN_RxHeaderTypeDef rxHeader;
uint8_t data[8];


if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, data) != HAL_OK)
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	f107 0218 	add.w	r2, r7, #24
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f004 f9a2 	bl	8004970 <HAL_FDCAN_GetRxMessage>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d116      	bne.n	8000660 <canReceiveHandler+0x4c>
return;


requestedMode = (SystemState_t)data[0];
 8000632:	7c3a      	ldrb	r2, [r7, #16]
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <canReceiveHandler+0x54>)
 8000636:	701a      	strb	r2, [r3, #0]


int16_t vDeci = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	81fb      	strh	r3, [r7, #14]
memcpy(&vDeci, &data[1], 2);
 800063c:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8000640:	b29b      	uxth	r3, r3
 8000642:	81fb      	strh	r3, [r7, #14]
targetVoltage = (float)vDeci * 100.0f;
 8000644:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000648:	ee07 3a90 	vmov	s15, r3
 800064c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000650:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800066c <canReceiveHandler+0x58>
 8000654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <canReceiveHandler+0x5c>)
 800065a:	edc3 7a00 	vstr	s15, [r3]
 800065e:	e000      	b.n	8000662 <canReceiveHandler+0x4e>
return;
 8000660:	bf00      	nop
}
 8000662:	3740      	adds	r7, #64	@ 0x40
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000038 	.word	0x20000038
 800066c:	42c80000 	.word	0x42c80000
 8000670:	20000034 	.word	0x20000034

08000674 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
canReceiveHandler(hfdcan);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ffc8 	bl	8000614 <canReceiveHandler>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <ConverterGetState>:

// call pwm disable until safe
pwmDisable();
}

SystemState_t ConverterGetState(void) {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
    return currentState;
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <ConverterGetState+0x14>)
 8000692:	781b      	ldrb	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000001 	.word	0x20000001

080006a4 <converterProcess>:


void converterProcess(SystemState_t state)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	@ 0x30
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
sensorRead();
 80006ae:	f000 fe97 	bl	80013e0 <sensorRead>
const SensorValues_t* s = sensorGetValues();
 80006b2:	f000 ff1b 	bl	80014ec <sensorGetValues>
 80006b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
uint32_t errMask=ERR_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
uint8_t hasErr = diagCheck(s, &errMask);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80006c4:	f000 f88c 	bl	80007e0 <diagCheck>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
globalErrorMask = errMask;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4a3d      	ldr	r2, [pc, #244]	@ (80007c8 <converterProcess+0x124>)
 80006d2:	6013      	str	r3, [r2, #0]


// mode change -> reset pid
if((uint32_t)state != lastMode)
 80006d4:	79fa      	ldrb	r2, [r7, #7]
 80006d6:	4b3d      	ldr	r3, [pc, #244]	@ (80007cc <converterProcess+0x128>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d005      	beq.n	80006ea <converterProcess+0x46>
{
piReset(&currentPid);
 80006de:	483c      	ldr	r0, [pc, #240]	@ (80007d0 <converterProcess+0x12c>)
 80006e0:	f000 fdcb 	bl	800127a <piReset>
lastMode = (uint32_t)state;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4a39      	ldr	r2, [pc, #228]	@ (80007cc <converterProcess+0x128>)
 80006e8:	6013      	str	r3, [r2, #0]
}

pwmHandlerProcess(hasErr, state);
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fe4c 	bl	8001390 <pwmHandlerProcess>

// run PID only in charge/discharge
if(state == STATE_CHARGE)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d11f      	bne.n	800073e <converterProcess+0x9a>
{
// Example: setpoint could come from CAN. Here placeholder
float setpoint = 1000.0f; // mV or other unit depending on design
 80006fe:	4b35      	ldr	r3, [pc, #212]	@ (80007d4 <converterProcess+0x130>)
 8000700:	61bb      	str	r3, [r7, #24]
float measurement = (float)s->voltageOut;
 8000702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800070e:	edc7 7a05 	vstr	s15, [r7, #20]
// dt in seconds
float duty = piUpdate(&currentPid, setpoint, measurement);
 8000712:	edd7 0a05 	vldr	s1, [r7, #20]
 8000716:	ed97 0a06 	vldr	s0, [r7, #24]
 800071a:	482d      	ldr	r0, [pc, #180]	@ (80007d0 <converterProcess+0x12c>)
 800071c:	f000 fd24 	bl	8001168 <piUpdate>
 8000720:	ee07 0a90 	vmov	s15, r0
 8000724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000728:	edc7 7a04 	vstr	s15, [r7, #16]
pwmSetDuty((uint32_t)duty);
 800072c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000734:	ee17 0a90 	vmov	r0, s15
 8000738:	f000 fdd0 	bl	80012dc <pwmSetDuty>
 800073c:	e021      	b.n	8000782 <converterProcess+0xde>
}
else if(state == STATE_DISCHARGE)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b04      	cmp	r3, #4
 8000742:	d11e      	bne.n	8000782 <converterProcess+0xde>
{
float setpoint = -1000.0f; // for example
 8000744:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <converterProcess+0x134>)
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
float measurement = (float)s->currentOut;
 8000748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	ee07 3a90 	vmov	s15, r3
 8000750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000754:	edc7 7a08 	vstr	s15, [r7, #32]
float duty = piUpdate(&currentPid, setpoint, measurement);
 8000758:	edd7 0a08 	vldr	s1, [r7, #32]
 800075c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8000760:	481b      	ldr	r0, [pc, #108]	@ (80007d0 <converterProcess+0x12c>)
 8000762:	f000 fd01 	bl	8001168 <piUpdate>
 8000766:	ee07 0a90 	vmov	s15, r0
 800076a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800076e:	edc7 7a07 	vstr	s15, [r7, #28]
pwmSetDuty((uint32_t)duty);
 8000772:	edd7 7a07 	vldr	s15, [r7, #28]
 8000776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077a:	ee17 0a90 	vmov	r0, s15
 800077e:	f000 fdad 	bl	80012dc <pwmSetDuty>

}


// precharge
if(state == STATE_PRECHARGE && currentState != STATE_PRECHARGE)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d113      	bne.n	80007b0 <converterProcess+0x10c>
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <converterProcess+0x138>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d00f      	beq.n	80007b0 <converterProcess+0x10c>
{
	currentState = STATE_PRECHARGE;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <converterProcess+0x138>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
	prechargeStart();
 8000796:	f000 fd81 	bl	800129c <prechargeStart>
	if (!hasErr){
 800079a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d103      	bne.n	80007aa <converterProcess+0x106>
		currentState = STATE_IDLE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <converterProcess+0x138>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e002      	b.n	80007b0 <converterProcess+0x10c>
	}
	else
	{
		currentState = STATE_INIT;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <converterProcess+0x138>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	701a      	strb	r2, [r3, #0]
	}
	}

canPublishTelemetry(currentState, errMask,  s);
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <converterProcess+0x138>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	68f9      	ldr	r1, [r7, #12]
 80007b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fec3 	bl	8000544 <canPublishTelemetry>
}
 80007be:	bf00      	nop
 80007c0:	3730      	adds	r7, #48	@ 0x30
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000058 	.word	0x20000058
 80007cc:	20000004 	.word	0x20000004
 80007d0:	2000003c 	.word	0x2000003c
 80007d4:	447a0000 	.word	0x447a0000
 80007d8:	c47a0000 	.word	0xc47a0000
 80007dc:	20000001 	.word	0x20000001

080007e0 <diagCheck>:
// any init if needed
}


uint8_t diagCheck(const SensorValues_t* sensorValues, uint32_t* errorMask)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
    uint8_t hasError = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
    *errorMask = ERR_NONE;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]

    // --- Проверка токов ---
    if (sensorValues->currentIn > I_MAX ||
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	ee07 3a90 	vmov	s15, r3
 80007fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000800:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80009a0 <diagCheck+0x1c0>
 8000804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080c:	dc40      	bgt.n	8000890 <diagCheck+0xb0>
        sensorValues->currentIn < -I_MAX ||
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (sensorValues->currentIn > I_MAX ||
 800081a:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80009a4 <diagCheck+0x1c4>
 800081e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000826:	d433      	bmi.n	8000890 <diagCheck+0xb0>
        sensorValues->currentOut > I_MAX ||
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sensorValues->currentIn < -I_MAX ||
 8000834:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80009a0 <diagCheck+0x1c0>
 8000838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800083c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000840:	dc26      	bgt.n	8000890 <diagCheck+0xb0>
        sensorValues->currentOut < -I_MAX ||
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	ee07 3a90 	vmov	s15, r3
 800084a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sensorValues->currentOut > I_MAX ||
 800084e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80009a4 <diagCheck+0x1c4>
 8000852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085a:	d419      	bmi.n	8000890 <diagCheck+0xb0>
        sensorValues->currentChoke > I_MAX ||
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sensorValues->currentOut < -I_MAX ||
 8000868:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80009a0 <diagCheck+0x1c0>
 800086c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000874:	dc0c      	bgt.n	8000890 <diagCheck+0xb0>
        sensorValues->currentChoke < -I_MAX)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	ee07 3a90 	vmov	s15, r3
 800087e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sensorValues->currentChoke > I_MAX ||
 8000882:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80009a4 <diagCheck+0x1c4>
 8000886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800088a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088e:	d507      	bpl.n	80008a0 <diagCheck+0xc0>
    {
        *errorMask |= ERR_OVERCURRENT;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f043 0204 	orr.w	r2, r3, #4
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	601a      	str	r2, [r3, #0]
        hasError = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
    }

    // --- Проверка напряжений ---
    if (sensorValues->voltageIn > VBUS_MAX ||
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ac:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80009a8 <diagCheck+0x1c8>
 80008b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b8:	dc0c      	bgt.n	80008d4 <diagCheck+0xf4>
        sensorValues->voltageOut > VBUS_MAX )
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (sensorValues->voltageIn > VBUS_MAX ||
 80008c6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80009a8 <diagCheck+0x1c8>
 80008ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d2:	dd07      	ble.n	80008e4 <diagCheck+0x104>
    {
        *errorMask |= ERR_OVERVOLTAGE;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f043 0201 	orr.w	r2, r3, #1
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	601a      	str	r2, [r3, #0]
        hasError = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
    }

    // --- Проверка напряжений ---
    if (sensorValues->voltageIn < VBUS_MIN ||
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f8:	d40a      	bmi.n	8000910 <diagCheck+0x130>
        sensorValues->voltageOut < VBUS_MIN)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	ee07 3a90 	vmov	s15, r3
 8000902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (sensorValues->voltageIn < VBUS_MIN ||
 8000906:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090e:	d507      	bpl.n	8000920 <diagCheck+0x140>
    {
        *errorMask |= ERR_UNDERVOLTAGE;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f043 0202 	orr.w	r2, r3, #2
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	601a      	str	r2, [r3, #0]
        hasError = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
    }


    // --- Проверка ошибок от IGBT-драйверов ---
    for (uint8_t i = 0; i < DRIVER_FAULT_PIN_COUNT; i++) {
 8000920:	2300      	movs	r3, #0
 8000922:	73bb      	strb	r3, [r7, #14]
 8000924:	e017      	b.n	8000956 <diagCheck+0x176>
        if (HAL_GPIO_ReadPin(DRIVER_FAULT_GPIOA, driverFaultPins[i]) == GPIO_PIN_SET) {
 8000926:	7bbb      	ldrb	r3, [r7, #14]
 8000928:	4a20      	ldr	r2, [pc, #128]	@ (80009ac <diagCheck+0x1cc>)
 800092a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000934:	f004 fd2a 	bl	800538c <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d108      	bne.n	8000950 <diagCheck+0x170>
            *errorMask |= ERR_IGBT_DRIVER;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f043 0208 	orr.w	r2, r3, #8
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	601a      	str	r2, [r3, #0]
            hasError = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
            break; // можно выйти сразу при первой ошибке
 800094e:	e005      	b.n	800095c <diagCheck+0x17c>
    for (uint8_t i = 0; i < DRIVER_FAULT_PIN_COUNT; i++) {
 8000950:	7bbb      	ldrb	r3, [r7, #14]
 8000952:	3301      	adds	r3, #1
 8000954:	73bb      	strb	r3, [r7, #14]
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d9e4      	bls.n	8000926 <diagCheck+0x146>
        }
    }

    for (uint8_t i = 0; i < DRIVER_FAULT_PIN_COUNT; i++) {
 800095c:	2300      	movs	r3, #0
 800095e:	737b      	strb	r3, [r7, #13]
 8000960:	e016      	b.n	8000990 <diagCheck+0x1b0>
        if (HAL_GPIO_ReadPin(DRIVER_FAULT_GPIOB, driverFaultPins[i]) == GPIO_PIN_SET) {
 8000962:	7b7b      	ldrb	r3, [r7, #13]
 8000964:	4a11      	ldr	r2, [pc, #68]	@ (80009ac <diagCheck+0x1cc>)
 8000966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096a:	4619      	mov	r1, r3
 800096c:	4810      	ldr	r0, [pc, #64]	@ (80009b0 <diagCheck+0x1d0>)
 800096e:	f004 fd0d 	bl	800538c <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d108      	bne.n	800098a <diagCheck+0x1aa>
            *errorMask |= ERR_IGBT_DRIVER;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f043 0208 	orr.w	r2, r3, #8
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	601a      	str	r2, [r3, #0]
            hasError = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
            break; // можно выйти сразу при первой ошибке
 8000988:	e005      	b.n	8000996 <diagCheck+0x1b6>
    for (uint8_t i = 0; i < DRIVER_FAULT_PIN_COUNT; i++) {
 800098a:	7b7b      	ldrb	r3, [r7, #13]
 800098c:	3301      	adds	r3, #1
 800098e:	737b      	strb	r3, [r7, #13]
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d9e5      	bls.n	8000962 <diagCheck+0x182>
        }
    }

    return hasError;
 8000996:	7bfb      	ldrb	r3, [r7, #15]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	451c4000 	.word	0x451c4000
 80009a4:	c51c4000 	.word	0xc51c4000
 80009a8:	44480000 	.word	0x44480000
 80009ac:	08008e68 	.word	0x08008e68
 80009b0:	48000400 	.word	0x48000400

080009b4 <HAL_TIM_OC_DelayElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a00 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d117      	bne.n	80009f6 <HAL_TIM_OC_DelayElapsedCallback+0x42>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	7f1b      	ldrb	r3, [r3, #28]
 80009ca:	2b08      	cmp	r3, #8
 80009cc:	d113      	bne.n	80009f6 <HAL_TIM_OC_DelayElapsedCallback+0x42>
    {
// This used for adding offset to adc calculation in case if it is unnecessary to get data every pwm period
    	if (tickADC == ADC_DIVIDER){
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b14      	cmp	r3, #20
 80009d4:	d10a      	bne.n	80009ec <HAL_TIM_OC_DelayElapsedCallback+0x38>
    		sensorRead();
 80009d6:	f000 fd03 	bl	80013e0 <sensorRead>
    		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80009da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009de:	480a      	ldr	r0, [pc, #40]	@ (8000a08 <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 80009e0:	f004 fd04 	bl	80053ec <HAL_GPIO_TogglePin>
    		tickADC = 0;
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
    	else
    	{
    		tickADC++;
    	}
    }
}
 80009ea:	e004      	b.n	80009f6 <HAL_TIM_OC_DelayElapsedCallback+0x42>
    		tickADC++;
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 80009f4:	6013      	str	r3, [r2, #0]
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40012c00 	.word	0x40012c00
 8000a04:	20000008 	.word	0x20000008
 8000a08:	48000800 	.word	0x48000800

08000a0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d10a      	bne.n	8000a34 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
    	converterProcess(ConverterGetState());
 8000a1e:	f7ff fe35 	bl	800068c <ConverterGetState>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe3d 	bl	80006a4 <converterProcess>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000a2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a2e:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a30:	f004 fcdc 	bl	80053ec <HAL_GPIO_TogglePin>
    }
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40001000 	.word	0x40001000
 8000a40:	48000800 	.word	0x48000800

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f001 f881 	bl	8001b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f81c 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 faf8 	bl	8001044 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a54:	f000 f862 	bl	8000b1c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000a58:	f000 f92e 	bl	8000cb8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a5c:	f000 f972 	bl	8000d44 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000a60:	f000 f9b6 	bl	8000dd0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000a64:	f000 faa2 	bl	8000fac <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000a68:	f000 fa6a 	bl	8000f40 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4); // adc interrupt
 8000a6c:	210c      	movs	r1, #12
 8000a6e:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <main+0x3c>)
 8000a70:	f005 fe38 	bl	80066e4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // main process interrupt
 8000a74:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <main+0x40>)
 8000a76:	f005 fd5b 	bl	8006530 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a7a:	bf00      	nop
 8000a7c:	e7fd      	b.n	8000a7a <main+0x36>
 8000a7e:	bf00      	nop
 8000a80:	20000190 	.word	0x20000190
 8000a84:	200001dc 	.word	0x200001dc

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b094      	sub	sp, #80	@ 0x50
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	2238      	movs	r2, #56	@ 0x38
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 f9ae 	bl	8008df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f004 fcb8 	bl	8005420 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ac6:	2355      	movs	r3, #85	@ 0x55
 8000ac8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 fd54 	bl	8005588 <HAL_RCC_OscConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ae6:	f000 fb39 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	230f      	movs	r3, #15
 8000aec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2303      	movs	r3, #3
 8000af0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000afa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000afe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2104      	movs	r1, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f005 f851 	bl	8005bac <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b10:	f000 fb24 	bl	800115c <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3750      	adds	r7, #80	@ 0x50
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b09a      	sub	sp, #104	@ 0x68
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b22:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b32:	2220      	movs	r2, #32
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f008 f95e 	bl	8008df8 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	223c      	movs	r2, #60	@ 0x3c
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f008 f958 	bl	8008df8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b48:	4b59      	ldr	r3, [pc, #356]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b50:	4b57      	ldr	r3, [pc, #348]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b52:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b58:	4b55      	ldr	r3, [pc, #340]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5e:	4b54      	ldr	r3, [pc, #336]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b64:	4b52      	ldr	r3, [pc, #328]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b6a:	4b51      	ldr	r3, [pc, #324]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b70:	4b4f      	ldr	r3, [pc, #316]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b76:	4b4e      	ldr	r3, [pc, #312]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000b82:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b88:	4b49      	ldr	r3, [pc, #292]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b90:	4b47      	ldr	r3, [pc, #284]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b96:	4b46      	ldr	r3, [pc, #280]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b9c:	4b44      	ldr	r3, [pc, #272]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba4:	4b42      	ldr	r3, [pc, #264]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000baa:	4b41      	ldr	r3, [pc, #260]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb2:	483f      	ldr	r0, [pc, #252]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000bb4:	f001 fad8 	bl	8002168 <HAL_ADC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000bbe:	f000 facd 	bl	800115c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bc6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4838      	ldr	r0, [pc, #224]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000bce:	f003 fb19 	bl	8004204 <HAL_ADCEx_MultiModeConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000bd8:	f000 fac0 	bl	800115c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bdc:	4b35      	ldr	r3, [pc, #212]	@ (8000cb4 <MX_ADC1_Init+0x198>)
 8000bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be0:	2306      	movs	r3, #6
 8000be2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000be4:	2300      	movs	r3, #0
 8000be6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be8:	237f      	movs	r3, #127	@ 0x7f
 8000bea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bec:	2304      	movs	r3, #4
 8000bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	482d      	ldr	r0, [pc, #180]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000bfc:	f001 fe9c 	bl	8002938 <HAL_ADC_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000c06:	f000 faa9 	bl	800115c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb4 <MX_ADC1_Init+0x198>)
 8000c0c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000c0e:	2309      	movs	r3, #9
 8000c10:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000c16:	237f      	movs	r3, #127	@ 0x7f
 8000c18:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000c22:	2304      	movs	r3, #4
 8000c24:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4819      	ldr	r0, [pc, #100]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000c4c:	f002 fdae 	bl	80037ac <HAL_ADCEx_InjectedConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000c56:	f000 fa81 	bl	800115c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000c5a:	f240 130f 	movw	r3, #271	@ 0x10f
 8000c5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000c66:	f002 fda1 	bl	80037ac <HAL_ADCEx_InjectedConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8000c70:	f000 fa74 	bl	800115c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000c74:	f240 2315 	movw	r3, #533	@ 0x215
 8000c78:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000c80:	f002 fd94 	bl	80037ac <HAL_ADCEx_InjectedConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000c8a:	f000 fa67 	bl	800115c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000c8e:	f240 331b 	movw	r3, #795	@ 0x31b
 8000c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_ADC1_Init+0x194>)
 8000c9a:	f002 fd87 	bl	80037ac <HAL_ADCEx_InjectedConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000ca4:	f000 fa5a 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3768      	adds	r7, #104	@ 0x68
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000005c 	.word	0x2000005c
 8000cb4:	04300002 	.word	0x04300002

08000cb8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cbe:	4a20      	ldr	r2, [pc, #128]	@ (8000d40 <MX_FDCAN1_Init+0x88>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000ce8:	2214      	movs	r2, #20
 8000cea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cf4:	220e      	movs	r2, #14
 8000cf6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d2a:	f003 fc83 	bl	8004634 <HAL_FDCAN_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000d34:	f000 fa12 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000c8 	.word	0x200000c8
 8000d40:	40006400 	.word	0x40006400

08000d44 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d48:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d4a:	4a20      	ldr	r2, [pc, #128]	@ (8000dcc <MX_FDCAN2_Init+0x88>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d54:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 20;
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d74:	2214      	movs	r2, #20
 8000d76:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d80:	220e      	movs	r2, #14
 8000d82:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000d84:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d86:	2202      	movs	r2, #2
 8000d88:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000da8:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <MX_FDCAN2_Init+0x84>)
 8000db6:	f003 fc3d 	bl	8004634 <HAL_FDCAN_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000dc0:	f000 f9cc 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000012c 	.word	0x2000012c
 8000dcc:	40006800 	.word	0x40006800

08000dd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b098      	sub	sp, #96	@ 0x60
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2234      	movs	r2, #52	@ 0x34
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fffb 	bl	8008df8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e02:	4b4d      	ldr	r3, [pc, #308]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e04:	4a4d      	ldr	r2, [pc, #308]	@ (8000f3c <MX_TIM1_Init+0x16c>)
 8000e06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e08:	4b4b      	ldr	r3, [pc, #300]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4721;
 8000e14:	4b48      	ldr	r3, [pc, #288]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e16:	f241 2271 	movw	r2, #4721	@ 0x1271
 8000e1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b46      	ldr	r3, [pc, #280]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e22:	4b45      	ldr	r3, [pc, #276]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b43      	ldr	r3, [pc, #268]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e2e:	4842      	ldr	r0, [pc, #264]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e30:	f005 fdb8 	bl	80069a4 <HAL_TIM_PWM_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 f98f 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e3e:	483e      	ldr	r0, [pc, #248]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e40:	f005 fbee 	bl	8006620 <HAL_TIM_OC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000e4a:	f000 f987 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e5a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4835      	ldr	r0, [pc, #212]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e62:	f006 ffc5 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000e6c:	f000 f976 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e70:	2360      	movs	r3, #96	@ 0x60
 8000e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e90:	2200      	movs	r2, #0
 8000e92:	4619      	mov	r1, r3
 8000e94:	4828      	ldr	r0, [pc, #160]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000e96:	f006 f955 	bl	8007144 <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000ea0:	f000 f95c 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4822      	ldr	r0, [pc, #136]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000eae:	f006 f949 	bl	8007144 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000eb8:	f000 f950 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 2300;
 8000ec0:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eca:	220c      	movs	r2, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	481a      	ldr	r0, [pc, #104]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000ed0:	f006 f8be 	bl	8007050 <HAL_TIM_OC_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000eda:	f000 f93f 	bl	800115c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ef2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000f1c:	f006 fffe 	bl	8007f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000f26:	f000 f919 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <MX_TIM1_Init+0x168>)
 8000f2c:	f000 fc9a 	bl	8001864 <HAL_TIM_MspPostInit>

}
 8000f30:	bf00      	nop
 8000f32:	3760      	adds	r7, #96	@ 0x60
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000190 	.word	0x20000190
 8000f3c:	40012c00 	.word	0x40012c00

08000f40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	@ (8000fa8 <MX_TIM6_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f72:	f005 fa85 	bl	8006480 <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f7c:	f000 f8ee 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_TIM6_Init+0x64>)
 8000f8e:	f006 ff2f 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f98:	f000 f8e0 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200001dc 	.word	0x200001dc
 8000fa8:	40001000 	.word	0x40001000

08000fac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fb2:	4a23      	ldr	r2, [pc, #140]	@ (8001040 <MX_USART3_UART_Init+0x94>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ff4:	4811      	ldr	r0, [pc, #68]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8000ff6:	f007 f890 	bl	800811a <HAL_UART_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001000:	f000 f8ac 	bl	800115c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001004:	2100      	movs	r1, #0
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <MX_USART3_UART_Init+0x90>)
 8001008:	f007 fe2c 	bl	8008c64 <HAL_UARTEx_SetTxFifoThreshold>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001012:	f000 f8a3 	bl	800115c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001016:	2100      	movs	r1, #0
 8001018:	4808      	ldr	r0, [pc, #32]	@ (800103c <MX_USART3_UART_Init+0x90>)
 800101a:	f007 fe61 	bl	8008ce0 <HAL_UARTEx_SetRxFifoThreshold>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001024:	f000 f89a 	bl	800115c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <MX_USART3_UART_Init+0x90>)
 800102a:	f007 fde2 	bl	8008bf2 <HAL_UARTEx_DisableFifoMode>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001034:	f000 f892 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000228 	.word	0x20000228
 8001040:	40004800 	.word	0x40004800

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b3d      	ldr	r3, [pc, #244]	@ (8001150 <MX_GPIO_Init+0x10c>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	4a3c      	ldr	r2, [pc, #240]	@ (8001150 <MX_GPIO_Init+0x10c>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001066:	4b3a      	ldr	r3, [pc, #232]	@ (8001150 <MX_GPIO_Init+0x10c>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001072:	4b37      	ldr	r3, [pc, #220]	@ (8001150 <MX_GPIO_Init+0x10c>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a36      	ldr	r2, [pc, #216]	@ (8001150 <MX_GPIO_Init+0x10c>)
 8001078:	f043 0320 	orr.w	r3, r3, #32
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b34      	ldr	r3, [pc, #208]	@ (8001150 <MX_GPIO_Init+0x10c>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0320 	and.w	r3, r3, #32
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b31      	ldr	r3, [pc, #196]	@ (8001150 <MX_GPIO_Init+0x10c>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a30      	ldr	r2, [pc, #192]	@ (8001150 <MX_GPIO_Init+0x10c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <MX_GPIO_Init+0x10c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <MX_GPIO_Init+0x10c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001150 <MX_GPIO_Init+0x10c>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <MX_GPIO_Init+0x10c>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80010c0:	4824      	ldr	r0, [pc, #144]	@ (8001154 <MX_GPIO_Init+0x110>)
 80010c2:	f004 f97b 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GATE_GPIO_Port, RELAY_GATE_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d0:	f004 f974 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80010d4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4819      	ldr	r0, [pc, #100]	@ (8001154 <MX_GPIO_Init+0x110>)
 80010ee:	f003 ffcb 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_Pin H2_Pin H3_Pin H4_Pin */
  GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin|H4_Pin;
 80010f2:	23f0      	movs	r3, #240	@ 0xf0
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001108:	f003 ffbe 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_GATE_Pin */
  GPIO_InitStruct.Pin = RELAY_GATE_Pin;
 800110c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_GATE_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f003 ffae 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : H5_Pin H6_Pin H7_Pin H8_Pin
                           USER_BTN_Pin */
  GPIO_InitStruct.Pin = H5_Pin|H6_Pin|H7_Pin|H8_Pin
 800112c:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 8001130:	617b      	str	r3, [r7, #20]
                          |USER_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_GPIO_Init+0x114>)
 8001142:	f003 ffa1 	bl	8005088 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	@ 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	48000800 	.word	0x48000800
 8001158:	48000400 	.word	0x48000400

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <Error_Handler+0x8>

08001168 <piUpdate>:
    pi->integral = 0.0f;
    pi->output = 0u;
}

unsigned int piUpdate(PIController_t* pi, float setpoint, float measurement)
{
 8001168:	b480      	push	{r7}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	ed87 0a02 	vstr	s0, [r7, #8]
 8001174:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 8001178:	ed97 7a02 	vldr	s14, [r7, #8]
 800117c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	edc7 7a04 	vstr	s15, [r7, #16]
    pi->integral += error * pi->ki * pi->dt;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	ed93 7a03 	vldr	s14, [r3, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	edd3 6a01 	vldr	s13, [r3, #4]
 8001194:	edd7 7a04 	vldr	s15, [r7, #16]
 8001198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	edd3 7a02 	vldr	s15, [r3, #8]
 80011a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	edc3 7a03 	vstr	s15, [r3, #12]

    // Антивиндап
    if (pi->integral > pi->outMax) pi->integral = pi->outMax;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80011bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	dd04      	ble.n	80011d0 <piUpdate+0x68>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	e00e      	b.n	80011ee <piUpdate+0x86>
    else if (pi->integral < pi->outMin) pi->integral = pi->outMin;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	d503      	bpl.n	80011ee <piUpdate+0x86>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	60da      	str	r2, [r3, #12]

    unsigned int output = pi->kp * error + pi->integral;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	ed93 7a00 	vldr	s14, [r3]
 80011f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800120a:	ee17 3a90 	vmov	r3, s15
 800120e:	617b      	str	r3, [r7, #20]

    // Ограничение выхода
    if (output > pi->outMax) output = pi->outMax;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	dd08      	ble.n	800123c <piUpdate+0xd4>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	e014      	b.n	8001266 <piUpdate+0xfe>
    else if (output < pi->outMin) output = pi->outMin;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	edd3 7a04 	vldr	s15, [r3, #16]
 800124c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	d507      	bpl.n	8001266 <piUpdate+0xfe>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	edd3 7a04 	vldr	s15, [r3, #16]
 800125c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001260:	ee17 3a90 	vmov	r3, s15
 8001264:	617b      	str	r3, [r7, #20]

    pi->output = output;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	619a      	str	r2, [r3, #24]
    return output;
 800126c:	697b      	ldr	r3, [r7, #20]
}
 800126e:	4618      	mov	r0, r3
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <piReset>:

void piReset(PIController_t* pi)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
    pi->integral = 0.0f;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
    pi->output = 0.0f;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <prechargeStart>:
prechargeDone = 0;
}


void prechargeStart(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
if(prechargeDone) return;
 80012a0:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <prechargeStart+0x3c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d115      	bne.n	80012d4 <prechargeStart+0x38>


HAL_GPIO_WritePin(PRECHARGE_GPIO_Port, PRECHARGE_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b2:	f004 f883 	bl	80053bc <HAL_GPIO_WritePin>
HAL_Delay(5000); // 5 seconds blocking start; could be made non-blocking
 80012b6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012ba:	f000 fcb9 	bl	8001c30 <HAL_Delay>
HAL_GPIO_WritePin(PRECHARGE_GPIO_Port, PRECHARGE_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c8:	f004 f878 	bl	80053bc <HAL_GPIO_WritePin>
prechargeDone = 1;
 80012cc:	4b02      	ldr	r3, [pc, #8]	@ (80012d8 <prechargeStart+0x3c>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	e000      	b.n	80012d6 <prechargeStart+0x3a>
if(prechargeDone) return;
 80012d4:	bf00      	nop
}
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200002bc 	.word	0x200002bc

080012dc <pwmSetDuty>:

extern TIM_HandleTypeDef htim1; // configured for PWM
static PWMState_t currentPWMState = STATE_DISABLE;

void pwmSetDuty(uint32_t duty)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
uint32_t arr = htim1.Instance->ARR;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <pwmSetDuty+0x38>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ea:	60fb      	str	r3, [r7, #12]
if(duty > arr) duty = arr;
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d901      	bls.n	80012f8 <pwmSetDuty+0x1c>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	607b      	str	r3, [r7, #4]
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <pwmSetDuty+0x38>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	635a      	str	r2, [r3, #52]	@ 0x34
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty);
 8001300:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <pwmSetDuty+0x38>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000190 	.word	0x20000190

08001318 <pwmEnable>:
return htim1.Instance->ARR;
}


void pwmEnable(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	if (currentPWMState == STATE_DISABLE)
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <pwmEnable+0x38>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d112      	bne.n	800134a <pwmEnable+0x32>
	{
	    // Включаем PWM
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001324:	2100      	movs	r1, #0
 8001326:	480b      	ldr	r0, [pc, #44]	@ (8001354 <pwmEnable+0x3c>)
 8001328:	f005 fb94 	bl	8006a54 <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800132c:	2100      	movs	r1, #0
 800132e:	4809      	ldr	r0, [pc, #36]	@ (8001354 <pwmEnable+0x3c>)
 8001330:	f006 fc3e 	bl	8007bb0 <HAL_TIMEx_PWMN_Start>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001334:	2104      	movs	r1, #4
 8001336:	4807      	ldr	r0, [pc, #28]	@ (8001354 <pwmEnable+0x3c>)
 8001338:	f005 fb8c 	bl	8006a54 <HAL_TIM_PWM_Start>
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800133c:	2104      	movs	r1, #4
 800133e:	4805      	ldr	r0, [pc, #20]	@ (8001354 <pwmEnable+0x3c>)
 8001340:	f006 fc36 	bl	8007bb0 <HAL_TIMEx_PWMN_Start>
	    currentPWMState = STATE_ENABLE;
 8001344:	4b02      	ldr	r3, [pc, #8]	@ (8001350 <pwmEnable+0x38>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
	}

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002bd 	.word	0x200002bd
 8001354:	20000190 	.word	0x20000190

08001358 <pwmDisable>:

void pwmDisable(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    // Останавливаем PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800135c:	2100      	movs	r1, #0
 800135e:	480a      	ldr	r0, [pc, #40]	@ (8001388 <pwmDisable+0x30>)
 8001360:	f005 fc8a 	bl	8006c78 <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001364:	2100      	movs	r1, #0
 8001366:	4808      	ldr	r0, [pc, #32]	@ (8001388 <pwmDisable+0x30>)
 8001368:	f006 fce4 	bl	8007d34 <HAL_TIMEx_PWMN_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800136c:	2104      	movs	r1, #4
 800136e:	4806      	ldr	r0, [pc, #24]	@ (8001388 <pwmDisable+0x30>)
 8001370:	f005 fc82 	bl	8006c78 <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001374:	2104      	movs	r1, #4
 8001376:	4804      	ldr	r0, [pc, #16]	@ (8001388 <pwmDisable+0x30>)
 8001378:	f006 fcdc 	bl	8007d34 <HAL_TIMEx_PWMN_Stop>
    currentPWMState = STATE_DISABLE;
 800137c:	4b03      	ldr	r3, [pc, #12]	@ (800138c <pwmDisable+0x34>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000190 	.word	0x20000190
 800138c:	200002bd 	.word	0x200002bd

08001390 <pwmHandlerProcess>:
extern SystemState_t currentState;



void pwmHandlerProcess(uint8_t hasError, SystemState_t state)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	460a      	mov	r2, r1
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	71bb      	strb	r3, [r7, #6]
if(hasError)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <pwmHandlerProcess+0x22>
{
pwmDisable();
 80013a6:	f7ff ffd7 	bl	8001358 <pwmDisable>
currentState = STATE_INIT;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <pwmHandlerProcess+0x4c>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	701a      	strb	r2, [r3, #0]
else if (state == STATE_DISCHARGE)
{
pwmEnable();
currentState = STATE_DISCHARGE;
}
}
 80013b0:	e010      	b.n	80013d4 <pwmHandlerProcess+0x44>
else if (state == STATE_CHARGE)
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d105      	bne.n	80013c4 <pwmHandlerProcess+0x34>
pwmEnable();
 80013b8:	f7ff ffae 	bl	8001318 <pwmEnable>
currentState = STATE_CHARGE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <pwmHandlerProcess+0x4c>)
 80013be:	2203      	movs	r2, #3
 80013c0:	701a      	strb	r2, [r3, #0]
}
 80013c2:	e007      	b.n	80013d4 <pwmHandlerProcess+0x44>
else if (state == STATE_DISCHARGE)
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d104      	bne.n	80013d4 <pwmHandlerProcess+0x44>
pwmEnable();
 80013ca:	f7ff ffa5 	bl	8001318 <pwmEnable>
currentState = STATE_DISCHARGE;
 80013ce:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <pwmHandlerProcess+0x4c>)
 80013d0:	2204      	movs	r2, #4
 80013d2:	701a      	strb	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000001 	.word	0x20000001

080013e0 <sensorRead>:
HAL_ADC_Start(&hadc1);
}


void sensorRead(void)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b08f      	sub	sp, #60	@ 0x3c
 80013e4:	af00      	add	r7, sp, #0
uint32_t rawValues[5];


for (uint8_t i = 0; i < 5; i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80013ec:	e02c      	b.n	8001448 <sensorRead+0x68>
{
ADC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2220      	movs	r2, #32
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f007 fcff 	bl	8008df8 <memset>
sConfig.Channel = ADC_CHANNEL_0 + i;
 80013fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013fe:	3301      	adds	r3, #1
 8001400:	603b      	str	r3, [r7, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8001402:	2306      	movs	r3, #6
 8001404:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001406:	2306      	movs	r3, #6
 8001408:	60bb      	str	r3, [r7, #8]
HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4834      	ldr	r0, [pc, #208]	@ (80014e0 <sensorRead+0x100>)
 8001410:	f001 fa92 	bl	8002938 <HAL_ADC_ConfigChannel>


HAL_ADC_Start(&hadc1);
 8001414:	4832      	ldr	r0, [pc, #200]	@ (80014e0 <sensorRead+0x100>)
 8001416:	f001 f863 	bl	80024e0 <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc1, 10);
 800141a:	210a      	movs	r1, #10
 800141c:	4830      	ldr	r0, [pc, #192]	@ (80014e0 <sensorRead+0x100>)
 800141e:	f001 f977 	bl	8002710 <HAL_ADC_PollForConversion>
rawValues[i] = HAL_ADC_GetValue(&hadc1);
 8001422:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8001426:	482e      	ldr	r0, [pc, #184]	@ (80014e0 <sensorRead+0x100>)
 8001428:	f001 fa78 	bl	800291c <HAL_ADC_GetValue>
 800142c:	4602      	mov	r2, r0
 800142e:	00a3      	lsls	r3, r4, #2
 8001430:	3338      	adds	r3, #56	@ 0x38
 8001432:	443b      	add	r3, r7
 8001434:	f843 2c18 	str.w	r2, [r3, #-24]
HAL_ADC_Stop(&hadc1);
 8001438:	4829      	ldr	r0, [pc, #164]	@ (80014e0 <sensorRead+0x100>)
 800143a:	f001 f935 	bl	80026a8 <HAL_ADC_Stop>
for (uint8_t i = 0; i < 5; i++)
 800143e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001442:	3301      	adds	r3, #1
 8001444:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001448:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800144c:	2b04      	cmp	r3, #4
 800144e:	d9ce      	bls.n	80013ee <sensorRead+0xe>
}


// Преобразование ADC -> реальные значения
currentValues.currentIn    = (float)rawValues[0] * ADC_TO_CURRENT_COEFF_IN;
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	ee07 3a90 	vmov	s15, r3
 8001456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800145a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80014e4 <sensorRead+0x104>
 800145e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001466:	ee17 2a90 	vmov	r2, s15
 800146a:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <sensorRead+0x108>)
 800146c:	601a      	str	r2, [r3, #0]
currentValues.currentOut   = (float)rawValues[1] * ADC_TO_CURRENT_COEFF_OUT;
 800146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001478:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80014e4 <sensorRead+0x104>
 800147c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001484:	ee17 2a90 	vmov	r2, s15
 8001488:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <sensorRead+0x108>)
 800148a:	605a      	str	r2, [r3, #4]
currentValues.currentChoke    = (float)rawValues[2] * ADC_TO_CURRENT_COEFF_CHOKE;
 800148c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001496:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80014e4 <sensorRead+0x104>
 800149a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a2:	ee17 2a90 	vmov	r2, s15
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <sensorRead+0x108>)
 80014a8:	609a      	str	r2, [r3, #8]
currentValues.voltageIn    = (float)rawValues[3] * ADC_TO_VOLTAGE_COEFF_IN;
 80014aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b8:	ee17 2a90 	vmov	r2, s15
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <sensorRead+0x108>)
 80014be:	60da      	str	r2, [r3, #12]
currentValues.voltageOut   = (float)rawValues[4] * ADC_TO_VOLTAGE_COEFF_OUT;
 80014c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 2a90 	vmov	r2, s15
 80014d2:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <sensorRead+0x108>)
 80014d4:	611a      	str	r2, [r3, #16]
}
 80014d6:	bf00      	nop
 80014d8:	373c      	adds	r7, #60	@ 0x3c
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000005c 	.word	0x2000005c
 80014e4:	3dcccccd 	.word	0x3dcccccd
 80014e8:	200002c0 	.word	0x200002c0

080014ec <sensorGetValues>:


const SensorValues_t* sensorGetValues(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
return &currentValues;
 80014f0:	4b02      	ldr	r3, [pc, #8]	@ (80014fc <sensorGetValues+0x10>)
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	200002c0 	.word	0x200002c0

08001500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_MspInit+0x48>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <HAL_MspInit+0x48>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6613      	str	r3, [r2, #96]	@ 0x60
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_MspInit+0x48>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_MspInit+0x48>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <HAL_MspInit+0x48>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001528:	6593      	str	r3, [r2, #88]	@ 0x58
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_MspInit+0x48>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001536:	2004      	movs	r0, #4
 8001538:	f003 f83c 	bl	80045b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800153c:	f004 f814 	bl	8005568 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0a0      	sub	sp, #128	@ 0x80
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	f107 0318 	add.w	r3, r7, #24
 8001568:	2254      	movs	r2, #84	@ 0x54
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f007 fc43 	bl	8008df8 <memset>
  if(hadc->Instance==ADC1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800157a:	d14d      	bne.n	8001618 <HAL_ADC_MspInit+0xcc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800157c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001580:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001582:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001586:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	f107 0318 	add.w	r3, r7, #24
 800158c:	4618      	mov	r0, r3
 800158e:	f004 fd29 	bl	8005fe4 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001598:	f7ff fde0 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <HAL_ADC_MspInit+0xd4>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001620 <HAL_ADC_MspInit+0xd4>)
 80015a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <HAL_ADC_MspInit+0xd4>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <HAL_ADC_MspInit+0xd4>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b8:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <HAL_ADC_MspInit+0xd4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c0:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <HAL_ADC_MspInit+0xd4>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <HAL_ADC_MspInit+0xd4>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d0:	4a13      	ldr	r2, [pc, #76]	@ (8001620 <HAL_ADC_MspInit+0xd4>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_ADC_MspInit+0xd4>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015e4:	230f      	movs	r3, #15
 80015e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e8:	2303      	movs	r3, #3
 80015ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fa:	f003 fd45 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001602:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001610:	4619      	mov	r1, r3
 8001612:	4804      	ldr	r0, [pc, #16]	@ (8001624 <HAL_ADC_MspInit+0xd8>)
 8001614:	f003 fd38 	bl	8005088 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001618:	bf00      	nop
 800161a:	3780      	adds	r7, #128	@ 0x80
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	48000400 	.word	0x48000400

08001628 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0a0      	sub	sp, #128	@ 0x80
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	2254      	movs	r2, #84	@ 0x54
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f007 fbd5 	bl	8008df8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a59      	ldr	r2, [pc, #356]	@ (80017b8 <HAL_FDCAN_MspInit+0x190>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d153      	bne.n	8001700 <HAL_FDCAN_MspInit+0xd8>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800165e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001662:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4618      	mov	r0, r3
 800166a:	f004 fcbb 	bl	8005fe4 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001674:	f7ff fd72 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001678:	4b50      	ldr	r3, [pc, #320]	@ (80017bc <HAL_FDCAN_MspInit+0x194>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	4a4f      	ldr	r2, [pc, #316]	@ (80017bc <HAL_FDCAN_MspInit+0x194>)
 8001680:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001682:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <HAL_FDCAN_MspInit+0x194>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d10b      	bne.n	80016a2 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800168a:	4b4d      	ldr	r3, [pc, #308]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	4a4c      	ldr	r2, [pc, #304]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 8001690:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001694:	6593      	str	r3, [r2, #88]	@ 0x58
 8001696:	4b4a      	ldr	r3, [pc, #296]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b47      	ldr	r3, [pc, #284]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4a46      	ldr	r2, [pc, #280]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4b44      	ldr	r3, [pc, #272]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80016cc:	2309      	movs	r3, #9
 80016ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016d4:	4619      	mov	r1, r3
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016da:	f003 fcd5 	bl	8005088 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2103      	movs	r1, #3
 80016e2:	2015      	movs	r0, #21
 80016e4:	f002 ff71 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80016e8:	2015      	movs	r0, #21
 80016ea:	f002 ff88 	bl	80045fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 3, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2103      	movs	r1, #3
 80016f2:	2016      	movs	r0, #22
 80016f4:	f002 ff69 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80016f8:	2016      	movs	r0, #22
 80016fa:	f002 ff80 	bl	80045fe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80016fe:	e056      	b.n	80017ae <HAL_FDCAN_MspInit+0x186>
  else if(hfdcan->Instance==FDCAN2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a2f      	ldr	r2, [pc, #188]	@ (80017c4 <HAL_FDCAN_MspInit+0x19c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d151      	bne.n	80017ae <HAL_FDCAN_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800170a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001710:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001714:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fc62 	bl	8005fe4 <HAL_RCCEx_PeriphCLKConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 8001726:	f7ff fd19 	bl	800115c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800172a:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <HAL_FDCAN_MspInit+0x194>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	4a22      	ldr	r2, [pc, #136]	@ (80017bc <HAL_FDCAN_MspInit+0x194>)
 8001732:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001734:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <HAL_FDCAN_MspInit+0x194>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d10b      	bne.n	8001754 <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800173c:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 8001742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001746:	6593      	str	r3, [r2, #88]	@ 0x58
 8001748:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_FDCAN_MspInit+0x198>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800176c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001770:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800177e:	2309      	movs	r3, #9
 8001780:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001786:	4619      	mov	r1, r3
 8001788:	480f      	ldr	r0, [pc, #60]	@ (80017c8 <HAL_FDCAN_MspInit+0x1a0>)
 800178a:	f003 fc7d 	bl	8005088 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 3, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2103      	movs	r1, #3
 8001792:	2056      	movs	r0, #86	@ 0x56
 8001794:	f002 ff19 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001798:	2056      	movs	r0, #86	@ 0x56
 800179a:	f002 ff30 	bl	80045fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 3, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2103      	movs	r1, #3
 80017a2:	2057      	movs	r0, #87	@ 0x57
 80017a4:	f002 ff11 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80017a8:	2057      	movs	r0, #87	@ 0x57
 80017aa:	f002 ff28 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3780      	adds	r7, #128	@ 0x80
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40006400 	.word	0x40006400
 80017bc:	200002d4 	.word	0x200002d4
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40006800 	.word	0x40006800
 80017c8:	48000400 	.word	0x48000400

080017cc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <HAL_TIM_PWM_MspInit+0x44>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d113      	bne.n	8001806 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_TIM_PWM_MspInit+0x48>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001814 <HAL_TIM_PWM_MspInit+0x48>)
 80017e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <HAL_TIM_PWM_MspInit+0x48>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2102      	movs	r1, #2
 80017fa:	201b      	movs	r0, #27
 80017fc:	f002 fee5 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001800:	201b      	movs	r0, #27
 8001802:	f002 fefc 	bl	80045fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40012c00 	.word	0x40012c00
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <HAL_TIM_Base_MspInit+0x44>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d113      	bne.n	8001852 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <HAL_TIM_Base_MspInit+0x48>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182e:	4a0c      	ldr	r2, [pc, #48]	@ (8001860 <HAL_TIM_Base_MspInit+0x48>)
 8001830:	f043 0310 	orr.w	r3, r3, #16
 8001834:	6593      	str	r3, [r2, #88]	@ 0x58
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_TIM_Base_MspInit+0x48>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 1);
 8001842:	2201      	movs	r2, #1
 8001844:	2102      	movs	r1, #2
 8001846:	2036      	movs	r0, #54	@ 0x36
 8001848:	f002 febf 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800184c:	2036      	movs	r0, #54	@ 0x36
 800184e:	f002 fed6 	bl	80045fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40001000 	.word	0x40001000
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2e      	ldr	r2, [pc, #184]	@ (800193c <HAL_TIM_MspPostInit+0xd8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d156      	bne.n	8001934 <HAL_TIM_MspPostInit+0xd0>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <HAL_TIM_MspPostInit+0xdc>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a2d      	ldr	r2, [pc, #180]	@ (8001940 <HAL_TIM_MspPostInit+0xdc>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <HAL_TIM_MspPostInit+0xdc>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <HAL_TIM_MspPostInit+0xdc>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a27      	ldr	r2, [pc, #156]	@ (8001940 <HAL_TIM_MspPostInit+0xdc>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b25      	ldr	r3, [pc, #148]	@ (8001940 <HAL_TIM_MspPostInit+0xdc>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <HAL_TIM_MspPostInit+0xdc>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <HAL_TIM_MspPostInit+0xdc>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <HAL_TIM_MspPostInit+0xdc>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
    PC13     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80018e0:	2304      	movs	r3, #4
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4816      	ldr	r0, [pc, #88]	@ (8001944 <HAL_TIM_MspPostInit+0xe0>)
 80018ec:	f003 fbcc 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f0:	2301      	movs	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001900:	2306      	movs	r3, #6
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	480f      	ldr	r0, [pc, #60]	@ (8001948 <HAL_TIM_MspPostInit+0xe4>)
 800190c:	f003 fbbc 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001910:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001922:	2306      	movs	r3, #6
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001930:	f003 fbaa 	bl	8005088 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	@ 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40012c00 	.word	0x40012c00
 8001940:	40021000 	.word	0x40021000
 8001944:	48000800 	.word	0x48000800
 8001948:	48000400 	.word	0x48000400

0800194c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b09e      	sub	sp, #120	@ 0x78
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	2254      	movs	r2, #84	@ 0x54
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f007 fa43 	bl	8008df8 <memset>
  if(huart->Instance==USART3)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <HAL_UART_MspInit+0xa8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d136      	bne.n	80019ea <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800197c:	2304      	movs	r3, #4
 800197e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fb2b 	bl	8005fe4 <HAL_RCCEx_PeriphCLKConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001994:	f7ff fbe2 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_UART_MspInit+0xac>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <HAL_UART_MspInit+0xac>)
 800199e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <HAL_UART_MspInit+0xac>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_UART_MspInit+0xac>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b4:	4a10      	ldr	r2, [pc, #64]	@ (80019f8 <HAL_UART_MspInit+0xac>)
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_UART_MspInit+0xac>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019da:	2307      	movs	r3, #7
 80019dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	@ (80019fc <HAL_UART_MspInit+0xb0>)
 80019e6:	f003 fb4f 	bl	8005088 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80019ea:	bf00      	nop
 80019ec:	3778      	adds	r7, #120	@ 0x78
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40004800 	.word	0x40004800
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000400 	.word	0x48000400

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <NMI_Handler+0x4>

08001a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <MemManage_Handler+0x4>

08001a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a56:	f000 f8cd 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <FDCAN1_IT0_IRQHandler+0x10>)
 8001a66:	f003 f88b 	bl	8004b80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200000c8 	.word	0x200000c8

08001a74 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <FDCAN1_IT1_IRQHandler+0x10>)
 8001a7a:	f003 f881 	bl	8004b80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200000c8 	.word	0x200000c8

08001a88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <TIM1_CC_IRQHandler+0x10>)
 8001a8e:	f005 f98f 	bl	8006db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000190 	.word	0x20000190

08001a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <TIM6_DAC_IRQHandler+0x10>)
 8001aa2:	f005 f985 	bl	8006db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200001dc 	.word	0x200001dc

08001ab0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <FDCAN2_IT0_IRQHandler+0x10>)
 8001ab6:	f003 f863 	bl	8004b80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000012c 	.word	0x2000012c

08001ac4 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <FDCAN2_IT1_IRQHandler+0x10>)
 8001aca:	f003 f859 	bl	8004b80 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000012c 	.word	0x2000012c

08001ad8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001afc:	480d      	ldr	r0, [pc, #52]	@ (8001b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001afe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b00:	f7ff ffea 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	@ (8001b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <LoopForever+0xe>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b48 <LoopForever+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f007 f96d 	bl	8008e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2e:	f7fe ff89 	bl	8000a44 <main>

08001b32 <LoopForever>:

LoopForever:
    b LoopForever
 8001b32:	e7fe      	b.n	8001b32 <LoopForever>
  ldr   r0, =_estack
 8001b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001b40:	08008ed0 	.word	0x08008ed0
  ldr r2, =_sbss
 8001b44:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001b48:	200002dc 	.word	0x200002dc

08001b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_2_IRQHandler>

08001b4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f002 fd2b 	bl	80045b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5e:	2007      	movs	r0, #7
 8001b60:	f000 f80e 	bl	8001b80 <HAL_InitTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	e001      	b.n	8001b74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b70:	f7ff fcc6 	bl	8001500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b74:	79fb      	ldrb	r3, [r7, #7]

}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_InitTick+0x68>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d022      	beq.n	8001bda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_InitTick+0x6c>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <HAL_InitTick+0x68>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 fd36 	bl	800461a <HAL_SYSTICK_Config>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	d809      	bhi.n	8001bce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc2:	f002 fd02 	bl	80045ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_InitTick+0x70>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e007      	b.n	8001bde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e004      	b.n	8001bde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e001      	b.n	8001bde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000014 	.word	0x20000014
 8001bec:	2000000c 	.word	0x2000000c
 8001bf0:	20000010 	.word	0x20000010

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_IncTick+0x20>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a03      	ldr	r2, [pc, #12]	@ (8001c10 <HAL_IncTick+0x1c>)
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	200002d8 	.word	0x200002d8
 8001c14:	20000014 	.word	0x20000014

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200002d8 	.word	0x200002d8

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d004      	beq.n	8001c54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_Delay+0x40>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c54:	bf00      	nop
 8001c56:	f7ff ffdf 	bl	8001c18 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d8f7      	bhi.n	8001c56 <HAL_Delay+0x26>
  {
  }
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000014 	.word	0x20000014

08001c74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3360      	adds	r3, #96	@ 0x60
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <LL_ADC_SetOffset+0x44>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d14:	bf00      	nop
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	03fff000 	.word	0x03fff000

08001d24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3360      	adds	r3, #96	@ 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3360      	adds	r3, #96	@ 0x60
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b087      	sub	sp, #28
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3360      	adds	r3, #96	@ 0x60
 8001d96:	461a      	mov	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001db0:	bf00      	nop
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3360      	adds	r3, #96	@ 0x60
 8001dcc:	461a      	mov	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	615a      	str	r2, [r3, #20]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b087      	sub	sp, #28
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3330      	adds	r3, #48	@ 0x30
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	4413      	add	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	211f      	movs	r1, #31
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	401a      	ands	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	f003 011f 	and.w	r1, r3, #31
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b087      	sub	sp, #28
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3314      	adds	r3, #20
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0e5b      	lsrs	r3, r3, #25
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	0d1b      	lsrs	r3, r3, #20
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	2107      	movs	r1, #7
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	401a      	ands	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	0d1b      	lsrs	r3, r3, #20
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	431a      	orrs	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0318 	and.w	r3, r3, #24
 8001f0e:	4908      	ldr	r1, [pc, #32]	@ (8001f30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f10:	40d9      	lsrs	r1, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	400b      	ands	r3, r1
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	0007ffff 	.word	0x0007ffff

08001f34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 031f 	and.w	r3, r3, #31
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6093      	str	r3, [r2, #8]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002040:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <LL_ADC_IsEnabled+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_IsEnabled+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d101      	bne.n	8002096 <LL_ADC_IsDisableOngoing+0x18>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_IsDisableOngoing+0x1a>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020e0:	f043 0210 	orr.w	r2, r3, #16
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b04      	cmp	r3, #4
 8002106:	d101      	bne.n	800210c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800212a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800212e:	f043 0220 	orr.w	r2, r3, #32
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b08      	cmp	r3, #8
 8002154:	d101      	bne.n	800215a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b089      	sub	sp, #36	@ 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e1a9      	b.n	80024d6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	2b00      	cmp	r3, #0
 800218e:	d109      	bne.n	80021a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff f9db 	bl	800154c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fef1 	bl	8001f90 <LL_ADC_IsDeepPowerDownEnabled>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fed7 	bl	8001f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff0c 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d115      	bne.n	80021fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fef0 	bl	8001fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021d8:	4b9c      	ldr	r3, [pc, #624]	@ (800244c <HAL_ADC_Init+0x2e4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	4a9c      	ldr	r2, [pc, #624]	@ (8002450 <HAL_ADC_Init+0x2e8>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	3301      	adds	r3, #1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f9      	bne.n	80021ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff feee 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220e:	f043 0210 	orr.w	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff62 	bl	80020f4 <LL_ADC_REG_IsConversionOngoing>
 8002230:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 8142 	bne.w	80024c4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 813e 	bne.w	80024c4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002250:	f043 0202 	orr.w	r2, r3, #2
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fefb 	bl	8002058 <LL_ADC_IsEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d141      	bne.n	80022ec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002270:	d004      	beq.n	800227c <HAL_ADC_Init+0x114>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a77      	ldr	r2, [pc, #476]	@ (8002454 <HAL_ADC_Init+0x2ec>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d10f      	bne.n	800229c <HAL_ADC_Init+0x134>
 800227c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002280:	f7ff feea 	bl	8002058 <LL_ADC_IsEnabled>
 8002284:	4604      	mov	r4, r0
 8002286:	4873      	ldr	r0, [pc, #460]	@ (8002454 <HAL_ADC_Init+0x2ec>)
 8002288:	f7ff fee6 	bl	8002058 <LL_ADC_IsEnabled>
 800228c:	4603      	mov	r3, r0
 800228e:	4323      	orrs	r3, r4
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e012      	b.n	80022c2 <HAL_ADC_Init+0x15a>
 800229c:	486e      	ldr	r0, [pc, #440]	@ (8002458 <HAL_ADC_Init+0x2f0>)
 800229e:	f7ff fedb 	bl	8002058 <LL_ADC_IsEnabled>
 80022a2:	4604      	mov	r4, r0
 80022a4:	486d      	ldr	r0, [pc, #436]	@ (800245c <HAL_ADC_Init+0x2f4>)
 80022a6:	f7ff fed7 	bl	8002058 <LL_ADC_IsEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	431c      	orrs	r4, r3
 80022ae:	486c      	ldr	r0, [pc, #432]	@ (8002460 <HAL_ADC_Init+0x2f8>)
 80022b0:	f7ff fed2 	bl	8002058 <LL_ADC_IsEnabled>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4323      	orrs	r3, r4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d012      	beq.n	80022ec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ce:	d004      	beq.n	80022da <HAL_ADC_Init+0x172>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a5f      	ldr	r2, [pc, #380]	@ (8002454 <HAL_ADC_Init+0x2ec>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_ADC_Init+0x176>
 80022da:	4a62      	ldr	r2, [pc, #392]	@ (8002464 <HAL_ADC_Init+0x2fc>)
 80022dc:	e000      	b.n	80022e0 <HAL_ADC_Init+0x178>
 80022de:	4a62      	ldr	r2, [pc, #392]	@ (8002468 <HAL_ADC_Init+0x300>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f7ff fcc4 	bl	8001c74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7f5b      	ldrb	r3, [r3, #29]
 80022f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002302:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800230a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002316:	2b01      	cmp	r3, #1
 8002318:	d106      	bne.n	8002328 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	045b      	lsls	r3, r3, #17
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002334:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4b48      	ldr	r3, [pc, #288]	@ (800246c <HAL_ADC_Init+0x304>)
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	430b      	orrs	r3, r1
 8002356:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fee5 	bl	8002142 <LL_ADC_INJ_IsConversionOngoing>
 8002378:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d17f      	bne.n	8002480 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d17c      	bne.n	8002480 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800238a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002392:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023a2:	f023 0302 	bic.w	r3, r3, #2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	430b      	orrs	r3, r1
 80023ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d017      	beq.n	80023e8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80023c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6911      	ldr	r1, [r2, #16]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80023e6:	e013      	b.n	8002410 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80023f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800240c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002416:	2b01      	cmp	r3, #1
 8002418:	d12a      	bne.n	8002470 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002430:	4311      	orrs	r1, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800243c:	430a      	orrs	r2, r1
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	611a      	str	r2, [r3, #16]
 800244a:	e019      	b.n	8002480 <HAL_ADC_Init+0x318>
 800244c:	2000000c 	.word	0x2000000c
 8002450:	053e2d63 	.word	0x053e2d63
 8002454:	50000100 	.word	0x50000100
 8002458:	50000400 	.word	0x50000400
 800245c:	50000500 	.word	0x50000500
 8002460:	50000600 	.word	0x50000600
 8002464:	50000300 	.word	0x50000300
 8002468:	50000700 	.word	0x50000700
 800246c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d10c      	bne.n	80024a2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	f023 010f 	bic.w	r1, r3, #15
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	631a      	str	r2, [r3, #48]	@ 0x30
 80024a0:	e007      	b.n	80024b2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 020f 	bic.w	r2, r2, #15
 80024b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	f043 0201 	orr.w	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024c2:	e007      	b.n	80024d4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c8:	f043 0210 	orr.w	r2, r3, #16
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	@ 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	bf00      	nop

080024e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024f0:	d004      	beq.n	80024fc <HAL_ADC_Start+0x1c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a67      	ldr	r2, [pc, #412]	@ (8002694 <HAL_ADC_Start+0x1b4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_Start+0x20>
 80024fc:	4b66      	ldr	r3, [pc, #408]	@ (8002698 <HAL_ADC_Start+0x1b8>)
 80024fe:	e000      	b.n	8002502 <HAL_ADC_Start+0x22>
 8002500:	4b66      	ldr	r3, [pc, #408]	@ (800269c <HAL_ADC_Start+0x1bc>)
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fd16 	bl	8001f34 <LL_ADC_GetMultimode>
 8002508:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fdf0 	bl	80020f4 <LL_ADC_REG_IsConversionOngoing>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 80b4 	bne.w	8002684 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_ADC_Start+0x4a>
 8002526:	2302      	movs	r3, #2
 8002528:	e0af      	b.n	800268a <HAL_ADC_Start+0x1aa>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fefc 	bl	8003330 <ADC_Enable>
 8002538:	4603      	mov	r3, r0
 800253a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 809b 	bne.w	800267a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a4d      	ldr	r2, [pc, #308]	@ (8002694 <HAL_ADC_Start+0x1b4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d009      	beq.n	8002576 <HAL_ADC_Start+0x96>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a4e      	ldr	r2, [pc, #312]	@ (80026a0 <HAL_ADC_Start+0x1c0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d002      	beq.n	8002572 <HAL_ADC_Start+0x92>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	e003      	b.n	800257a <HAL_ADC_Start+0x9a>
 8002572:	4b4c      	ldr	r3, [pc, #304]	@ (80026a4 <HAL_ADC_Start+0x1c4>)
 8002574:	e001      	b.n	800257a <HAL_ADC_Start+0x9a>
 8002576:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	4293      	cmp	r3, r2
 8002580:	d002      	beq.n	8002588 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800259c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025a0:	d106      	bne.n	80025b0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a6:	f023 0206 	bic.w	r2, r3, #6
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80025ae:	e002      	b.n	80025b6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	221c      	movs	r2, #28
 80025bc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a32      	ldr	r2, [pc, #200]	@ (8002694 <HAL_ADC_Start+0x1b4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_ADC_Start+0x104>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a32      	ldr	r2, [pc, #200]	@ (80026a0 <HAL_ADC_Start+0x1c0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d002      	beq.n	80025e0 <HAL_ADC_Start+0x100>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	e003      	b.n	80025e8 <HAL_ADC_Start+0x108>
 80025e0:	4b30      	ldr	r3, [pc, #192]	@ (80026a4 <HAL_ADC_Start+0x1c4>)
 80025e2:	e001      	b.n	80025e8 <HAL_ADC_Start+0x108>
 80025e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d008      	beq.n	8002602 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d002      	beq.n	8002602 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b09      	cmp	r3, #9
 8002600:	d114      	bne.n	800262c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002618:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fd3d 	bl	80020a4 <LL_ADC_REG_StartConversion>
 800262a:	e02d      	b.n	8002688 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a15      	ldr	r2, [pc, #84]	@ (8002694 <HAL_ADC_Start+0x1b4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d009      	beq.n	8002656 <HAL_ADC_Start+0x176>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <HAL_ADC_Start+0x1c0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d002      	beq.n	8002652 <HAL_ADC_Start+0x172>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e003      	b.n	800265a <HAL_ADC_Start+0x17a>
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_ADC_Start+0x1c4>)
 8002654:	e001      	b.n	800265a <HAL_ADC_Start+0x17a>
 8002656:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800265a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00f      	beq.n	8002688 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002670:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002678:	e006      	b.n	8002688 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002682:	e001      	b.n	8002688 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002684:	2302      	movs	r3, #2
 8002686:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002688:	7dfb      	ldrb	r3, [r7, #23]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	50000100 	.word	0x50000100
 8002698:	50000300 	.word	0x50000300
 800269c:	50000700 	.word	0x50000700
 80026a0:	50000500 	.word	0x50000500
 80026a4:	50000400 	.word	0x50000400

080026a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ADC_Stop+0x16>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e023      	b.n	8002706 <HAL_ADC_Stop+0x5e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80026c6:	2103      	movs	r1, #3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fd75 	bl	80031b8 <ADC_ConversionStop>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 febf 	bl	800345c <ADC_Disable>
 80026de:	4603      	mov	r3, r0
 80026e0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002722:	d004      	beq.n	800272e <HAL_ADC_PollForConversion+0x1e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a77      	ldr	r2, [pc, #476]	@ (8002908 <HAL_ADC_PollForConversion+0x1f8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_ADC_PollForConversion+0x22>
 800272e:	4b77      	ldr	r3, [pc, #476]	@ (800290c <HAL_ADC_PollForConversion+0x1fc>)
 8002730:	e000      	b.n	8002734 <HAL_ADC_PollForConversion+0x24>
 8002732:	4b77      	ldr	r3, [pc, #476]	@ (8002910 <HAL_ADC_PollForConversion+0x200>)
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fbfd 	bl	8001f34 <LL_ADC_GetMultimode>
 800273a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d102      	bne.n	800274a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002744:	2308      	movs	r3, #8
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	e037      	b.n	80027ba <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d002      	beq.n	800275c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b09      	cmp	r3, #9
 800275a:	d111      	bne.n	8002780 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276e:	f043 0220 	orr.w	r2, r3, #32
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0c1      	b.n	80028fe <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800277a:	2304      	movs	r3, #4
 800277c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800277e:	e01c      	b.n	80027ba <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002788:	d004      	beq.n	8002794 <HAL_ADC_PollForConversion+0x84>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a5e      	ldr	r2, [pc, #376]	@ (8002908 <HAL_ADC_PollForConversion+0x1f8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d101      	bne.n	8002798 <HAL_ADC_PollForConversion+0x88>
 8002794:	4b5d      	ldr	r3, [pc, #372]	@ (800290c <HAL_ADC_PollForConversion+0x1fc>)
 8002796:	e000      	b.n	800279a <HAL_ADC_PollForConversion+0x8a>
 8002798:	4b5d      	ldr	r3, [pc, #372]	@ (8002910 <HAL_ADC_PollForConversion+0x200>)
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fbd8 	bl	8001f50 <LL_ADC_GetMultiDMATransfer>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0a3      	b.n	80028fe <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027b6:	2304      	movs	r3, #4
 80027b8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027ba:	f7ff fa2d 	bl	8001c18 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027c0:	e021      	b.n	8002806 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d01d      	beq.n	8002806 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027ca:	f7ff fa25 	bl	8001c18 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <HAL_ADC_PollForConversion+0xd0>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d112      	bne.n	8002806 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10b      	bne.n	8002806 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	f043 0204 	orr.w	r2, r3, #4
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e07b      	b.n	80028fe <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0d6      	beq.n	80027c2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff faf7 	bl	8001e18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01c      	beq.n	800286a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7f5b      	ldrb	r3, [r3, #29]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d118      	bne.n	800286a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b08      	cmp	r3, #8
 8002844:	d111      	bne.n	800286a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a26      	ldr	r2, [pc, #152]	@ (8002908 <HAL_ADC_PollForConversion+0x1f8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d009      	beq.n	8002888 <HAL_ADC_PollForConversion+0x178>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a26      	ldr	r2, [pc, #152]	@ (8002914 <HAL_ADC_PollForConversion+0x204>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d002      	beq.n	8002884 <HAL_ADC_PollForConversion+0x174>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	e003      	b.n	800288c <HAL_ADC_PollForConversion+0x17c>
 8002884:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_ADC_PollForConversion+0x208>)
 8002886:	e001      	b.n	800288c <HAL_ADC_PollForConversion+0x17c>
 8002888:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	4293      	cmp	r3, r2
 8002892:	d008      	beq.n	80028a6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b05      	cmp	r3, #5
 800289e:	d002      	beq.n	80028a6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b09      	cmp	r3, #9
 80028a4:	d104      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	e014      	b.n	80028da <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a14      	ldr	r2, [pc, #80]	@ (8002908 <HAL_ADC_PollForConversion+0x1f8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_ADC_PollForConversion+0x1be>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a15      	ldr	r2, [pc, #84]	@ (8002914 <HAL_ADC_PollForConversion+0x204>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d002      	beq.n	80028ca <HAL_ADC_PollForConversion+0x1ba>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e003      	b.n	80028d2 <HAL_ADC_PollForConversion+0x1c2>
 80028ca:	4b13      	ldr	r3, [pc, #76]	@ (8002918 <HAL_ADC_PollForConversion+0x208>)
 80028cc:	e001      	b.n	80028d2 <HAL_ADC_PollForConversion+0x1c2>
 80028ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028d2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d104      	bne.n	80028ea <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2208      	movs	r2, #8
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e008      	b.n	80028fc <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	220c      	movs	r2, #12
 80028fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	50000100 	.word	0x50000100
 800290c:	50000300 	.word	0x50000300
 8002910:	50000700 	.word	0x50000700
 8002914:	50000500 	.word	0x50000500
 8002918:	50000400 	.word	0x50000400

0800291c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b0b6      	sub	sp, #216	@ 0xd8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_ADC_ConfigChannel+0x24>
 8002956:	2302      	movs	r3, #2
 8002958:	f000 bc13 	b.w	8003182 <HAL_ADC_ConfigChannel+0x84a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fbc3 	bl	80020f4 <LL_ADC_REG_IsConversionOngoing>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 83f3 	bne.w	800315c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f7ff fa5b 	bl	8001e3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fbb1 	bl	80020f4 <LL_ADC_REG_IsConversionOngoing>
 8002992:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fbd1 	bl	8002142 <LL_ADC_INJ_IsConversionOngoing>
 80029a0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f040 81d9 	bne.w	8002d60 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 81d4 	bne.w	8002d60 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029c0:	d10f      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	4619      	mov	r1, r3
 80029ce:	f7ff fa62 	bl	8001e96 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fa09 	bl	8001df2 <LL_ADC_SetSamplingTimeCommonConfig>
 80029e0:	e00e      	b.n	8002a00 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f7ff fa51 	bl	8001e96 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f9f9 	bl	8001df2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	08db      	lsrs	r3, r3, #3
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d022      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6919      	ldr	r1, [r3, #16]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a32:	f7ff f953 	bl	8001cdc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6919      	ldr	r1, [r3, #16]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f7ff f99f 	bl	8001d86 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d102      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x126>
 8002a58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x128>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	461a      	mov	r2, r3
 8002a62:	f7ff f9ab 	bl	8001dbc <LL_ADC_SetOffsetSaturation>
 8002a66:	e17b      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f958 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x15c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f94d 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	f003 021f 	and.w	r2, r3, #31
 8002a92:	e01e      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x19a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f942 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e004      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x1b2>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	e018      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x1e4>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e004      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d106      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f911 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff f8f5 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x222>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff f8ea 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002b50:	4603      	mov	r3, r0
 8002b52:	0e9b      	lsrs	r3, r3, #26
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	e01e      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x260>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f8df 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002b78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e004      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x278>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	e018      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x2aa>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e004      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d106      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff f8ae 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff f892 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x2e8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f887 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	e01e      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x326>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2102      	movs	r1, #2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f87c 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e004      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x33e>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	e016      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x36c>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002c88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e004      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d106      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f84d 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2103      	movs	r1, #3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f831 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x3aa>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f826 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	e017      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x3da>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff f81b 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cfc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002cfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d04:	2320      	movs	r3, #32
 8002d06:	e003      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x3f2>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	e011      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x416>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e003      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	2103      	movs	r1, #3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fff8 	bl	8001d50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff f977 	bl	8002058 <LL_ADC_IsEnabled>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f040 813d 	bne.w	8002fec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f7ff f8b4 	bl	8001eec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4aa2      	ldr	r2, [pc, #648]	@ (8003014 <HAL_ADC_ConfigChannel+0x6dc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	f040 812e 	bne.w	8002fec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x480>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	3301      	adds	r3, #1
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2b09      	cmp	r3, #9
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e019      	b.n	8002dec <HAL_ADC_ConfigChannel+0x4b4>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dc8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002dca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	e003      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2b09      	cmp	r3, #9
 8002de4:	bf94      	ite	ls
 8002de6:	2301      	movls	r3, #1
 8002de8:	2300      	movhi	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d079      	beq.n	8002ee4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x4d4>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	3301      	adds	r3, #1
 8002e04:	069b      	lsls	r3, r3, #26
 8002e06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e0a:	e015      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x500>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e1c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e003      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	069b      	lsls	r3, r3, #26
 8002e34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x520>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	e017      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x550>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	ea42 0103 	orr.w	r1, r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x576>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	051b      	lsls	r3, r3, #20
 8002eac:	e018      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x5a8>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e003      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	e07e      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x5c8>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	069b      	lsls	r3, r3, #26
 8002efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002efe:	e015      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x5f4>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f18:	2320      	movs	r3, #32
 8002f1a:	e003      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x614>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2101      	movs	r1, #1
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	e017      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x644>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	61fb      	str	r3, [r7, #28]
  return result;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e003      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	ea42 0103 	orr.w	r1, r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10d      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x670>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3b1e      	subs	r3, #30
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fa6:	e01b      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x6a8>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	613b      	str	r3, [r7, #16]
  return result;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	e003      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	f003 021f 	and.w	r2, r3, #31
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b1e      	subs	r3, #30
 8002fda:	051b      	lsls	r3, r3, #20
 8002fdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f7fe ff55 	bl	8001e96 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_ADC_ConfigChannel+0x6e0>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80be 	beq.w	8003176 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003002:	d004      	beq.n	800300e <HAL_ADC_ConfigChannel+0x6d6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a04      	ldr	r2, [pc, #16]	@ (800301c <HAL_ADC_ConfigChannel+0x6e4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10a      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x6ec>
 800300e:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <HAL_ADC_ConfigChannel+0x6e8>)
 8003010:	e009      	b.n	8003026 <HAL_ADC_ConfigChannel+0x6ee>
 8003012:	bf00      	nop
 8003014:	407f0000 	.word	0x407f0000
 8003018:	80080000 	.word	0x80080000
 800301c:	50000100 	.word	0x50000100
 8003020:	50000300 	.word	0x50000300
 8003024:	4b59      	ldr	r3, [pc, #356]	@ (800318c <HAL_ADC_ConfigChannel+0x854>)
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fe4a 	bl	8001cc0 <LL_ADC_GetCommonPathInternalCh>
 800302c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a56      	ldr	r2, [pc, #344]	@ (8003190 <HAL_ADC_ConfigChannel+0x858>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x70c>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a55      	ldr	r2, [pc, #340]	@ (8003194 <HAL_ADC_ConfigChannel+0x85c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d13a      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d134      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003058:	d005      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x72e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a4e      	ldr	r2, [pc, #312]	@ (8003198 <HAL_ADC_ConfigChannel+0x860>)
 8003060:	4293      	cmp	r3, r2
 8003062:	f040 8085 	bne.w	8003170 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800306e:	d004      	beq.n	800307a <HAL_ADC_ConfigChannel+0x742>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a49      	ldr	r2, [pc, #292]	@ (800319c <HAL_ADC_ConfigChannel+0x864>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x746>
 800307a:	4a49      	ldr	r2, [pc, #292]	@ (80031a0 <HAL_ADC_ConfigChannel+0x868>)
 800307c:	e000      	b.n	8003080 <HAL_ADC_ConfigChannel+0x748>
 800307e:	4a43      	ldr	r2, [pc, #268]	@ (800318c <HAL_ADC_ConfigChannel+0x854>)
 8003080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003084:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7fe fe05 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003090:	4b44      	ldr	r3, [pc, #272]	@ (80031a4 <HAL_ADC_ConfigChannel+0x86c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	4a44      	ldr	r2, [pc, #272]	@ (80031a8 <HAL_ADC_ConfigChannel+0x870>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030aa:	e002      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f9      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b8:	e05a      	b.n	8003170 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a3b      	ldr	r2, [pc, #236]	@ (80031ac <HAL_ADC_ConfigChannel+0x874>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d125      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d11f      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a31      	ldr	r2, [pc, #196]	@ (800319c <HAL_ADC_ConfigChannel+0x864>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d104      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x7ac>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a34      	ldr	r2, [pc, #208]	@ (80031b0 <HAL_ADC_ConfigChannel+0x878>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d047      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ec:	d004      	beq.n	80030f8 <HAL_ADC_ConfigChannel+0x7c0>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2a      	ldr	r2, [pc, #168]	@ (800319c <HAL_ADC_ConfigChannel+0x864>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x7c4>
 80030f8:	4a29      	ldr	r2, [pc, #164]	@ (80031a0 <HAL_ADC_ConfigChannel+0x868>)
 80030fa:	e000      	b.n	80030fe <HAL_ADC_ConfigChannel+0x7c6>
 80030fc:	4a23      	ldr	r2, [pc, #140]	@ (800318c <HAL_ADC_ConfigChannel+0x854>)
 80030fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f7fe fdc6 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800310e:	e031      	b.n	8003174 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a27      	ldr	r2, [pc, #156]	@ (80031b4 <HAL_ADC_ConfigChannel+0x87c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d12d      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800311a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800311e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d127      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1c      	ldr	r2, [pc, #112]	@ (800319c <HAL_ADC_ConfigChannel+0x864>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d022      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003138:	d004      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x80c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a17      	ldr	r2, [pc, #92]	@ (800319c <HAL_ADC_ConfigChannel+0x864>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x810>
 8003144:	4a16      	ldr	r2, [pc, #88]	@ (80031a0 <HAL_ADC_ConfigChannel+0x868>)
 8003146:	e000      	b.n	800314a <HAL_ADC_ConfigChannel+0x812>
 8003148:	4a10      	ldr	r2, [pc, #64]	@ (800318c <HAL_ADC_ConfigChannel+0x854>)
 800314a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800314e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7fe fda0 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
 800315a:	e00c      	b.n	8003176 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800316e:	e002      	b.n	8003176 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003174:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800317e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003182:	4618      	mov	r0, r3
 8003184:	37d8      	adds	r7, #216	@ 0xd8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	50000700 	.word	0x50000700
 8003190:	c3210000 	.word	0xc3210000
 8003194:	90c00010 	.word	0x90c00010
 8003198:	50000600 	.word	0x50000600
 800319c:	50000100 	.word	0x50000100
 80031a0:	50000300 	.word	0x50000300
 80031a4:	2000000c 	.word	0x2000000c
 80031a8:	053e2d63 	.word	0x053e2d63
 80031ac:	c7520000 	.word	0xc7520000
 80031b0:	50000500 	.word	0x50000500
 80031b4:	cb840000 	.word	0xcb840000

080031b8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe ff90 	bl	80020f4 <LL_ADC_REG_IsConversionOngoing>
 80031d4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe ffb1 	bl	8002142 <LL_ADC_INJ_IsConversionOngoing>
 80031e0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8098 	beq.w	8003320 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d02a      	beq.n	8003254 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7f5b      	ldrb	r3, [r3, #29]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d126      	bne.n	8003254 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7f1b      	ldrb	r3, [r3, #28]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d122      	bne.n	8003254 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800320e:	2301      	movs	r3, #1
 8003210:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003212:	e014      	b.n	800323e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4a45      	ldr	r2, [pc, #276]	@ (800332c <ADC_ConversionStop+0x174>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d90d      	bls.n	8003238 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e074      	b.n	8003322 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3301      	adds	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003248:	2b40      	cmp	r3, #64	@ 0x40
 800324a:	d1e3      	bne.n	8003214 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2240      	movs	r2, #64	@ 0x40
 8003252:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d014      	beq.n	8003284 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe ff48 	bl	80020f4 <LL_ADC_REG_IsConversionOngoing>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe ff05 	bl	800207e <LL_ADC_IsDisableOngoing>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe ff24 	bl	80020cc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d014      	beq.n	80032b4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe ff57 	bl	8002142 <LL_ADC_INJ_IsConversionOngoing>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00c      	beq.n	80032b4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe feed 	bl	800207e <LL_ADC_IsDisableOngoing>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe ff33 	bl	800211a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d005      	beq.n	80032c6 <ADC_ConversionStop+0x10e>
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d105      	bne.n	80032cc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80032c0:	230c      	movs	r3, #12
 80032c2:	617b      	str	r3, [r7, #20]
        break;
 80032c4:	e005      	b.n	80032d2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80032c6:	2308      	movs	r3, #8
 80032c8:	617b      	str	r3, [r7, #20]
        break;
 80032ca:	e002      	b.n	80032d2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80032cc:	2304      	movs	r3, #4
 80032ce:	617b      	str	r3, [r7, #20]
        break;
 80032d0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80032d2:	f7fe fca1 	bl	8001c18 <HAL_GetTick>
 80032d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80032d8:	e01b      	b.n	8003312 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80032da:	f7fe fc9d 	bl	8001c18 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d914      	bls.n	8003312 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	f043 0210 	orr.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e007      	b.n	8003322 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1dc      	bne.n	80032da <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	a33fffff 	.word	0xa33fffff

08003330 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe fe89 	bl	8002058 <LL_ADC_IsEnabled>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d176      	bne.n	800343a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	4b3c      	ldr	r3, [pc, #240]	@ (8003444 <ADC_Enable+0x114>)
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	f043 0210 	orr.w	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e062      	b.n	800343c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fe44 	bl	8002008 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003388:	d004      	beq.n	8003394 <ADC_Enable+0x64>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2e      	ldr	r2, [pc, #184]	@ (8003448 <ADC_Enable+0x118>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <ADC_Enable+0x68>
 8003394:	4b2d      	ldr	r3, [pc, #180]	@ (800344c <ADC_Enable+0x11c>)
 8003396:	e000      	b.n	800339a <ADC_Enable+0x6a>
 8003398:	4b2d      	ldr	r3, [pc, #180]	@ (8003450 <ADC_Enable+0x120>)
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe fc90 	bl	8001cc0 <LL_ADC_GetCommonPathInternalCh>
 80033a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d013      	beq.n	80033d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003454 <ADC_Enable+0x124>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	4a29      	ldr	r2, [pc, #164]	@ (8003458 <ADC_Enable+0x128>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033c4:	e002      	b.n	80033cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f9      	bne.n	80033c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033d2:	f7fe fc21 	bl	8001c18 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033d8:	e028      	b.n	800342c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fe3a 	bl	8002058 <LL_ADC_IsEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fe0a 	bl	8002008 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033f4:	f7fe fc10 	bl	8001c18 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d914      	bls.n	800342c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d00d      	beq.n	800342c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003414:	f043 0210 	orr.w	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d1cf      	bne.n	80033da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	8000003f 	.word	0x8000003f
 8003448:	50000100 	.word	0x50000100
 800344c:	50000300 	.word	0x50000300
 8003450:	50000700 	.word	0x50000700
 8003454:	2000000c 	.word	0x2000000c
 8003458:	053e2d63 	.word	0x053e2d63

0800345c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe fe08 	bl	800207e <LL_ADC_IsDisableOngoing>
 800346e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fdef 	bl	8002058 <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d047      	beq.n	8003510 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d144      	bne.n	8003510 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030d 	and.w	r3, r3, #13
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10c      	bne.n	80034ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe fdc9 	bl	8002030 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2203      	movs	r2, #3
 80034a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034a6:	f7fe fbb7 	bl	8001c18 <HAL_GetTick>
 80034aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034ac:	e029      	b.n	8003502 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e023      	b.n	8003512 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034ca:	f7fe fba5 	bl	8001c18 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d914      	bls.n	8003502 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	f043 0210 	orr.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f6:	f043 0201 	orr.w	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e007      	b.n	8003512 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1dc      	bne.n	80034ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <LL_ADC_SetCommonPathInternalCh>:
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <LL_ADC_GetCommonPathInternalCh>:
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_ADC_SetOffset>:
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3360      	adds	r3, #96	@ 0x60
 800356e:	461a      	mov	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b08      	ldr	r3, [pc, #32]	@ (80035a0 <LL_ADC_SetOffset+0x44>)
 800357e:	4013      	ands	r3, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	4313      	orrs	r3, r2
 800358c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	601a      	str	r2, [r3, #0]
}
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	03fff000 	.word	0x03fff000

080035a4 <LL_ADC_GetOffsetChannel>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3360      	adds	r3, #96	@ 0x60
 80035b2:	461a      	mov	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_ADC_SetOffsetState>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3360      	adds	r3, #96	@ 0x60
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	601a      	str	r2, [r3, #0]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <LL_ADC_SetOffsetSign>:
{
 8003606:	b480      	push	{r7}
 8003608:	b087      	sub	sp, #28
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3360      	adds	r3, #96	@ 0x60
 8003616:	461a      	mov	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	431a      	orrs	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	601a      	str	r2, [r3, #0]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_SetOffsetSaturation>:
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3360      	adds	r3, #96	@ 0x60
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	431a      	orrs	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	601a      	str	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	615a      	str	r2, [r3, #20]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_SetChannelSamplingTime>:
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3314      	adds	r3, #20
 80036a8:	461a      	mov	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	0e5b      	lsrs	r3, r3, #25
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	4413      	add	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	0d1b      	lsrs	r3, r3, #20
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2107      	movs	r1, #7
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	401a      	ands	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	0d1b      	lsrs	r3, r3, #20
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	431a      	orrs	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	601a      	str	r2, [r3, #0]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <LL_ADC_SetChannelSingleDiff>:
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	43db      	mvns	r3, r3
 800370a:	401a      	ands	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f003 0318 	and.w	r3, r3, #24
 8003712:	4908      	ldr	r1, [pc, #32]	@ (8003734 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003714:	40d9      	lsrs	r1, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	400b      	ands	r3, r1
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	431a      	orrs	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	0007ffff 	.word	0x0007ffff

08003738 <LL_ADC_IsEnabled>:
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <LL_ADC_IsEnabled+0x18>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <LL_ADC_IsEnabled+0x1a>
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_ADC_REG_IsConversionOngoing>:
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d101      	bne.n	8003776 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b08      	cmp	r3, #8
 8003796:	d101      	bne.n	800379c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b0b6      	sub	sp, #216	@ 0xd8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80037d0:	2302      	movs	r3, #2
 80037d2:	f000 bcfd 	b.w	80041d0 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d130      	bne.n	8003850 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	d179      	bne.n	80038ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d010      	beq.n	8003820 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	0e9b      	lsrs	r3, r3, #26
 8003804:	025b      	lsls	r3, r3, #9
 8003806:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003812:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800381e:	e007      	b.n	8003830 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	0e9b      	lsrs	r3, r3, #26
 8003826:	025b      	lsls	r3, r3, #9
 8003828:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 800382c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003836:	4b84      	ldr	r3, [pc, #528]	@ (8003a48 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003842:	430b      	orrs	r3, r1
 8003844:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800384c:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800384e:	e04c      	b.n	80038ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11d      	bne.n	8003894 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6a1a      	ldr	r2, [r3, #32]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800387c:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003888:	e004      	b.n	8003894 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	3b01      	subs	r3, #1
 8003890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0e9b      	lsrs	r3, r3, #26
 800389a:	f003 021f 	and.w	r2, r3, #31
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038b8:	1e5a      	subs	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80038c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038da:	4b5b      	ldr	r3, [pc, #364]	@ (8003a48 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	430b      	orrs	r3, r1
 80038e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff48 	bl	8003784 <LL_ADC_INJ_IsConversionOngoing>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d124      	bne.n	8003944 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003900:	2b00      	cmp	r3, #0
 8003902:	d112      	bne.n	800392a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003914:	055a      	lsls	r2, r3, #21
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800391c:	051b      	lsls	r3, r3, #20
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	60da      	str	r2, [r3, #12]
 8003928:	e00c      	b.n	8003944 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800393a:	055a      	lsls	r2, r3, #21
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff08 	bl	800375e <LL_ADC_REG_IsConversionOngoing>
 800394e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff ff14 	bl	8003784 <LL_ADC_INJ_IsConversionOngoing>
 800395c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003964:	2b00      	cmp	r3, #0
 8003966:	f040 822e 	bne.w	8003dc6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800396a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 8229 	bne.w	8003dc6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d116      	bne.n	80039b2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800398a:	2b01      	cmp	r3, #1
 800398c:	d108      	bne.n	80039a0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800399c:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800399e:	e01f      	b.n	80039e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80039ae:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80039b0:	e016      	b.n	80039e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d109      	bne.n	80039d0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80039ce:	e007      	b.n	80039e0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80039de:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d110      	bne.n	8003a0c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	430b      	orrs	r3, r1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0202 	orr.w	r2, r2, #2
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	e007      	b.n	8003a1c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0202 	bic.w	r2, r2, #2
 8003a1a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a24:	d112      	bne.n	8003a4c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7ff fe31 	bl	8003698 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fe17 	bl	8003672 <LL_ADC_SetSamplingTimeCommonConfig>
 8003a44:	e011      	b.n	8003a6a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003a46:	bf00      	nop
 8003a48:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f7ff fe1d 	bl	8003698 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fe04 	bl	8003672 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d022      	beq.n	8003ad2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6919      	ldr	r1, [r3, #16]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a9c:	f7ff fd5e 	bl	800355c <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6919      	ldr	r1, [r3, #16]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	461a      	mov	r2, r3
 8003aae:	f7ff fdaa 	bl	8003606 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d102      	bne.n	8003ac8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003ac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ac6:	e000      	b.n	8003aca <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	461a      	mov	r2, r3
 8003acc:	f7ff fdb6 	bl	800363c <LL_ADC_SetOffsetSaturation>
 8003ad0:	e179      	b.n	8003dc6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fd63 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fd58 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	0e9b      	lsrs	r3, r3, #26
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	e01e      	b.n	8003b3c <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fd4d 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8003b1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003b24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	e004      	b.n	8003b3a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003b30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	0e9b      	lsrs	r3, r3, #26
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	e018      	b.n	8003b86 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003b70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e004      	b.n	8003b86 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003b7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d106      	bne.n	8003b98 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fd1c 	bl	80035d0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fd00 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fcf5 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	0e9b      	lsrs	r3, r3, #26
 8003bbe:	f003 021f 	and.w	r2, r3, #31
 8003bc2:	e01e      	b.n	8003c02 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fcea 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	e004      	b.n	8003c00 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003bf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	0e9b      	lsrs	r3, r3, #26
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	e018      	b.n	8003c4c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003c3e:	2320      	movs	r3, #32
 8003c40:	e004      	b.n	8003c4c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003c42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d106      	bne.n	8003c5e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2101      	movs	r1, #1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fcb9 	bl	80035d0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2102      	movs	r1, #2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fc9d 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2102      	movs	r1, #2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fc92 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003c80:	4603      	mov	r3, r0
 8003c82:	0e9b      	lsrs	r3, r3, #26
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	e01e      	b.n	8003cc8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fc87 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003cb8:	2320      	movs	r3, #32
 8003cba:	e004      	b.n	8003cc6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	0e9b      	lsrs	r3, r3, #26
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	e014      	b.n	8003d0a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ce8:	fa93 f3a3 	rbit	r3, r3
 8003cec:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003cee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8003cfc:	2320      	movs	r3, #32
 8003cfe:	e004      	b.n	8003d0a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8003d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d04:	fab3 f383 	clz	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d106      	bne.n	8003d1c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	2102      	movs	r1, #2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fc5a 	bl	80035d0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2103      	movs	r1, #3
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fc3e 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2103      	movs	r1, #3
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fc33 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	0e9b      	lsrs	r3, r3, #26
 8003d42:	f003 021f 	and.w	r2, r3, #31
 8003d46:	e017      	b.n	8003d78 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2103      	movs	r1, #3
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fc28 	bl	80035a4 <LL_ADC_GetOffsetChannel>
 8003d54:	4603      	mov	r3, r0
 8003d56:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d62:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003d64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8003d6a:	2320      	movs	r3, #32
 8003d6c:	e003      	b.n	8003d76 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8003d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	0e9b      	lsrs	r3, r3, #26
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	e011      	b.n	8003db4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d98:	fa93 f3a3 	rbit	r3, r3
 8003d9c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003d9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003da0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003da2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8003da8:	2320      	movs	r3, #32
 8003daa:	e003      	b.n	8003db4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8003dac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d106      	bne.n	8003dc6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2103      	movs	r1, #3
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fc05 	bl	80035d0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fcb4 	bl	8003738 <LL_ADC_IsEnabled>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 813d 	bne.w	8004052 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	461a      	mov	r2, r3
 8003de6:	f7ff fc83 	bl	80036f0 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4aa2      	ldr	r2, [pc, #648]	@ (8004078 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	f040 812e 	bne.w	8004052 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10b      	bne.n	8003e1e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0e9b      	lsrs	r3, r3, #26
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	2b09      	cmp	r3, #9
 8003e14:	bf94      	ite	ls
 8003e16:	2301      	movls	r3, #1
 8003e18:	2300      	movhi	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	e019      	b.n	8003e52 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8003e36:	2320      	movs	r3, #32
 8003e38:	e003      	b.n	8003e42 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8003e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2b09      	cmp	r3, #9
 8003e4a:	bf94      	ite	ls
 8003e4c:	2301      	movls	r3, #1
 8003e4e:	2300      	movhi	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d079      	beq.n	8003f4a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	0e9b      	lsrs	r3, r3, #26
 8003e68:	3301      	adds	r3, #1
 8003e6a:	069b      	lsls	r3, r3, #26
 8003e6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e70:	e015      	b.n	8003e9e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e82:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003e84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003e8a:	2320      	movs	r3, #32
 8003e8c:	e003      	b.n	8003e96 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	069b      	lsls	r3, r3, #26
 8003e9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_ADCEx_InjectedConfigChannel+0x712>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	0e9b      	lsrs	r3, r3, #26
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	e017      	b.n	8003eee <HAL_ADCEx_InjectedConfigChannel+0x742>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec6:	fa93 f3a3 	rbit	r3, r3
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ece:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8003ed6:	2320      	movs	r3, #32
 8003ed8:	e003      	b.n	8003ee2 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8003eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003edc:	fab3 f383 	clz	r3, r3
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	2101      	movs	r1, #1
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	ea42 0103 	orr.w	r1, r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0e9b      	lsrs	r3, r3, #26
 8003f04:	3301      	adds	r3, #1
 8003f06:	f003 021f 	and.w	r2, r3, #31
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	051b      	lsls	r3, r3, #20
 8003f12:	e018      	b.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	e003      	b.n	8003f38 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	fab3 f383 	clz	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f003 021f 	and.w	r2, r3, #31
 8003f3e:	4613      	mov	r3, r2
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4413      	add	r3, r2
 8003f44:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f46:	430b      	orrs	r3, r1
 8003f48:	e07e      	b.n	8004048 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	0e9b      	lsrs	r3, r3, #26
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	069b      	lsls	r3, r3, #26
 8003f60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f64:	e015      	b.n	8003f92 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8003f7e:	2320      	movs	r3, #32
 8003f80:	e003      	b.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8003f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	069b      	lsls	r3, r3, #26
 8003f8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	0e9b      	lsrs	r3, r3, #26
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	e017      	b.n	8003fe2 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	fa93 f3a3 	rbit	r3, r3
 8003fbe:	61bb      	str	r3, [r7, #24]
  return result;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8003fca:	2320      	movs	r3, #32
 8003fcc:	e003      	b.n	8003fd6 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	fab3 f383 	clz	r3, r3
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2101      	movs	r1, #1
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	ea42 0103 	orr.w	r1, r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	0e9b      	lsrs	r3, r3, #26
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f003 021f 	and.w	r2, r3, #31
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	3b1e      	subs	r3, #30
 8004006:	051b      	lsls	r3, r3, #20
 8004008:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800400c:	e01b      	b.n	8004046 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	60fb      	str	r3, [r7, #12]
  return result;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8004026:	2320      	movs	r3, #32
 8004028:	e003      	b.n	8004032 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	3301      	adds	r3, #1
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	3b1e      	subs	r3, #30
 8004040:	051b      	lsls	r3, r3, #20
 8004042:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004046:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800404c:	4619      	mov	r1, r3
 800404e:	f7ff fb23 	bl	8003698 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b09      	ldr	r3, [pc, #36]	@ (800407c <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80b2 	beq.w	80041c4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004068:	d004      	beq.n	8004074 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a04      	ldr	r2, [pc, #16]	@ (8004080 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d109      	bne.n	8004088 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8004074:	4b03      	ldr	r3, [pc, #12]	@ (8004084 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8004076:	e008      	b.n	800408a <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8004078:	407f0000 	.word	0x407f0000
 800407c:	80080000 	.word	0x80080000
 8004080:	50000100 	.word	0x50000100
 8004084:	50000300 	.word	0x50000300
 8004088:	4b53      	ldr	r3, [pc, #332]	@ (80041d8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fa58 	bl	8003540 <LL_ADC_GetCommonPathInternalCh>
 8004090:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a50      	ldr	r2, [pc, #320]	@ (80041dc <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a4f      	ldr	r2, [pc, #316]	@ (80041e0 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d139      	bne.n	800411c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d133      	bne.n	800411c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040bc:	d004      	beq.n	80040c8 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a48      	ldr	r2, [pc, #288]	@ (80041e4 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d17a      	bne.n	80041be <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d0:	d004      	beq.n	80040dc <HAL_ADCEx_InjectedConfigChannel+0x930>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a44      	ldr	r2, [pc, #272]	@ (80041e8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d101      	bne.n	80040e0 <HAL_ADCEx_InjectedConfigChannel+0x934>
 80040dc:	4a43      	ldr	r2, [pc, #268]	@ (80041ec <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80040de:	e000      	b.n	80040e2 <HAL_ADCEx_InjectedConfigChannel+0x936>
 80040e0:	4a3d      	ldr	r2, [pc, #244]	@ (80041d8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80040e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f7ff fa14 	bl	800351a <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80040f2:	4b3f      	ldr	r3, [pc, #252]	@ (80041f0 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	4a3e      	ldr	r2, [pc, #248]	@ (80041f4 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	099a      	lsrs	r2, r3, #6
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800410a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800410c:	e002      	b.n	8004114 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	3b01      	subs	r3, #1
 8004112:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f9      	bne.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800411a:	e050      	b.n	80041be <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a35      	ldr	r2, [pc, #212]	@ (80041f8 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d125      	bne.n	8004172 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800412a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d11f      	bne.n	8004172 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2c      	ldr	r2, [pc, #176]	@ (80041e8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d104      	bne.n	8004146 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2e      	ldr	r2, [pc, #184]	@ (80041fc <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d03d      	beq.n	80041c2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800414e:	d004      	beq.n	800415a <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a24      	ldr	r2, [pc, #144]	@ (80041e8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 800415a:	4a24      	ldr	r2, [pc, #144]	@ (80041ec <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800415c:	e000      	b.n	8004160 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 800415e:	4a1e      	ldr	r2, [pc, #120]	@ (80041d8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004164:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7ff f9d5 	bl	800351a <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004170:	e027      	b.n	80041c2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a22      	ldr	r2, [pc, #136]	@ (8004200 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d123      	bne.n	80041c4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800417c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d11d      	bne.n	80041c4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a16      	ldr	r2, [pc, #88]	@ (80041e8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d018      	beq.n	80041c4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800419a:	d004      	beq.n	80041a6 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a11      	ldr	r2, [pc, #68]	@ (80041e8 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 80041a6:	4a11      	ldr	r2, [pc, #68]	@ (80041ec <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80041a8:	e000      	b.n	80041ac <HAL_ADCEx_InjectedConfigChannel+0xa00>
 80041aa:	4a0b      	ldr	r2, [pc, #44]	@ (80041d8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80041ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7ff f9af 	bl	800351a <LL_ADC_SetCommonPathInternalCh>
 80041bc:	e002      	b.n	80041c4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041c2:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80041cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	37d8      	adds	r7, #216	@ 0xd8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	50000700 	.word	0x50000700
 80041dc:	c3210000 	.word	0xc3210000
 80041e0:	90c00010 	.word	0x90c00010
 80041e4:	50000600 	.word	0x50000600
 80041e8:	50000100 	.word	0x50000100
 80041ec:	50000300 	.word	0x50000300
 80041f0:	2000000c 	.word	0x2000000c
 80041f4:	053e2d63 	.word	0x053e2d63
 80041f8:	c7520000 	.word	0xc7520000
 80041fc:	50000500 	.word	0x50000500
 8004200:	cb840000 	.word	0xcb840000

08004204 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b0a1      	sub	sp, #132	@ 0x84
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800421e:	2302      	movs	r3, #2
 8004220:	e0e7      	b.n	80043f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800422a:	2300      	movs	r3, #0
 800422c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800422e:	2300      	movs	r3, #0
 8004230:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800423a:	d102      	bne.n	8004242 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800423c:	4b6f      	ldr	r3, [pc, #444]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	e009      	b.n	8004256 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6e      	ldr	r2, [pc, #440]	@ (8004400 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d102      	bne.n	8004252 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800424c:	4b6d      	ldr	r3, [pc, #436]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	e001      	b.n	8004256 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0be      	b.n	80043f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fa71 	bl	800375e <LL_ADC_REG_IsConversionOngoing>
 800427c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fa6b 	bl	800375e <LL_ADC_REG_IsConversionOngoing>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 80a0 	bne.w	80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 809c 	bne.w	80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042a0:	d004      	beq.n	80042ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a55      	ldr	r2, [pc, #340]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80042ac:	4b56      	ldr	r3, [pc, #344]	@ (8004408 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80042ae:	e000      	b.n	80042b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80042b0:	4b56      	ldr	r3, [pc, #344]	@ (800440c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80042b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d04b      	beq.n	8004354 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80042bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042ce:	035b      	lsls	r3, r3, #13
 80042d0:	430b      	orrs	r3, r1
 80042d2:	431a      	orrs	r2, r3
 80042d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042e0:	d004      	beq.n	80042ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a45      	ldr	r2, [pc, #276]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d10f      	bne.n	800430c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80042ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042f0:	f7ff fa22 	bl	8003738 <LL_ADC_IsEnabled>
 80042f4:	4604      	mov	r4, r0
 80042f6:	4841      	ldr	r0, [pc, #260]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042f8:	f7ff fa1e 	bl	8003738 <LL_ADC_IsEnabled>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4323      	orrs	r3, r4
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e012      	b.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800430c:	483c      	ldr	r0, [pc, #240]	@ (8004400 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800430e:	f7ff fa13 	bl	8003738 <LL_ADC_IsEnabled>
 8004312:	4604      	mov	r4, r0
 8004314:	483b      	ldr	r0, [pc, #236]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004316:	f7ff fa0f 	bl	8003738 <LL_ADC_IsEnabled>
 800431a:	4603      	mov	r3, r0
 800431c:	431c      	orrs	r4, r3
 800431e:	483c      	ldr	r0, [pc, #240]	@ (8004410 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004320:	f7ff fa0a 	bl	8003738 <LL_ADC_IsEnabled>
 8004324:	4603      	mov	r3, r0
 8004326:	4323      	orrs	r3, r4
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d056      	beq.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800433e:	f023 030f 	bic.w	r3, r3, #15
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	6892      	ldr	r2, [r2, #8]
 800434a:	430a      	orrs	r2, r1
 800434c:	431a      	orrs	r2, r3
 800434e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004350:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004352:	e047      	b.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800435c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800435e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004368:	d004      	beq.n	8004374 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a23      	ldr	r2, [pc, #140]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d10f      	bne.n	8004394 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004374:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004378:	f7ff f9de 	bl	8003738 <LL_ADC_IsEnabled>
 800437c:	4604      	mov	r4, r0
 800437e:	481f      	ldr	r0, [pc, #124]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004380:	f7ff f9da 	bl	8003738 <LL_ADC_IsEnabled>
 8004384:	4603      	mov	r3, r0
 8004386:	4323      	orrs	r3, r4
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e012      	b.n	80043ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004394:	481a      	ldr	r0, [pc, #104]	@ (8004400 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004396:	f7ff f9cf 	bl	8003738 <LL_ADC_IsEnabled>
 800439a:	4604      	mov	r4, r0
 800439c:	4819      	ldr	r0, [pc, #100]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800439e:	f7ff f9cb 	bl	8003738 <LL_ADC_IsEnabled>
 80043a2:	4603      	mov	r3, r0
 80043a4:	431c      	orrs	r4, r3
 80043a6:	481a      	ldr	r0, [pc, #104]	@ (8004410 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043a8:	f7ff f9c6 	bl	8003738 <LL_ADC_IsEnabled>
 80043ac:	4603      	mov	r3, r0
 80043ae:	4323      	orrs	r3, r4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d012      	beq.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80043c6:	f023 030f 	bic.w	r3, r3, #15
 80043ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80043cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043ce:	e009      	b.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80043e2:	e000      	b.n	80043e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3784      	adds	r7, #132	@ 0x84
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd90      	pop	{r4, r7, pc}
 80043fa:	bf00      	nop
 80043fc:	50000100 	.word	0x50000100
 8004400:	50000400 	.word	0x50000400
 8004404:	50000500 	.word	0x50000500
 8004408:	50000300 	.word	0x50000300
 800440c:	50000700 	.word	0x50000700
 8004410:	50000600 	.word	0x50000600

08004414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004424:	4b0c      	ldr	r3, [pc, #48]	@ (8004458 <__NVIC_SetPriorityGrouping+0x44>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004430:	4013      	ands	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800443c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004446:	4a04      	ldr	r2, [pc, #16]	@ (8004458 <__NVIC_SetPriorityGrouping+0x44>)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	60d3      	str	r3, [r2, #12]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000ed00 	.word	0xe000ed00

0800445c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004460:	4b04      	ldr	r3, [pc, #16]	@ (8004474 <__NVIC_GetPriorityGrouping+0x18>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	f003 0307 	and.w	r3, r3, #7
}
 800446a:	4618      	mov	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	e000ed00 	.word	0xe000ed00

08004478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	2b00      	cmp	r3, #0
 8004488:	db0b      	blt.n	80044a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	f003 021f 	and.w	r2, r3, #31
 8004490:	4907      	ldr	r1, [pc, #28]	@ (80044b0 <__NVIC_EnableIRQ+0x38>)
 8004492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2001      	movs	r0, #1
 800449a:	fa00 f202 	lsl.w	r2, r0, r2
 800449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e100 	.word	0xe000e100

080044b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	db0a      	blt.n	80044de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	490c      	ldr	r1, [pc, #48]	@ (8004500 <__NVIC_SetPriority+0x4c>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	0112      	lsls	r2, r2, #4
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	440b      	add	r3, r1
 80044d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044dc:	e00a      	b.n	80044f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4908      	ldr	r1, [pc, #32]	@ (8004504 <__NVIC_SetPriority+0x50>)
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	3b04      	subs	r3, #4
 80044ec:	0112      	lsls	r2, r2, #4
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	440b      	add	r3, r1
 80044f2:	761a      	strb	r2, [r3, #24]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000e100 	.word	0xe000e100
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	@ 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f1c3 0307 	rsb	r3, r3, #7
 8004522:	2b04      	cmp	r3, #4
 8004524:	bf28      	it	cs
 8004526:	2304      	movcs	r3, #4
 8004528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3304      	adds	r3, #4
 800452e:	2b06      	cmp	r3, #6
 8004530:	d902      	bls.n	8004538 <NVIC_EncodePriority+0x30>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3b03      	subs	r3, #3
 8004536:	e000      	b.n	800453a <NVIC_EncodePriority+0x32>
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43da      	mvns	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	401a      	ands	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004550:	f04f 31ff 	mov.w	r1, #4294967295
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	43d9      	mvns	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004560:	4313      	orrs	r3, r2
         );
}
 8004562:	4618      	mov	r0, r3
 8004564:	3724      	adds	r7, #36	@ 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004580:	d301      	bcc.n	8004586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004582:	2301      	movs	r3, #1
 8004584:	e00f      	b.n	80045a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004586:	4a0a      	ldr	r2, [pc, #40]	@ (80045b0 <SysTick_Config+0x40>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458e:	210f      	movs	r1, #15
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	f7ff ff8e 	bl	80044b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <SysTick_Config+0x40>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459e:	4b04      	ldr	r3, [pc, #16]	@ (80045b0 <SysTick_Config+0x40>)
 80045a0:	2207      	movs	r2, #7
 80045a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010

080045b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff29 	bl	8004414 <__NVIC_SetPriorityGrouping>
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	4603      	mov	r3, r0
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045d8:	f7ff ff40 	bl	800445c <__NVIC_GetPriorityGrouping>
 80045dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7ff ff90 	bl	8004508 <NVIC_EncodePriority>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff5f 	bl	80044b4 <__NVIC_SetPriority>
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ff33 	bl	8004478 <__NVIC_EnableIRQ>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ffa4 	bl	8004570 <SysTick_Config>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e147      	b.n	80048d6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc ffe4 	bl	8001628 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0210 	bic.w	r2, r2, #16
 800466e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004670:	f7fd fad2 	bl	8001c18 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004676:	e012      	b.n	800469e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004678:	f7fd face 	bl	8001c18 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b0a      	cmp	r3, #10
 8004684:	d90b      	bls.n	800469e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2203      	movs	r2, #3
 8004696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e11b      	b.n	80048d6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d0e5      	beq.n	8004678 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046bc:	f7fd faac 	bl	8001c18 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046c2:	e012      	b.n	80046ea <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046c4:	f7fd faa8 	bl	8001c18 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b0a      	cmp	r3, #10
 80046d0:	d90b      	bls.n	80046ea <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2203      	movs	r2, #3
 80046e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0f5      	b.n	80048d6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0e5      	beq.n	80046c4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0202 	orr.w	r2, r2, #2
 8004706:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a74      	ldr	r2, [pc, #464]	@ (80048e0 <HAL_FDCAN_Init+0x2ac>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d103      	bne.n	800471a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004712:	4a74      	ldr	r2, [pc, #464]	@ (80048e4 <HAL_FDCAN_Init+0x2b0>)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	7c1b      	ldrb	r3, [r3, #16]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d108      	bne.n	8004734 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004730:	619a      	str	r2, [r3, #24]
 8004732:	e007      	b.n	8004744 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004742:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7c5b      	ldrb	r3, [r3, #17]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d108      	bne.n	800475e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800475a:	619a      	str	r2, [r3, #24]
 800475c:	e007      	b.n	800476e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800476c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	7c9b      	ldrb	r3, [r3, #18]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d108      	bne.n	8004788 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699a      	ldr	r2, [r3, #24]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004784:	619a      	str	r2, [r3, #24]
 8004786:	e007      	b.n	8004798 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004796:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80047bc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0210 	bic.w	r2, r2, #16
 80047cc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d108      	bne.n	80047e8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0204 	orr.w	r2, r2, #4
 80047e4:	619a      	str	r2, [r3, #24]
 80047e6:	e02c      	b.n	8004842 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d028      	beq.n	8004842 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d01c      	beq.n	8004832 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004806:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0210 	orr.w	r2, r2, #16
 8004816:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d110      	bne.n	8004842 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0220 	orr.w	r2, r2, #32
 800482e:	619a      	str	r2, [r3, #24]
 8004830:	e007      	b.n	8004842 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0220 	orr.w	r2, r2, #32
 8004840:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	3b01      	subs	r3, #1
 8004848:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	3b01      	subs	r3, #1
 8004850:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004852:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800485a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	3b01      	subs	r3, #1
 8004864:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800486a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800486c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004876:	d115      	bne.n	80048a4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	3b01      	subs	r3, #1
 8004884:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004886:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	3b01      	subs	r3, #1
 800488e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004890:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	3b01      	subs	r3, #1
 800489a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80048a0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80048a2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fafc 	bl	8004eb8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40006400 	.word	0x40006400
 80048e4:	40006500 	.word	0x40006500

080048e8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d12c      	bne.n	800495a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004914:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e023      	b.n	8004968 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fb2a 	bl	8004f90 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2101      	movs	r1, #1
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	fa01 f202 	lsl.w	r2, r1, r2
 8004948:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800494c:	2201      	movs	r2, #1
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	409a      	lsls	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e006      	b.n	8004968 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495e:	f043 0208 	orr.w	r2, r3, #8
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004970:	b480      	push	{r7}
 8004972:	b08b      	sub	sp, #44	@ 0x2c
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004988:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800498a:	7efb      	ldrb	r3, [r7, #27]
 800498c:	2b02      	cmp	r3, #2
 800498e:	f040 80e8 	bne.w	8004b62 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b40      	cmp	r3, #64	@ 0x40
 8004996:	d137      	bne.n	8004a08 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d107      	bne.n	80049b8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0db      	b.n	8004b70 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049c8:	d10a      	bne.n	80049e0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049da:	d101      	bne.n	80049e0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80049dc:	2301      	movs	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	440b      	add	r3, r1
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a06:	e036      	b.n	8004a76 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d107      	bne.n	8004a28 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0a3      	b.n	8004b70 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a38:	d10a      	bne.n	8004a50 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a4a:	d101      	bne.n	8004a50 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a58:	0a1b      	lsrs	r3, r3, #8
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	440b      	add	r3, r1
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	0c9b      	lsrs	r3, r3, #18
 8004a90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e005      	b.n	8004aa6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 020f 	and.w	r2, r3, #15
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	0e1b      	lsrs	r3, r3, #24
 8004afa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	0fda      	lsrs	r2, r3, #31
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	3304      	adds	r3, #4
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	e00a      	b.n	8004b32 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	441a      	add	r2, r3
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	440b      	add	r3, r1
 8004b28:	7812      	ldrb	r2, [r2, #0]
 8004b2a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	623b      	str	r3, [r7, #32]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	4a11      	ldr	r2, [pc, #68]	@ (8004b7c <HAL_FDCAN_GetRxMessage+0x20c>)
 8004b38:	5cd3      	ldrb	r3, [r2, r3]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d3ec      	bcc.n	8004b1c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b40      	cmp	r3, #64	@ 0x40
 8004b46:	d105      	bne.n	8004b54 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004b52:	e004      	b.n	8004b5e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e006      	b.n	8004b70 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b66:	f043 0208 	orr.w	r2, r3, #8
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
  }
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	372c      	adds	r7, #44	@ 0x2c
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	08008e88 	.word	0x08008e88

08004b80 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	@ 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bcc:	4013      	ands	r3, r2
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004bda:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	4013      	ands	r3, r2
 8004be6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004bf2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c06:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	099b      	lsrs	r3, r3, #6
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00c      	beq.n	8004c36 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	099b      	lsrs	r3, r3, #6
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d006      	beq.n	8004c36 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2240      	movs	r2, #64	@ 0x40
 8004c2e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f922 	bl	8004e7a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01a      	beq.n	8004c78 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d014      	beq.n	8004c78 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c56:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004c70:	6939      	ldr	r1, [r7, #16]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f8e2 	bl	8004e3c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c84:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f8ac 	bl	8004de6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fb fce8 	bl	8000674 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004cb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f8a1 	bl	8004dfc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	0a5b      	lsrs	r3, r3, #9
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00d      	beq.n	8004ce2 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	0a5b      	lsrs	r3, r3, #9
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cda:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f898 	bl	8004e12 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	09db      	lsrs	r3, r3, #7
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d019      	beq.n	8004d22 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	09db      	lsrs	r3, r3, #7
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d013      	beq.n	8004d22 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004d02:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2280      	movs	r2, #128	@ 0x80
 8004d18:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f882 	bl	8004e26 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	0b5b      	lsrs	r3, r3, #13
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	0b5b      	lsrs	r3, r3, #13
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d42:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f884 	bl	8004e52 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	0bdb      	lsrs	r3, r3, #15
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00d      	beq.n	8004d72 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	0bdb      	lsrs	r3, r3, #15
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004d6a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f87a 	bl	8004e66 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	0b9b      	lsrs	r3, r3, #14
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	0b9b      	lsrs	r3, r3, #14
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004d92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004dae:	69f9      	ldr	r1, [r7, #28]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f876 	bl	8004ea2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d009      	beq.n	8004dd0 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6a3a      	ldr	r2, [r7, #32]
 8004dc2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f858 	bl	8004e8e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004dde:	bf00      	nop
 8004de0:	3730      	adds	r7, #48	@ 0x30
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004ec0:	4b30      	ldr	r3, [pc, #192]	@ (8004f84 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004ec2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8004f88 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d103      	bne.n	8004ed6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004ed4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2c      	ldr	r2, [pc, #176]	@ (8004f8c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d103      	bne.n	8004ee8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8004ee6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ef6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efe:	041a      	lsls	r2, r3, #16
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f1c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f24:	061a      	lsls	r2, r3, #24
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e005      	b.n	8004f6a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3304      	adds	r3, #4
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d3f3      	bcc.n	8004f5e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	4000a400 	.word	0x4000a400
 8004f88:	40006800 	.word	0x40006800
 8004f8c:	40006c00 	.word	0x40006c00

08004f90 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	@ 0x24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004fae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	e00a      	b.n	8004fd2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004fc4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004fca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004fcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fd0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004fdc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004fe2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004fe8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4413      	add	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	440b      	add	r3, r1
 8005004:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	3304      	adds	r3, #4
 8005010:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	3304      	adds	r3, #4
 800501c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e020      	b.n	8005066 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3303      	adds	r3, #3
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	4413      	add	r3, r2
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3302      	adds	r3, #2
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	440b      	add	r3, r1
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800503c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	3301      	adds	r3, #1
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	440b      	add	r3, r1
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800504a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	440a      	add	r2, r1
 8005052:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005054:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	3304      	adds	r3, #4
 800505e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3304      	adds	r3, #4
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	4a06      	ldr	r2, [pc, #24]	@ (8005084 <FDCAN_CopyMessageToRAM+0xf4>)
 800506c:	5cd3      	ldrb	r3, [r2, r3]
 800506e:	461a      	mov	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4293      	cmp	r3, r2
 8005074:	d3d6      	bcc.n	8005024 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	3724      	adds	r7, #36	@ 0x24
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	08008e88 	.word	0x08008e88

08005088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005096:	e15a      	b.n	800534e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	2101      	movs	r1, #1
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	4013      	ands	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 814c 	beq.w	8005348 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d005      	beq.n	80050c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d130      	bne.n	800512a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	2203      	movs	r2, #3
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050fe:	2201      	movs	r2, #1
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43db      	mvns	r3, r3
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4013      	ands	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	f003 0201 	and.w	r2, r3, #1
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b03      	cmp	r3, #3
 8005134:	d017      	beq.n	8005166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	2203      	movs	r2, #3
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4013      	ands	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d123      	bne.n	80051ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	08da      	lsrs	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3208      	adds	r2, #8
 800517a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	220f      	movs	r2, #15
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	43db      	mvns	r3, r3
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4013      	ands	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	08da      	lsrs	r2, r3, #3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3208      	adds	r2, #8
 80051b4:	6939      	ldr	r1, [r7, #16]
 80051b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2203      	movs	r2, #3
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4013      	ands	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0203 	and.w	r2, r3, #3
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80a6 	beq.w	8005348 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051fc:	4b5b      	ldr	r3, [pc, #364]	@ (800536c <HAL_GPIO_Init+0x2e4>)
 80051fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005200:	4a5a      	ldr	r2, [pc, #360]	@ (800536c <HAL_GPIO_Init+0x2e4>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6613      	str	r3, [r2, #96]	@ 0x60
 8005208:	4b58      	ldr	r3, [pc, #352]	@ (800536c <HAL_GPIO_Init+0x2e4>)
 800520a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005214:	4a56      	ldr	r2, [pc, #344]	@ (8005370 <HAL_GPIO_Init+0x2e8>)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	3302      	adds	r3, #2
 800521c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	220f      	movs	r2, #15
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4013      	ands	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800523e:	d01f      	beq.n	8005280 <HAL_GPIO_Init+0x1f8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a4c      	ldr	r2, [pc, #304]	@ (8005374 <HAL_GPIO_Init+0x2ec>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d019      	beq.n	800527c <HAL_GPIO_Init+0x1f4>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a4b      	ldr	r2, [pc, #300]	@ (8005378 <HAL_GPIO_Init+0x2f0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <HAL_GPIO_Init+0x1f0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a4a      	ldr	r2, [pc, #296]	@ (800537c <HAL_GPIO_Init+0x2f4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00d      	beq.n	8005274 <HAL_GPIO_Init+0x1ec>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a49      	ldr	r2, [pc, #292]	@ (8005380 <HAL_GPIO_Init+0x2f8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <HAL_GPIO_Init+0x1e8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a48      	ldr	r2, [pc, #288]	@ (8005384 <HAL_GPIO_Init+0x2fc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <HAL_GPIO_Init+0x1e4>
 8005268:	2305      	movs	r3, #5
 800526a:	e00a      	b.n	8005282 <HAL_GPIO_Init+0x1fa>
 800526c:	2306      	movs	r3, #6
 800526e:	e008      	b.n	8005282 <HAL_GPIO_Init+0x1fa>
 8005270:	2304      	movs	r3, #4
 8005272:	e006      	b.n	8005282 <HAL_GPIO_Init+0x1fa>
 8005274:	2303      	movs	r3, #3
 8005276:	e004      	b.n	8005282 <HAL_GPIO_Init+0x1fa>
 8005278:	2302      	movs	r3, #2
 800527a:	e002      	b.n	8005282 <HAL_GPIO_Init+0x1fa>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <HAL_GPIO_Init+0x1fa>
 8005280:	2300      	movs	r3, #0
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	f002 0203 	and.w	r2, r2, #3
 8005288:	0092      	lsls	r2, r2, #2
 800528a:	4093      	lsls	r3, r2
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005292:	4937      	ldr	r1, [pc, #220]	@ (8005370 <HAL_GPIO_Init+0x2e8>)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	089b      	lsrs	r3, r3, #2
 8005298:	3302      	adds	r3, #2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052a0:	4b39      	ldr	r3, [pc, #228]	@ (8005388 <HAL_GPIO_Init+0x300>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4013      	ands	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052c4:	4a30      	ldr	r2, [pc, #192]	@ (8005388 <HAL_GPIO_Init+0x300>)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80052ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005388 <HAL_GPIO_Init+0x300>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4013      	ands	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052ee:	4a26      	ldr	r2, [pc, #152]	@ (8005388 <HAL_GPIO_Init+0x300>)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80052f4:	4b24      	ldr	r3, [pc, #144]	@ (8005388 <HAL_GPIO_Init+0x300>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4013      	ands	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005318:	4a1b      	ldr	r2, [pc, #108]	@ (8005388 <HAL_GPIO_Init+0x300>)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800531e:	4b1a      	ldr	r3, [pc, #104]	@ (8005388 <HAL_GPIO_Init+0x300>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	43db      	mvns	r3, r3
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4013      	ands	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005342:	4a11      	ldr	r2, [pc, #68]	@ (8005388 <HAL_GPIO_Init+0x300>)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3301      	adds	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	f47f ae9d 	bne.w	8005098 <HAL_GPIO_Init+0x10>
  }
}
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	40021000 	.word	0x40021000
 8005370:	40010000 	.word	0x40010000
 8005374:	48000400 	.word	0x48000400
 8005378:	48000800 	.word	0x48000800
 800537c:	48000c00 	.word	0x48000c00
 8005380:	48001000 	.word	0x48001000
 8005384:	48001400 	.word	0x48001400
 8005388:	40010400 	.word	0x40010400

0800538c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	887b      	ldrh	r3, [r7, #2]
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	e001      	b.n	80053ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
 80053c8:	4613      	mov	r3, r2
 80053ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053cc:	787b      	ldrb	r3, [r7, #1]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053d8:	e002      	b.n	80053e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053fe:	887a      	ldrh	r2, [r7, #2]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4013      	ands	r3, r2
 8005404:	041a      	lsls	r2, r3, #16
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	43d9      	mvns	r1, r3
 800540a:	887b      	ldrh	r3, [r7, #2]
 800540c:	400b      	ands	r3, r1
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	619a      	str	r2, [r3, #24]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d141      	bne.n	80054b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800542e:	4b4b      	ldr	r3, [pc, #300]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543a:	d131      	bne.n	80054a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800543c:	4b47      	ldr	r3, [pc, #284]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800543e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005442:	4a46      	ldr	r2, [pc, #280]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005448:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800544c:	4b43      	ldr	r3, [pc, #268]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005454:	4a41      	ldr	r2, [pc, #260]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800545a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800545c:	4b40      	ldr	r3, [pc, #256]	@ (8005560 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2232      	movs	r2, #50	@ 0x32
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	4a3f      	ldr	r2, [pc, #252]	@ (8005564 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005468:	fba2 2303 	umull	r2, r3, r2, r3
 800546c:	0c9b      	lsrs	r3, r3, #18
 800546e:	3301      	adds	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005472:	e002      	b.n	800547a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3b01      	subs	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800547a:	4b38      	ldr	r3, [pc, #224]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005486:	d102      	bne.n	800548e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f2      	bne.n	8005474 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800548e:	4b33      	ldr	r3, [pc, #204]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800549a:	d158      	bne.n	800554e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e057      	b.n	8005550 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054a0:	4b2e      	ldr	r3, [pc, #184]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a6:	4a2d      	ldr	r2, [pc, #180]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054b0:	e04d      	b.n	800554e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b8:	d141      	bne.n	800553e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ba:	4b28      	ldr	r3, [pc, #160]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c6:	d131      	bne.n	800552c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054c8:	4b24      	ldr	r3, [pc, #144]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ce:	4a23      	ldr	r2, [pc, #140]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054d8:	4b20      	ldr	r3, [pc, #128]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054e0:	4a1e      	ldr	r2, [pc, #120]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005560 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2232      	movs	r2, #50	@ 0x32
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	0c9b      	lsrs	r3, r3, #18
 80054fa:	3301      	adds	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054fe:	e002      	b.n	8005506 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3b01      	subs	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005506:	4b15      	ldr	r3, [pc, #84]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800550e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005512:	d102      	bne.n	800551a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f2      	bne.n	8005500 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800551a:	4b10      	ldr	r3, [pc, #64]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005526:	d112      	bne.n	800554e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e011      	b.n	8005550 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800552c:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005532:	4a0a      	ldr	r2, [pc, #40]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800553c:	e007      	b.n	800554e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800553e:	4b07      	ldr	r3, [pc, #28]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005546:	4a05      	ldr	r2, [pc, #20]	@ (800555c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005548:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800554c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40007000 	.word	0x40007000
 8005560:	2000000c 	.word	0x2000000c
 8005564:	431bde83 	.word	0x431bde83

08005568 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800556c:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a04      	ldr	r2, [pc, #16]	@ (8005584 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005576:	6093      	str	r3, [r2, #8]
}
 8005578:	bf00      	nop
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40007000 	.word	0x40007000

08005588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e2fe      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d075      	beq.n	8005692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055a6:	4b97      	ldr	r3, [pc, #604]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055b0:	4b94      	ldr	r3, [pc, #592]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	d102      	bne.n	80055c6 <HAL_RCC_OscConfig+0x3e>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d002      	beq.n	80055cc <HAL_RCC_OscConfig+0x44>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d10b      	bne.n	80055e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055cc:	4b8d      	ldr	r3, [pc, #564]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d05b      	beq.n	8005690 <HAL_RCC_OscConfig+0x108>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d157      	bne.n	8005690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e2d9      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ec:	d106      	bne.n	80055fc <HAL_RCC_OscConfig+0x74>
 80055ee:	4b85      	ldr	r3, [pc, #532]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a84      	ldr	r2, [pc, #528]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	e01d      	b.n	8005638 <HAL_RCC_OscConfig+0xb0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005604:	d10c      	bne.n	8005620 <HAL_RCC_OscConfig+0x98>
 8005606:	4b7f      	ldr	r3, [pc, #508]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a7e      	ldr	r2, [pc, #504]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 800560c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	4b7c      	ldr	r3, [pc, #496]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7b      	ldr	r2, [pc, #492]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	e00b      	b.n	8005638 <HAL_RCC_OscConfig+0xb0>
 8005620:	4b78      	ldr	r3, [pc, #480]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a77      	ldr	r2, [pc, #476]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	4b75      	ldr	r3, [pc, #468]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a74      	ldr	r2, [pc, #464]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d013      	beq.n	8005668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fc faea 	bl	8001c18 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005648:	f7fc fae6 	bl	8001c18 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	@ 0x64
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e29e      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800565a:	4b6a      	ldr	r3, [pc, #424]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0xc0>
 8005666:	e014      	b.n	8005692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc fad6 	bl	8001c18 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005670:	f7fc fad2 	bl	8001c18 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b64      	cmp	r3, #100	@ 0x64
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e28a      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005682:	4b60      	ldr	r3, [pc, #384]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0xe8>
 800568e:	e000      	b.n	8005692 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d075      	beq.n	800578a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800569e:	4b59      	ldr	r3, [pc, #356]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 030c 	and.w	r3, r3, #12
 80056a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056a8:	4b56      	ldr	r3, [pc, #344]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	d102      	bne.n	80056be <HAL_RCC_OscConfig+0x136>
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d002      	beq.n	80056c4 <HAL_RCC_OscConfig+0x13c>
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d11f      	bne.n	8005704 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <HAL_RCC_OscConfig+0x154>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e25d      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b49      	ldr	r3, [pc, #292]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	4946      	ldr	r1, [pc, #280]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056f0:	4b45      	ldr	r3, [pc, #276]	@ (8005808 <HAL_RCC_OscConfig+0x280>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fc fa43 	bl	8001b80 <HAL_InitTick>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d043      	beq.n	8005788 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e249      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d023      	beq.n	8005754 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800570c:	4b3d      	ldr	r3, [pc, #244]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a3c      	ldr	r2, [pc, #240]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fc fa7e 	bl	8001c18 <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005720:	f7fc fa7a 	bl	8001c18 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e232      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005732:	4b34      	ldr	r3, [pc, #208]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573e:	4b31      	ldr	r3, [pc, #196]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	061b      	lsls	r3, r3, #24
 800574c:	492d      	ldr	r1, [pc, #180]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	604b      	str	r3, [r1, #4]
 8005752:	e01a      	b.n	800578a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005754:	4b2b      	ldr	r3, [pc, #172]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2a      	ldr	r2, [pc, #168]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 800575a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800575e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fc fa5a 	bl	8001c18 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005768:	f7fc fa56 	bl	8001c18 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e20e      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800577a:	4b22      	ldr	r3, [pc, #136]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x1e0>
 8005786:	e000      	b.n	800578a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005788:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d041      	beq.n	800581a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01c      	beq.n	80057d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800579e:	4b19      	ldr	r3, [pc, #100]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80057a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057a4:	4a17      	ldr	r2, [pc, #92]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ae:	f7fc fa33 	bl	8001c18 <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b6:	f7fc fa2f 	bl	8001c18 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e1e7      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80057ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0ef      	beq.n	80057b6 <HAL_RCC_OscConfig+0x22e>
 80057d6:	e020      	b.n	800581a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80057da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057de:	4a09      	ldr	r2, [pc, #36]	@ (8005804 <HAL_RCC_OscConfig+0x27c>)
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fc fa16 	bl	8001c18 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057ee:	e00d      	b.n	800580c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fc fa12 	bl	8001c18 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d906      	bls.n	800580c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e1ca      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800580c:	4b8c      	ldr	r3, [pc, #560]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 800580e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1ea      	bne.n	80057f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 80a6 	beq.w	8005974 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005828:	2300      	movs	r3, #0
 800582a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800582c:	4b84      	ldr	r3, [pc, #528]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_RCC_OscConfig+0x2b4>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <HAL_RCC_OscConfig+0x2b6>
 800583c:	2300      	movs	r3, #0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00d      	beq.n	800585e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005842:	4b7f      	ldr	r3, [pc, #508]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005846:	4a7e      	ldr	r2, [pc, #504]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 8005848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800584c:	6593      	str	r3, [r2, #88]	@ 0x58
 800584e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800585a:	2301      	movs	r3, #1
 800585c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800585e:	4b79      	ldr	r3, [pc, #484]	@ (8005a44 <HAL_RCC_OscConfig+0x4bc>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d118      	bne.n	800589c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800586a:	4b76      	ldr	r3, [pc, #472]	@ (8005a44 <HAL_RCC_OscConfig+0x4bc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a75      	ldr	r2, [pc, #468]	@ (8005a44 <HAL_RCC_OscConfig+0x4bc>)
 8005870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005876:	f7fc f9cf 	bl	8001c18 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587e:	f7fc f9cb 	bl	8001c18 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e183      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005890:	4b6c      	ldr	r3, [pc, #432]	@ (8005a44 <HAL_RCC_OscConfig+0x4bc>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d108      	bne.n	80058b6 <HAL_RCC_OscConfig+0x32e>
 80058a4:	4b66      	ldr	r3, [pc, #408]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	4a65      	ldr	r2, [pc, #404]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058b4:	e024      	b.n	8005900 <HAL_RCC_OscConfig+0x378>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d110      	bne.n	80058e0 <HAL_RCC_OscConfig+0x358>
 80058be:	4b60      	ldr	r3, [pc, #384]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c4:	4a5e      	ldr	r2, [pc, #376]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058c6:	f043 0304 	orr.w	r3, r3, #4
 80058ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d4:	4a5a      	ldr	r2, [pc, #360]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058de:	e00f      	b.n	8005900 <HAL_RCC_OscConfig+0x378>
 80058e0:	4b57      	ldr	r3, [pc, #348]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e6:	4a56      	ldr	r2, [pc, #344]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058f0:	4b53      	ldr	r3, [pc, #332]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f6:	4a52      	ldr	r2, [pc, #328]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80058f8:	f023 0304 	bic.w	r3, r3, #4
 80058fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d016      	beq.n	8005936 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fc f986 	bl	8001c18 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800590e:	e00a      	b.n	8005926 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005910:	f7fc f982 	bl	8001c18 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e138      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005926:	4b46      	ldr	r3, [pc, #280]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 8005928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ed      	beq.n	8005910 <HAL_RCC_OscConfig+0x388>
 8005934:	e015      	b.n	8005962 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fc f96f 	bl	8001c18 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fc f96b 	bl	8001c18 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e121      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005954:	4b3a      	ldr	r3, [pc, #232]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 8005956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1ed      	bne.n	800593e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005962:	7ffb      	ldrb	r3, [r7, #31]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d105      	bne.n	8005974 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005968:	4b35      	ldr	r3, [pc, #212]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 800596a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596c:	4a34      	ldr	r2, [pc, #208]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 800596e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005972:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d03c      	beq.n	80059fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01c      	beq.n	80059c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005988:	4b2d      	ldr	r3, [pc, #180]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 800598a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800598e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005998:	f7fc f93e 	bl	8001c18 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059a0:	f7fc f93a 	bl	8001c18 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e0f2      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059b2:	4b23      	ldr	r3, [pc, #140]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80059b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0ef      	beq.n	80059a0 <HAL_RCC_OscConfig+0x418>
 80059c0:	e01b      	b.n	80059fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80059c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d2:	f7fc f921 	bl	8001c18 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059da:	f7fc f91d 	bl	8001c18 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e0d5      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059ec:	4b14      	ldr	r3, [pc, #80]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 80059ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1ef      	bne.n	80059da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80c9 	beq.w	8005b96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a04:	4b0e      	ldr	r3, [pc, #56]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f003 030c 	and.w	r3, r3, #12
 8005a0c:	2b0c      	cmp	r3, #12
 8005a0e:	f000 8083 	beq.w	8005b18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d15e      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1a:	4b09      	ldr	r3, [pc, #36]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a08      	ldr	r2, [pc, #32]	@ (8005a40 <HAL_RCC_OscConfig+0x4b8>)
 8005a20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fc f8f7 	bl	8001c18 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a2c:	e00c      	b.n	8005a48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a2e:	f7fc f8f3 	bl	8001c18 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d905      	bls.n	8005a48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e0ab      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
 8005a40:	40021000 	.word	0x40021000
 8005a44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a48:	4b55      	ldr	r3, [pc, #340]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1ec      	bne.n	8005a2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a54:	4b52      	ldr	r3, [pc, #328]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	4b52      	ldr	r3, [pc, #328]	@ (8005ba4 <HAL_RCC_OscConfig+0x61c>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6a11      	ldr	r1, [r2, #32]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a64:	3a01      	subs	r2, #1
 8005a66:	0112      	lsls	r2, r2, #4
 8005a68:	4311      	orrs	r1, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005a6e:	0212      	lsls	r2, r2, #8
 8005a70:	4311      	orrs	r1, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a76:	0852      	lsrs	r2, r2, #1
 8005a78:	3a01      	subs	r2, #1
 8005a7a:	0552      	lsls	r2, r2, #21
 8005a7c:	4311      	orrs	r1, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a82:	0852      	lsrs	r2, r2, #1
 8005a84:	3a01      	subs	r2, #1
 8005a86:	0652      	lsls	r2, r2, #25
 8005a88:	4311      	orrs	r1, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a8e:	06d2      	lsls	r2, r2, #27
 8005a90:	430a      	orrs	r2, r1
 8005a92:	4943      	ldr	r1, [pc, #268]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a98:	4b41      	ldr	r3, [pc, #260]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a40      	ldr	r2, [pc, #256]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aa2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fc f8b2 	bl	8001c18 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fc f8ae 	bl	8001c18 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e066      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aca:	4b35      	ldr	r3, [pc, #212]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x530>
 8005ad6:	e05e      	b.n	8005b96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad8:	4b31      	ldr	r3, [pc, #196]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a30      	ldr	r2, [pc, #192]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7fc f898 	bl	8001c18 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aec:	f7fc f894 	bl	8001c18 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e04c      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005afe:	4b28      	ldr	r3, [pc, #160]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b0a:	4b25      	ldr	r3, [pc, #148]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	4924      	ldr	r1, [pc, #144]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005b10:	4b25      	ldr	r3, [pc, #148]	@ (8005ba8 <HAL_RCC_OscConfig+0x620>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	60cb      	str	r3, [r1, #12]
 8005b16:	e03e      	b.n	8005b96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e039      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b24:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba0 <HAL_RCC_OscConfig+0x618>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 0203 	and.w	r2, r3, #3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d12c      	bne.n	8005b92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b42:	3b01      	subs	r3, #1
 8005b44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d123      	bne.n	8005b92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d11b      	bne.n	8005b92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d113      	bne.n	8005b92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	3b01      	subs	r3, #1
 8005b78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d109      	bne.n	8005b92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d001      	beq.n	8005b96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	019f800c 	.word	0x019f800c
 8005ba8:	feeefffc 	.word	0xfeeefffc

08005bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e11e      	b.n	8005e02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b91      	ldr	r3, [pc, #580]	@ (8005e0c <HAL_RCC_ClockConfig+0x260>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d910      	bls.n	8005bf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b8e      	ldr	r3, [pc, #568]	@ (8005e0c <HAL_RCC_ClockConfig+0x260>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f023 020f 	bic.w	r2, r3, #15
 8005bda:	498c      	ldr	r1, [pc, #560]	@ (8005e0c <HAL_RCC_ClockConfig+0x260>)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be2:	4b8a      	ldr	r3, [pc, #552]	@ (8005e0c <HAL_RCC_ClockConfig+0x260>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d001      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e106      	b.n	8005e02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d073      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d129      	bne.n	8005c5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c08:	4b81      	ldr	r3, [pc, #516]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0f4      	b.n	8005e02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c18:	f000 f99e 	bl	8005f58 <RCC_GetSysClockFreqFromPLLSource>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4a7c      	ldr	r2, [pc, #496]	@ (8005e14 <HAL_RCC_ClockConfig+0x268>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d93f      	bls.n	8005ca6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c26:	4b7a      	ldr	r3, [pc, #488]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d033      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d12f      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c46:	4b72      	ldr	r3, [pc, #456]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c4e:	4a70      	ldr	r2, [pc, #448]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c56:	2380      	movs	r3, #128	@ 0x80
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	e024      	b.n	8005ca6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d107      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c64:	4b6a      	ldr	r3, [pc, #424]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d109      	bne.n	8005c84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0c6      	b.n	8005e02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c74:	4b66      	ldr	r3, [pc, #408]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0be      	b.n	8005e02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c84:	f000 f8ce 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8005c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4a61      	ldr	r2, [pc, #388]	@ (8005e14 <HAL_RCC_ClockConfig+0x268>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d909      	bls.n	8005ca6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c92:	4b5f      	ldr	r3, [pc, #380]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c9a:	4a5d      	ldr	r2, [pc, #372]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ca0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ca2:	2380      	movs	r3, #128	@ 0x80
 8005ca4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ca6:	4b5a      	ldr	r3, [pc, #360]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 0203 	bic.w	r2, r3, #3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4957      	ldr	r1, [pc, #348]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb8:	f7fb ffae 	bl	8001c18 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc0:	f7fb ffaa 	bl	8001c18 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e095      	b.n	8005e02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 020c 	and.w	r2, r3, #12
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1eb      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d023      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d00:	4b43      	ldr	r3, [pc, #268]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4a42      	ldr	r2, [pc, #264]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005d06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d18:	4b3d      	ldr	r3, [pc, #244]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d20:	4a3b      	ldr	r2, [pc, #236]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005d22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d28:	4b39      	ldr	r3, [pc, #228]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4936      	ldr	r1, [pc, #216]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b80      	cmp	r3, #128	@ 0x80
 8005d40:	d105      	bne.n	8005d4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d42:	4b33      	ldr	r3, [pc, #204]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	4a32      	ldr	r2, [pc, #200]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005d48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e0c <HAL_RCC_ClockConfig+0x260>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d21d      	bcs.n	8005d98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e0c <HAL_RCC_ClockConfig+0x260>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f023 020f 	bic.w	r2, r3, #15
 8005d64:	4929      	ldr	r1, [pc, #164]	@ (8005e0c <HAL_RCC_ClockConfig+0x260>)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d6c:	f7fb ff54 	bl	8001c18 <HAL_GetTick>
 8005d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	e00a      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d74:	f7fb ff50 	bl	8001c18 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e03b      	b.n	8005e02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	4b20      	ldr	r3, [pc, #128]	@ (8005e0c <HAL_RCC_ClockConfig+0x260>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1ed      	bne.n	8005d74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005da4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4917      	ldr	r1, [pc, #92]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dc2:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	490f      	ldr	r1, [pc, #60]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dd6:	f000 f825 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8005e10 <HAL_RCC_ClockConfig+0x264>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	091b      	lsrs	r3, r3, #4
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	490c      	ldr	r1, [pc, #48]	@ (8005e18 <HAL_RCC_ClockConfig+0x26c>)
 8005de8:	5ccb      	ldrb	r3, [r1, r3]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	fa22 f303 	lsr.w	r3, r2, r3
 8005df2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <HAL_RCC_ClockConfig+0x270>)
 8005df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005df6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e20 <HAL_RCC_ClockConfig+0x274>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fb fec0 	bl	8001b80 <HAL_InitTick>
 8005e00:	4603      	mov	r3, r0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40022000 	.word	0x40022000
 8005e10:	40021000 	.word	0x40021000
 8005e14:	04c4b400 	.word	0x04c4b400
 8005e18:	08008e70 	.word	0x08008e70
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	20000010 	.word	0x20000010

08005e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d102      	bne.n	8005e3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e36:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	e047      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e3c:	4b27      	ldr	r3, [pc, #156]	@ (8005edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 030c 	and.w	r3, r3, #12
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d102      	bne.n	8005e4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e48:	4b26      	ldr	r3, [pc, #152]	@ (8005ee4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	e03e      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e4e:	4b23      	ldr	r3, [pc, #140]	@ (8005edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b0c      	cmp	r3, #12
 8005e58:	d136      	bne.n	8005ec8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e5a:	4b20      	ldr	r3, [pc, #128]	@ (8005edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e64:	4b1d      	ldr	r3, [pc, #116]	@ (8005edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d10c      	bne.n	8005e92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e78:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e82:	68d2      	ldr	r2, [r2, #12]
 8005e84:	0a12      	lsrs	r2, r2, #8
 8005e86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	617b      	str	r3, [r7, #20]
      break;
 8005e90:	e00c      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e92:	4a13      	ldr	r2, [pc, #76]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	4a10      	ldr	r2, [pc, #64]	@ (8005edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e9c:	68d2      	ldr	r2, [r2, #12]
 8005e9e:	0a12      	lsrs	r2, r2, #8
 8005ea0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]
      break;
 8005eaa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eac:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	0e5b      	lsrs	r3, r3, #25
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	e001      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ecc:	693b      	ldr	r3, [r7, #16]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	00f42400 	.word	0x00f42400
 8005ee4:	007a1200 	.word	0x007a1200

08005ee8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eec:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	2000000c 	.word	0x2000000c

08005f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f04:	f7ff fff0 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4b06      	ldr	r3, [pc, #24]	@ (8005f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	4904      	ldr	r1, [pc, #16]	@ (8005f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f16:	5ccb      	ldrb	r3, [r1, r3]
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40021000 	.word	0x40021000
 8005f28:	08008e80 	.word	0x08008e80

08005f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f30:	f7ff ffda 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	0adb      	lsrs	r3, r3, #11
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	4904      	ldr	r1, [pc, #16]	@ (8005f54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40021000 	.word	0x40021000
 8005f54:	08008e80 	.word	0x08008e80

08005f58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f68:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d10c      	bne.n	8005f96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f7c:	4a17      	ldr	r2, [pc, #92]	@ (8005fdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	4a14      	ldr	r2, [pc, #80]	@ (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f86:	68d2      	ldr	r2, [r2, #12]
 8005f88:	0a12      	lsrs	r2, r2, #8
 8005f8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f8e:	fb02 f303 	mul.w	r3, r2, r3
 8005f92:	617b      	str	r3, [r7, #20]
    break;
 8005f94:	e00c      	b.n	8005fb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f96:	4a12      	ldr	r2, [pc, #72]	@ (8005fe0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fa0:	68d2      	ldr	r2, [r2, #12]
 8005fa2:	0a12      	lsrs	r2, r2, #8
 8005fa4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	617b      	str	r3, [r7, #20]
    break;
 8005fae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fb0:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	0e5b      	lsrs	r3, r3, #25
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	3301      	adds	r3, #1
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fca:	687b      	ldr	r3, [r7, #4]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	007a1200 	.word	0x007a1200
 8005fe0:	00f42400 	.word	0x00f42400

08005fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fec:	2300      	movs	r3, #0
 8005fee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8098 	beq.w	8006132 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006002:	2300      	movs	r3, #0
 8006004:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006006:	4b43      	ldr	r3, [pc, #268]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800600a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10d      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006012:	4b40      	ldr	r3, [pc, #256]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006016:	4a3f      	ldr	r2, [pc, #252]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601c:	6593      	str	r3, [r2, #88]	@ 0x58
 800601e:	4b3d      	ldr	r3, [pc, #244]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800602a:	2301      	movs	r3, #1
 800602c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800602e:	4b3a      	ldr	r3, [pc, #232]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a39      	ldr	r2, [pc, #228]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800603a:	f7fb fded 	bl	8001c18 <HAL_GetTick>
 800603e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006040:	e009      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006042:	f7fb fde9 	bl	8001c18 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d902      	bls.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	74fb      	strb	r3, [r7, #19]
        break;
 8006054:	e005      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006056:	4b30      	ldr	r3, [pc, #192]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0ef      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006062:	7cfb      	ldrb	r3, [r7, #19]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d159      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006068:	4b2a      	ldr	r3, [pc, #168]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006072:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01e      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	429a      	cmp	r2, r3
 8006082:	d019      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006084:	4b23      	ldr	r3, [pc, #140]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800608a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800608e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006090:	4b20      	ldr	r3, [pc, #128]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006096:	4a1f      	ldr	r2, [pc, #124]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800609c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060b0:	4a18      	ldr	r2, [pc, #96]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d016      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c2:	f7fb fda9 	bl	8001c18 <HAL_GetTick>
 80060c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060c8:	e00b      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ca:	f7fb fda5 	bl	8001c18 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d8:	4293      	cmp	r3, r2
 80060da:	d902      	bls.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	74fb      	strb	r3, [r7, #19]
            break;
 80060e0:	e006      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0ec      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060f0:	7cfb      	ldrb	r3, [r7, #19]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060f6:	4b07      	ldr	r3, [pc, #28]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006104:	4903      	ldr	r1, [pc, #12]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800610c:	e008      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800610e:	7cfb      	ldrb	r3, [r7, #19]
 8006110:	74bb      	strb	r3, [r7, #18]
 8006112:	e005      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006114:	40021000 	.word	0x40021000
 8006118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	7cfb      	ldrb	r3, [r7, #19]
 800611e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006120:	7c7b      	ldrb	r3, [r7, #17]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d105      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006126:	4ba7      	ldr	r3, [pc, #668]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612a:	4aa6      	ldr	r2, [pc, #664]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006130:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800613e:	4ba1      	ldr	r3, [pc, #644]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006144:	f023 0203 	bic.w	r2, r3, #3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	499d      	ldr	r1, [pc, #628]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006160:	4b98      	ldr	r3, [pc, #608]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006166:	f023 020c 	bic.w	r2, r3, #12
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	4995      	ldr	r1, [pc, #596]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006182:	4b90      	ldr	r3, [pc, #576]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006188:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	498c      	ldr	r1, [pc, #560]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061a4:	4b87      	ldr	r3, [pc, #540]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	4984      	ldr	r1, [pc, #528]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061c6:	4b7f      	ldr	r3, [pc, #508]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	497b      	ldr	r1, [pc, #492]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0320 	and.w	r3, r3, #32
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061e8:	4b76      	ldr	r3, [pc, #472]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	4973      	ldr	r1, [pc, #460]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800620a:	4b6e      	ldr	r3, [pc, #440]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006210:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	496a      	ldr	r1, [pc, #424]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800622c:	4b65      	ldr	r3, [pc, #404]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006232:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	4962      	ldr	r1, [pc, #392]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800624e:	4b5d      	ldr	r3, [pc, #372]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006254:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	4959      	ldr	r1, [pc, #356]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006270:	4b54      	ldr	r3, [pc, #336]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006276:	f023 0203 	bic.w	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627e:	4951      	ldr	r1, [pc, #324]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006292:	4b4c      	ldr	r3, [pc, #304]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006298:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	4948      	ldr	r1, [pc, #288]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d015      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062b4:	4b43      	ldr	r3, [pc, #268]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c2:	4940      	ldr	r1, [pc, #256]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062d2:	d105      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d4:	4b3b      	ldr	r3, [pc, #236]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4a3a      	ldr	r2, [pc, #232]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d015      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062ec:	4b35      	ldr	r3, [pc, #212]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062fa:	4932      	ldr	r1, [pc, #200]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006306:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800630a:	d105      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800630c:	4b2d      	ldr	r3, [pc, #180]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	4a2c      	ldr	r2, [pc, #176]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006316:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d015      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006324:	4b27      	ldr	r3, [pc, #156]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800632a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	4924      	ldr	r1, [pc, #144]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006334:	4313      	orrs	r3, r2
 8006336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006342:	d105      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006344:	4b1f      	ldr	r3, [pc, #124]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	4a1e      	ldr	r2, [pc, #120]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800634e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d015      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800635c:	4b19      	ldr	r3, [pc, #100]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006362:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636a:	4916      	ldr	r1, [pc, #88]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800637a:	d105      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800637c:	4b11      	ldr	r3, [pc, #68]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	4a10      	ldr	r2, [pc, #64]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006386:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d019      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006394:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	4908      	ldr	r1, [pc, #32]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063b2:	d109      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b4:	4b03      	ldr	r3, [pc, #12]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4a02      	ldr	r2, [pc, #8]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063be:	60d3      	str	r3, [r2, #12]
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d015      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063d4:	4b29      	ldr	r3, [pc, #164]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e2:	4926      	ldr	r1, [pc, #152]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063f2:	d105      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063f4:	4b21      	ldr	r3, [pc, #132]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	4a20      	ldr	r2, [pc, #128]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d015      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800640c:	4b1b      	ldr	r3, [pc, #108]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006412:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641a:	4918      	ldr	r1, [pc, #96]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642a:	d105      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800642c:	4b13      	ldr	r3, [pc, #76]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4a12      	ldr	r2, [pc, #72]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006436:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d015      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006444:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006446:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800644a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006452:	490a      	ldr	r1, [pc, #40]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800645e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006462:	d105      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006464:	4b05      	ldr	r3, [pc, #20]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4a04      	ldr	r2, [pc, #16]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800646a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800646e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006470:	7cbb      	ldrb	r3, [r7, #18]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40021000 	.word	0x40021000

08006480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e049      	b.n	8006526 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fb f9b6 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f000 ff72 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b01      	cmp	r3, #1
 8006542:	d001      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e054      	b.n	80065f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a26      	ldr	r2, [pc, #152]	@ (8006600 <HAL_TIM_Base_Start_IT+0xd0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d022      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x80>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006572:	d01d      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x80>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a22      	ldr	r2, [pc, #136]	@ (8006604 <HAL_TIM_Base_Start_IT+0xd4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d018      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x80>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a21      	ldr	r2, [pc, #132]	@ (8006608 <HAL_TIM_Base_Start_IT+0xd8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d013      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x80>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1f      	ldr	r2, [pc, #124]	@ (800660c <HAL_TIM_Base_Start_IT+0xdc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x80>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1e      	ldr	r2, [pc, #120]	@ (8006610 <HAL_TIM_Base_Start_IT+0xe0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x80>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006614 <HAL_TIM_Base_Start_IT+0xe4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x80>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006618 <HAL_TIM_Base_Start_IT+0xe8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d115      	bne.n	80065dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	4b19      	ldr	r3, [pc, #100]	@ (800661c <HAL_TIM_Base_Start_IT+0xec>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b06      	cmp	r3, #6
 80065c0:	d015      	beq.n	80065ee <HAL_TIM_Base_Start_IT+0xbe>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c8:	d011      	beq.n	80065ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	e008      	b.n	80065ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	e000      	b.n	80065f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40000400 	.word	0x40000400
 8006608:	40000800 	.word	0x40000800
 800660c:	40000c00 	.word	0x40000c00
 8006610:	40013400 	.word	0x40013400
 8006614:	40014000 	.word	0x40014000
 8006618:	40015000 	.word	0x40015000
 800661c:	00010007 	.word	0x00010007

08006620 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e049      	b.n	80066c6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f841 	bl	80066ce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f000 fea2 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d109      	bne.n	800670c <HAL_TIM_OC_Start_IT+0x28>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	bf14      	ite	ne
 8006704:	2301      	movne	r3, #1
 8006706:	2300      	moveq	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	e03c      	b.n	8006786 <HAL_TIM_OC_Start_IT+0xa2>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b04      	cmp	r3, #4
 8006710:	d109      	bne.n	8006726 <HAL_TIM_OC_Start_IT+0x42>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b01      	cmp	r3, #1
 800671c:	bf14      	ite	ne
 800671e:	2301      	movne	r3, #1
 8006720:	2300      	moveq	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	e02f      	b.n	8006786 <HAL_TIM_OC_Start_IT+0xa2>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b08      	cmp	r3, #8
 800672a:	d109      	bne.n	8006740 <HAL_TIM_OC_Start_IT+0x5c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	bf14      	ite	ne
 8006738:	2301      	movne	r3, #1
 800673a:	2300      	moveq	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	e022      	b.n	8006786 <HAL_TIM_OC_Start_IT+0xa2>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b0c      	cmp	r3, #12
 8006744:	d109      	bne.n	800675a <HAL_TIM_OC_Start_IT+0x76>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	bf14      	ite	ne
 8006752:	2301      	movne	r3, #1
 8006754:	2300      	moveq	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	e015      	b.n	8006786 <HAL_TIM_OC_Start_IT+0xa2>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b10      	cmp	r3, #16
 800675e:	d109      	bne.n	8006774 <HAL_TIM_OC_Start_IT+0x90>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	e008      	b.n	8006786 <HAL_TIM_OC_Start_IT+0xa2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b01      	cmp	r3, #1
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e0f1      	b.n	8006972 <HAL_TIM_OC_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <HAL_TIM_OC_Start_IT+0xba>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800679c:	e023      	b.n	80067e6 <HAL_TIM_OC_Start_IT+0x102>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_OC_Start_IT+0xca>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067ac:	e01b      	b.n	80067e6 <HAL_TIM_OC_Start_IT+0x102>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d104      	bne.n	80067be <HAL_TIM_OC_Start_IT+0xda>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067bc:	e013      	b.n	80067e6 <HAL_TIM_OC_Start_IT+0x102>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_OC_Start_IT+0xea>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067cc:	e00b      	b.n	80067e6 <HAL_TIM_OC_Start_IT+0x102>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d104      	bne.n	80067de <HAL_TIM_OC_Start_IT+0xfa>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067dc:	e003      	b.n	80067e6 <HAL_TIM_OC_Start_IT+0x102>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b0c      	cmp	r3, #12
 80067ea:	d841      	bhi.n	8006870 <HAL_TIM_OC_Start_IT+0x18c>
 80067ec:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <HAL_TIM_OC_Start_IT+0x110>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006829 	.word	0x08006829
 80067f8:	08006871 	.word	0x08006871
 80067fc:	08006871 	.word	0x08006871
 8006800:	08006871 	.word	0x08006871
 8006804:	0800683b 	.word	0x0800683b
 8006808:	08006871 	.word	0x08006871
 800680c:	08006871 	.word	0x08006871
 8006810:	08006871 	.word	0x08006871
 8006814:	0800684d 	.word	0x0800684d
 8006818:	08006871 	.word	0x08006871
 800681c:	08006871 	.word	0x08006871
 8006820:	08006871 	.word	0x08006871
 8006824:	0800685f 	.word	0x0800685f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0202 	orr.w	r2, r2, #2
 8006836:	60da      	str	r2, [r3, #12]
      break;
 8006838:	e01d      	b.n	8006876 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0204 	orr.w	r2, r2, #4
 8006848:	60da      	str	r2, [r3, #12]
      break;
 800684a:	e014      	b.n	8006876 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0208 	orr.w	r2, r2, #8
 800685a:	60da      	str	r2, [r3, #12]
      break;
 800685c:	e00b      	b.n	8006876 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0210 	orr.w	r2, r2, #16
 800686c:	60da      	str	r2, [r3, #12]
      break;
 800686e:	e002      	b.n	8006876 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
      break;
 8006874:	bf00      	nop
  }

  if (status == HAL_OK)
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d179      	bne.n	8006970 <HAL_TIM_OC_Start_IT+0x28c>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2201      	movs	r2, #1
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f001 f96d 	bl	8007b64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a3b      	ldr	r2, [pc, #236]	@ (800697c <HAL_TIM_OC_Start_IT+0x298>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d018      	beq.n	80068c6 <HAL_TIM_OC_Start_IT+0x1e2>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a39      	ldr	r2, [pc, #228]	@ (8006980 <HAL_TIM_OC_Start_IT+0x29c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <HAL_TIM_OC_Start_IT+0x1e2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a38      	ldr	r2, [pc, #224]	@ (8006984 <HAL_TIM_OC_Start_IT+0x2a0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00e      	beq.n	80068c6 <HAL_TIM_OC_Start_IT+0x1e2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a36      	ldr	r2, [pc, #216]	@ (8006988 <HAL_TIM_OC_Start_IT+0x2a4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d009      	beq.n	80068c6 <HAL_TIM_OC_Start_IT+0x1e2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a35      	ldr	r2, [pc, #212]	@ (800698c <HAL_TIM_OC_Start_IT+0x2a8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d004      	beq.n	80068c6 <HAL_TIM_OC_Start_IT+0x1e2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a33      	ldr	r2, [pc, #204]	@ (8006990 <HAL_TIM_OC_Start_IT+0x2ac>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d101      	bne.n	80068ca <HAL_TIM_OC_Start_IT+0x1e6>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <HAL_TIM_OC_Start_IT+0x1e8>
 80068ca:	2300      	movs	r3, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a25      	ldr	r2, [pc, #148]	@ (800697c <HAL_TIM_OC_Start_IT+0x298>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d022      	beq.n	8006930 <HAL_TIM_OC_Start_IT+0x24c>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f2:	d01d      	beq.n	8006930 <HAL_TIM_OC_Start_IT+0x24c>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a26      	ldr	r2, [pc, #152]	@ (8006994 <HAL_TIM_OC_Start_IT+0x2b0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d018      	beq.n	8006930 <HAL_TIM_OC_Start_IT+0x24c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a25      	ldr	r2, [pc, #148]	@ (8006998 <HAL_TIM_OC_Start_IT+0x2b4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d013      	beq.n	8006930 <HAL_TIM_OC_Start_IT+0x24c>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a23      	ldr	r2, [pc, #140]	@ (800699c <HAL_TIM_OC_Start_IT+0x2b8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00e      	beq.n	8006930 <HAL_TIM_OC_Start_IT+0x24c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1a      	ldr	r2, [pc, #104]	@ (8006980 <HAL_TIM_OC_Start_IT+0x29c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d009      	beq.n	8006930 <HAL_TIM_OC_Start_IT+0x24c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <HAL_TIM_OC_Start_IT+0x2a0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d004      	beq.n	8006930 <HAL_TIM_OC_Start_IT+0x24c>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a19      	ldr	r2, [pc, #100]	@ (8006990 <HAL_TIM_OC_Start_IT+0x2ac>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d115      	bne.n	800695c <HAL_TIM_OC_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	4b1a      	ldr	r3, [pc, #104]	@ (80069a0 <HAL_TIM_OC_Start_IT+0x2bc>)
 8006938:	4013      	ands	r3, r2
 800693a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b06      	cmp	r3, #6
 8006940:	d015      	beq.n	800696e <HAL_TIM_OC_Start_IT+0x28a>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006948:	d011      	beq.n	800696e <HAL_TIM_OC_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 0201 	orr.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695a:	e008      	b.n	800696e <HAL_TIM_OC_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	e000      	b.n	8006970 <HAL_TIM_OC_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40013400 	.word	0x40013400
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800
 8006990:	40015000 	.word	0x40015000
 8006994:	40000400 	.word	0x40000400
 8006998:	40000800 	.word	0x40000800
 800699c:	40000c00 	.word	0x40000c00
 80069a0:	00010007 	.word	0x00010007

080069a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e049      	b.n	8006a4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fa fefe 	bl	80017cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4610      	mov	r0, r2
 80069e4:	f000 fce0 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d109      	bne.n	8006a78 <HAL_TIM_PWM_Start+0x24>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	bf14      	ite	ne
 8006a70:	2301      	movne	r3, #1
 8006a72:	2300      	moveq	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	e03c      	b.n	8006af2 <HAL_TIM_PWM_Start+0x9e>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d109      	bne.n	8006a92 <HAL_TIM_PWM_Start+0x3e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	bf14      	ite	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	2300      	moveq	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	e02f      	b.n	8006af2 <HAL_TIM_PWM_Start+0x9e>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d109      	bne.n	8006aac <HAL_TIM_PWM_Start+0x58>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	bf14      	ite	ne
 8006aa4:	2301      	movne	r3, #1
 8006aa6:	2300      	moveq	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	e022      	b.n	8006af2 <HAL_TIM_PWM_Start+0x9e>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b0c      	cmp	r3, #12
 8006ab0:	d109      	bne.n	8006ac6 <HAL_TIM_PWM_Start+0x72>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	bf14      	ite	ne
 8006abe:	2301      	movne	r3, #1
 8006ac0:	2300      	moveq	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	e015      	b.n	8006af2 <HAL_TIM_PWM_Start+0x9e>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d109      	bne.n	8006ae0 <HAL_TIM_PWM_Start+0x8c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	bf14      	ite	ne
 8006ad8:	2301      	movne	r3, #1
 8006ada:	2300      	moveq	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	e008      	b.n	8006af2 <HAL_TIM_PWM_Start+0x9e>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e0a6      	b.n	8006c48 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_PWM_Start+0xb6>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b08:	e023      	b.n	8006b52 <HAL_TIM_PWM_Start+0xfe>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_PWM_Start+0xc6>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b18:	e01b      	b.n	8006b52 <HAL_TIM_PWM_Start+0xfe>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Start+0xd6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b28:	e013      	b.n	8006b52 <HAL_TIM_PWM_Start+0xfe>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b0c      	cmp	r3, #12
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_PWM_Start+0xe6>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b38:	e00b      	b.n	8006b52 <HAL_TIM_PWM_Start+0xfe>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_PWM_Start+0xf6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b48:	e003      	b.n	8006b52 <HAL_TIM_PWM_Start+0xfe>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2201      	movs	r2, #1
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f001 f802 	bl	8007b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a3a      	ldr	r2, [pc, #232]	@ (8006c50 <HAL_TIM_PWM_Start+0x1fc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d018      	beq.n	8006b9c <HAL_TIM_PWM_Start+0x148>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a39      	ldr	r2, [pc, #228]	@ (8006c54 <HAL_TIM_PWM_Start+0x200>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <HAL_TIM_PWM_Start+0x148>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a37      	ldr	r2, [pc, #220]	@ (8006c58 <HAL_TIM_PWM_Start+0x204>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <HAL_TIM_PWM_Start+0x148>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a36      	ldr	r2, [pc, #216]	@ (8006c5c <HAL_TIM_PWM_Start+0x208>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_TIM_PWM_Start+0x148>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a34      	ldr	r2, [pc, #208]	@ (8006c60 <HAL_TIM_PWM_Start+0x20c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_TIM_PWM_Start+0x148>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a33      	ldr	r2, [pc, #204]	@ (8006c64 <HAL_TIM_PWM_Start+0x210>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_TIM_PWM_Start+0x14c>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_TIM_PWM_Start+0x14e>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a25      	ldr	r2, [pc, #148]	@ (8006c50 <HAL_TIM_PWM_Start+0x1fc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d022      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x1b2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc8:	d01d      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x1b2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a26      	ldr	r2, [pc, #152]	@ (8006c68 <HAL_TIM_PWM_Start+0x214>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d018      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x1b2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a24      	ldr	r2, [pc, #144]	@ (8006c6c <HAL_TIM_PWM_Start+0x218>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x1b2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a23      	ldr	r2, [pc, #140]	@ (8006c70 <HAL_TIM_PWM_Start+0x21c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x1b2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a19      	ldr	r2, [pc, #100]	@ (8006c54 <HAL_TIM_PWM_Start+0x200>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x1b2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	@ (8006c58 <HAL_TIM_PWM_Start+0x204>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x1b2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a18      	ldr	r2, [pc, #96]	@ (8006c64 <HAL_TIM_PWM_Start+0x210>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d115      	bne.n	8006c32 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	4b19      	ldr	r3, [pc, #100]	@ (8006c74 <HAL_TIM_PWM_Start+0x220>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b06      	cmp	r3, #6
 8006c16:	d015      	beq.n	8006c44 <HAL_TIM_PWM_Start+0x1f0>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c1e:	d011      	beq.n	8006c44 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c30:	e008      	b.n	8006c44 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f042 0201 	orr.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	e000      	b.n	8006c46 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40013400 	.word	0x40013400
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40014400 	.word	0x40014400
 8006c60:	40014800 	.word	0x40014800
 8006c64:	40015000 	.word	0x40015000
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	00010007 	.word	0x00010007

08006c78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2200      	movs	r2, #0
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 ff6a 	bl	8007b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a40      	ldr	r2, [pc, #256]	@ (8006d98 <HAL_TIM_PWM_Stop+0x120>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d018      	beq.n	8006ccc <HAL_TIM_PWM_Stop+0x54>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8006d9c <HAL_TIM_PWM_Stop+0x124>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d013      	beq.n	8006ccc <HAL_TIM_PWM_Stop+0x54>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8006da0 <HAL_TIM_PWM_Stop+0x128>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00e      	beq.n	8006ccc <HAL_TIM_PWM_Stop+0x54>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a3c      	ldr	r2, [pc, #240]	@ (8006da4 <HAL_TIM_PWM_Stop+0x12c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d009      	beq.n	8006ccc <HAL_TIM_PWM_Stop+0x54>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a3a      	ldr	r2, [pc, #232]	@ (8006da8 <HAL_TIM_PWM_Stop+0x130>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d004      	beq.n	8006ccc <HAL_TIM_PWM_Stop+0x54>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a39      	ldr	r2, [pc, #228]	@ (8006dac <HAL_TIM_PWM_Stop+0x134>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIM_PWM_Stop+0x58>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <HAL_TIM_PWM_Stop+0x5a>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d017      	beq.n	8006d06 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6a1a      	ldr	r2, [r3, #32]
 8006cdc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10f      	bne.n	8006d06 <HAL_TIM_PWM_Stop+0x8e>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6a1a      	ldr	r2, [r3, #32]
 8006cec:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d107      	bne.n	8006d06 <HAL_TIM_PWM_Stop+0x8e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10f      	bne.n	8006d36 <HAL_TIM_PWM_Stop+0xbe>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6a1a      	ldr	r2, [r3, #32]
 8006d1c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d107      	bne.n	8006d36 <HAL_TIM_PWM_Stop+0xbe>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0201 	bic.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <HAL_TIM_PWM_Stop+0xce>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d44:	e023      	b.n	8006d8e <HAL_TIM_PWM_Stop+0x116>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d104      	bne.n	8006d56 <HAL_TIM_PWM_Stop+0xde>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d54:	e01b      	b.n	8006d8e <HAL_TIM_PWM_Stop+0x116>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d104      	bne.n	8006d66 <HAL_TIM_PWM_Stop+0xee>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d64:	e013      	b.n	8006d8e <HAL_TIM_PWM_Stop+0x116>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b0c      	cmp	r3, #12
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_PWM_Stop+0xfe>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d74:	e00b      	b.n	8006d8e <HAL_TIM_PWM_Stop+0x116>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d104      	bne.n	8006d86 <HAL_TIM_PWM_Stop+0x10e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d84:	e003      	b.n	8006d8e <HAL_TIM_PWM_Stop+0x116>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40012c00 	.word	0x40012c00
 8006d9c:	40013400 	.word	0x40013400
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800
 8006dac:	40015000 	.word	0x40015000

08006db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d020      	beq.n	8006e14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01b      	beq.n	8006e14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0202 	mvn.w	r2, #2
 8006de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fab6 	bl	800736c <HAL_TIM_IC_CaptureCallback>
 8006e00:	e005      	b.n	8006e0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7f9 fdd6 	bl	80009b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fab9 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d020      	beq.n	8006e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01b      	beq.n	8006e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0204 	mvn.w	r2, #4
 8006e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2202      	movs	r2, #2
 8006e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa90 	bl	800736c <HAL_TIM_IC_CaptureCallback>
 8006e4c:	e005      	b.n	8006e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7f9 fdb0 	bl	80009b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa93 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d020      	beq.n	8006eac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01b      	beq.n	8006eac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0208 	mvn.w	r2, #8
 8006e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2204      	movs	r2, #4
 8006e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fa6a 	bl	800736c <HAL_TIM_IC_CaptureCallback>
 8006e98:	e005      	b.n	8006ea6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7f9 fd8a 	bl	80009b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fa6d 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 0310 	and.w	r3, r3, #16
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d020      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01b      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0210 	mvn.w	r2, #16
 8006ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa44 	bl	800736c <HAL_TIM_IC_CaptureCallback>
 8006ee4:	e005      	b.n	8006ef2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7f9 fd64 	bl	80009b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fa47 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00c      	beq.n	8006f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f06f 0201 	mvn.w	r2, #1
 8006f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7f9 fd78 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d104      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00c      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d007      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 f887 	bl	8008058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00c      	beq.n	8006f6e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d007      	beq.n	8006f6e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f87f 	bl	800806c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00c      	beq.n	8006f92 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fa01 	bl	8007394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00c      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f06f 0220 	mvn.w	r2, #32
 8006fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 f847 	bl	8008044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00c      	beq.n	8006fda <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 f853 	bl	8008080 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f84b 	bl	8008094 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800701a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f843 	bl	80080a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00c      	beq.n	8007046 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800703e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f83b 	bl	80080bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_TIM_OC_ConfigChannel+0x1e>
 800706a:	2302      	movs	r3, #2
 800706c:	e066      	b.n	800713c <HAL_TIM_OC_ConfigChannel+0xec>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b14      	cmp	r3, #20
 800707a:	d857      	bhi.n	800712c <HAL_TIM_OC_ConfigChannel+0xdc>
 800707c:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <HAL_TIM_OC_ConfigChannel+0x34>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080070d9 	.word	0x080070d9
 8007088:	0800712d 	.word	0x0800712d
 800708c:	0800712d 	.word	0x0800712d
 8007090:	0800712d 	.word	0x0800712d
 8007094:	080070e7 	.word	0x080070e7
 8007098:	0800712d 	.word	0x0800712d
 800709c:	0800712d 	.word	0x0800712d
 80070a0:	0800712d 	.word	0x0800712d
 80070a4:	080070f5 	.word	0x080070f5
 80070a8:	0800712d 	.word	0x0800712d
 80070ac:	0800712d 	.word	0x0800712d
 80070b0:	0800712d 	.word	0x0800712d
 80070b4:	08007103 	.word	0x08007103
 80070b8:	0800712d 	.word	0x0800712d
 80070bc:	0800712d 	.word	0x0800712d
 80070c0:	0800712d 	.word	0x0800712d
 80070c4:	08007111 	.word	0x08007111
 80070c8:	0800712d 	.word	0x0800712d
 80070cc:	0800712d 	.word	0x0800712d
 80070d0:	0800712d 	.word	0x0800712d
 80070d4:	0800711f 	.word	0x0800711f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fa16 	bl	8007510 <TIM_OC1_SetConfig>
      break;
 80070e4:	e025      	b.n	8007132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 faa9 	bl	8007644 <TIM_OC2_SetConfig>
      break;
 80070f2:	e01e      	b.n	8007132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fb36 	bl	800776c <TIM_OC3_SetConfig>
      break;
 8007100:	e017      	b.n	8007132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fbc1 	bl	8007890 <TIM_OC4_SetConfig>
      break;
 800710e:	e010      	b.n	8007132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fc4e 	bl	80079b8 <TIM_OC5_SetConfig>
      break;
 800711c:	e009      	b.n	8007132 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fcb1 	bl	8007a8c <TIM_OC6_SetConfig>
      break;
 800712a:	e002      	b.n	8007132 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
      break;
 8007130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800713a:	7dfb      	ldrb	r3, [r7, #23]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800715e:	2302      	movs	r3, #2
 8007160:	e0ff      	b.n	8007362 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b14      	cmp	r3, #20
 800716e:	f200 80f0 	bhi.w	8007352 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007172:	a201      	add	r2, pc, #4	@ (adr r2, 8007178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	080071cd 	.word	0x080071cd
 800717c:	08007353 	.word	0x08007353
 8007180:	08007353 	.word	0x08007353
 8007184:	08007353 	.word	0x08007353
 8007188:	0800720d 	.word	0x0800720d
 800718c:	08007353 	.word	0x08007353
 8007190:	08007353 	.word	0x08007353
 8007194:	08007353 	.word	0x08007353
 8007198:	0800724f 	.word	0x0800724f
 800719c:	08007353 	.word	0x08007353
 80071a0:	08007353 	.word	0x08007353
 80071a4:	08007353 	.word	0x08007353
 80071a8:	0800728f 	.word	0x0800728f
 80071ac:	08007353 	.word	0x08007353
 80071b0:	08007353 	.word	0x08007353
 80071b4:	08007353 	.word	0x08007353
 80071b8:	080072d1 	.word	0x080072d1
 80071bc:	08007353 	.word	0x08007353
 80071c0:	08007353 	.word	0x08007353
 80071c4:	08007353 	.word	0x08007353
 80071c8:	08007311 	.word	0x08007311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68b9      	ldr	r1, [r7, #8]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f99c 	bl	8007510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0208 	orr.w	r2, r2, #8
 80071e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699a      	ldr	r2, [r3, #24]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0204 	bic.w	r2, r2, #4
 80071f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6999      	ldr	r1, [r3, #24]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	691a      	ldr	r2, [r3, #16]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	619a      	str	r2, [r3, #24]
      break;
 800720a:	e0a5      	b.n	8007358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fa16 	bl	8007644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6999      	ldr	r1, [r3, #24]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	021a      	lsls	r2, r3, #8
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	619a      	str	r2, [r3, #24]
      break;
 800724c:	e084      	b.n	8007358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fa89 	bl	800776c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0208 	orr.w	r2, r2, #8
 8007268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69da      	ldr	r2, [r3, #28]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0204 	bic.w	r2, r2, #4
 8007278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69d9      	ldr	r1, [r3, #28]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	61da      	str	r2, [r3, #28]
      break;
 800728c:	e064      	b.n	8007358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fafb 	bl	8007890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69da      	ldr	r2, [r3, #28]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69d9      	ldr	r1, [r3, #28]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	021a      	lsls	r2, r3, #8
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	61da      	str	r2, [r3, #28]
      break;
 80072ce:	e043      	b.n	8007358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fb6e 	bl	80079b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0208 	orr.w	r2, r2, #8
 80072ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0204 	bic.w	r2, r2, #4
 80072fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800730e:	e023      	b.n	8007358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fbb8 	bl	8007a8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800732a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800733a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	021a      	lsls	r2, r3, #8
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007350:	e002      	b.n	8007358 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	75fb      	strb	r3, [r7, #23]
      break;
 8007356:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop

0800736c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a4c      	ldr	r2, [pc, #304]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d017      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c6:	d013      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a49      	ldr	r2, [pc, #292]	@ (80074f0 <TIM_Base_SetConfig+0x148>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00f      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a48      	ldr	r2, [pc, #288]	@ (80074f4 <TIM_Base_SetConfig+0x14c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00b      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a47      	ldr	r2, [pc, #284]	@ (80074f8 <TIM_Base_SetConfig+0x150>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a46      	ldr	r2, [pc, #280]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a45      	ldr	r2, [pc, #276]	@ (8007500 <TIM_Base_SetConfig+0x158>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d108      	bne.n	8007402 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a39      	ldr	r2, [pc, #228]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d023      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007410:	d01f      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a36      	ldr	r2, [pc, #216]	@ (80074f0 <TIM_Base_SetConfig+0x148>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d01b      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a35      	ldr	r2, [pc, #212]	@ (80074f4 <TIM_Base_SetConfig+0x14c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d017      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a34      	ldr	r2, [pc, #208]	@ (80074f8 <TIM_Base_SetConfig+0x150>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a33      	ldr	r2, [pc, #204]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00f      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a33      	ldr	r2, [pc, #204]	@ (8007504 <TIM_Base_SetConfig+0x15c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00b      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a32      	ldr	r2, [pc, #200]	@ (8007508 <TIM_Base_SetConfig+0x160>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d007      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a31      	ldr	r2, [pc, #196]	@ (800750c <TIM_Base_SetConfig+0x164>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a2c      	ldr	r2, [pc, #176]	@ (8007500 <TIM_Base_SetConfig+0x158>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d108      	bne.n	8007464 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00f      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a1a      	ldr	r2, [pc, #104]	@ (8007504 <TIM_Base_SetConfig+0x15c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00b      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a19      	ldr	r2, [pc, #100]	@ (8007508 <TIM_Base_SetConfig+0x160>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d007      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a18      	ldr	r2, [pc, #96]	@ (800750c <TIM_Base_SetConfig+0x164>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d003      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a13      	ldr	r2, [pc, #76]	@ (8007500 <TIM_Base_SetConfig+0x158>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d103      	bne.n	80074c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d105      	bne.n	80074de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f023 0201 	bic.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	611a      	str	r2, [r3, #16]
  }
}
 80074de:	bf00      	nop
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800
 80074f8:	40000c00 	.word	0x40000c00
 80074fc:	40013400 	.word	0x40013400
 8007500:	40015000 	.word	0x40015000
 8007504:	40014000 	.word	0x40014000
 8007508:	40014400 	.word	0x40014400
 800750c:	40014800 	.word	0x40014800

08007510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f023 0201 	bic.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800753e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 0302 	bic.w	r3, r3, #2
 800755c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a30      	ldr	r2, [pc, #192]	@ (800762c <TIM_OC1_SetConfig+0x11c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a2f      	ldr	r2, [pc, #188]	@ (8007630 <TIM_OC1_SetConfig+0x120>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00f      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2e      	ldr	r2, [pc, #184]	@ (8007634 <TIM_OC1_SetConfig+0x124>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a2d      	ldr	r2, [pc, #180]	@ (8007638 <TIM_OC1_SetConfig+0x128>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a2c      	ldr	r2, [pc, #176]	@ (800763c <TIM_OC1_SetConfig+0x12c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a2b      	ldr	r2, [pc, #172]	@ (8007640 <TIM_OC1_SetConfig+0x130>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d10c      	bne.n	80075b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0308 	bic.w	r3, r3, #8
 800759e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1d      	ldr	r2, [pc, #116]	@ (800762c <TIM_OC1_SetConfig+0x11c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d013      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007630 <TIM_OC1_SetConfig+0x120>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00f      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007634 <TIM_OC1_SetConfig+0x124>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00b      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007638 <TIM_OC1_SetConfig+0x128>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a19      	ldr	r2, [pc, #100]	@ (800763c <TIM_OC1_SetConfig+0x12c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a18      	ldr	r2, [pc, #96]	@ (8007640 <TIM_OC1_SetConfig+0x130>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d111      	bne.n	8007606 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40013400 	.word	0x40013400
 8007634:	40014000 	.word	0x40014000
 8007638:	40014400 	.word	0x40014400
 800763c:	40014800 	.word	0x40014800
 8007640:	40015000 	.word	0x40015000

08007644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f023 0210 	bic.w	r2, r3, #16
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800767e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0320 	bic.w	r3, r3, #32
 8007692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a2c      	ldr	r2, [pc, #176]	@ (8007754 <TIM_OC2_SetConfig+0x110>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d007      	beq.n	80076b8 <TIM_OC2_SetConfig+0x74>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a2b      	ldr	r2, [pc, #172]	@ (8007758 <TIM_OC2_SetConfig+0x114>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_OC2_SetConfig+0x74>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a2a      	ldr	r2, [pc, #168]	@ (800775c <TIM_OC2_SetConfig+0x118>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d10d      	bne.n	80076d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007754 <TIM_OC2_SetConfig+0x110>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d013      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1e      	ldr	r2, [pc, #120]	@ (8007758 <TIM_OC2_SetConfig+0x114>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00f      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007760 <TIM_OC2_SetConfig+0x11c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00b      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007764 <TIM_OC2_SetConfig+0x120>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d007      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007768 <TIM_OC2_SetConfig+0x124>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d003      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a17      	ldr	r2, [pc, #92]	@ (800775c <TIM_OC2_SetConfig+0x118>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d113      	bne.n	800772c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800770a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	40012c00 	.word	0x40012c00
 8007758:	40013400 	.word	0x40013400
 800775c:	40015000 	.word	0x40015000
 8007760:	40014000 	.word	0x40014000
 8007764:	40014400 	.word	0x40014400
 8007768:	40014800 	.word	0x40014800

0800776c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800779a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0303 	bic.w	r3, r3, #3
 80077a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a2b      	ldr	r2, [pc, #172]	@ (8007878 <TIM_OC3_SetConfig+0x10c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d007      	beq.n	80077de <TIM_OC3_SetConfig+0x72>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a2a      	ldr	r2, [pc, #168]	@ (800787c <TIM_OC3_SetConfig+0x110>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d003      	beq.n	80077de <TIM_OC3_SetConfig+0x72>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a29      	ldr	r2, [pc, #164]	@ (8007880 <TIM_OC3_SetConfig+0x114>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d10d      	bne.n	80077fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007878 <TIM_OC3_SetConfig+0x10c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a1d      	ldr	r2, [pc, #116]	@ (800787c <TIM_OC3_SetConfig+0x110>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a1d      	ldr	r2, [pc, #116]	@ (8007884 <TIM_OC3_SetConfig+0x118>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00b      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1c      	ldr	r2, [pc, #112]	@ (8007888 <TIM_OC3_SetConfig+0x11c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1b      	ldr	r2, [pc, #108]	@ (800788c <TIM_OC3_SetConfig+0x120>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a16      	ldr	r2, [pc, #88]	@ (8007880 <TIM_OC3_SetConfig+0x114>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d113      	bne.n	8007852 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40013400 	.word	0x40013400
 8007880:	40015000 	.word	0x40015000
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800

08007890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	031b      	lsls	r3, r3, #12
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a2c      	ldr	r2, [pc, #176]	@ (80079a0 <TIM_OC4_SetConfig+0x110>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d007      	beq.n	8007904 <TIM_OC4_SetConfig+0x74>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a2b      	ldr	r2, [pc, #172]	@ (80079a4 <TIM_OC4_SetConfig+0x114>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_OC4_SetConfig+0x74>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a2a      	ldr	r2, [pc, #168]	@ (80079a8 <TIM_OC4_SetConfig+0x118>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d10d      	bne.n	8007920 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800790a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	031b      	lsls	r3, r3, #12
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800791e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a1f      	ldr	r2, [pc, #124]	@ (80079a0 <TIM_OC4_SetConfig+0x110>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d013      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a1e      	ldr	r2, [pc, #120]	@ (80079a4 <TIM_OC4_SetConfig+0x114>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00f      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a1e      	ldr	r2, [pc, #120]	@ (80079ac <TIM_OC4_SetConfig+0x11c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00b      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a1d      	ldr	r2, [pc, #116]	@ (80079b0 <TIM_OC4_SetConfig+0x120>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d007      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a1c      	ldr	r2, [pc, #112]	@ (80079b4 <TIM_OC4_SetConfig+0x124>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a17      	ldr	r2, [pc, #92]	@ (80079a8 <TIM_OC4_SetConfig+0x118>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d113      	bne.n	8007978 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007956:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800795e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	019b      	lsls	r3, r3, #6
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	019b      	lsls	r3, r3, #6
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	621a      	str	r2, [r3, #32]
}
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40012c00 	.word	0x40012c00
 80079a4:	40013400 	.word	0x40013400
 80079a8:	40015000 	.word	0x40015000
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800

080079b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80079fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a19      	ldr	r2, [pc, #100]	@ (8007a74 <TIM_OC5_SetConfig+0xbc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d013      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a18      	ldr	r2, [pc, #96]	@ (8007a78 <TIM_OC5_SetConfig+0xc0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00f      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a17      	ldr	r2, [pc, #92]	@ (8007a7c <TIM_OC5_SetConfig+0xc4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00b      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a16      	ldr	r2, [pc, #88]	@ (8007a80 <TIM_OC5_SetConfig+0xc8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d007      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a15      	ldr	r2, [pc, #84]	@ (8007a84 <TIM_OC5_SetConfig+0xcc>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d003      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a14      	ldr	r2, [pc, #80]	@ (8007a88 <TIM_OC5_SetConfig+0xd0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d109      	bne.n	8007a4e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	621a      	str	r2, [r3, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	40012c00 	.word	0x40012c00
 8007a78:	40013400 	.word	0x40013400
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	40014400 	.word	0x40014400
 8007a84:	40014800 	.word	0x40014800
 8007a88:	40015000 	.word	0x40015000

08007a8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	051b      	lsls	r3, r3, #20
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b4c <TIM_OC6_SetConfig+0xc0>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d013      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a19      	ldr	r2, [pc, #100]	@ (8007b50 <TIM_OC6_SetConfig+0xc4>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00f      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a18      	ldr	r2, [pc, #96]	@ (8007b54 <TIM_OC6_SetConfig+0xc8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a17      	ldr	r2, [pc, #92]	@ (8007b58 <TIM_OC6_SetConfig+0xcc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a16      	ldr	r2, [pc, #88]	@ (8007b5c <TIM_OC6_SetConfig+0xd0>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a15      	ldr	r2, [pc, #84]	@ (8007b60 <TIM_OC6_SetConfig+0xd4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d109      	bne.n	8007b24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	029b      	lsls	r3, r3, #10
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	621a      	str	r2, [r3, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800
 8007b60:	40015000 	.word	0x40015000

08007b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2201      	movs	r2, #1
 8007b78:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6a1a      	ldr	r2, [r3, #32]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	43db      	mvns	r3, r3
 8007b86:	401a      	ands	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a1a      	ldr	r2, [r3, #32]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f003 031f 	and.w	r3, r3, #31
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	621a      	str	r2, [r3, #32]
}
 8007ba2:	bf00      	nop
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
	...

08007bb0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d109      	bne.n	8007bd4 <HAL_TIMEx_PWMN_Start+0x24>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	bf14      	ite	ne
 8007bcc:	2301      	movne	r3, #1
 8007bce:	2300      	moveq	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	e022      	b.n	8007c1a <HAL_TIMEx_PWMN_Start+0x6a>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d109      	bne.n	8007bee <HAL_TIMEx_PWMN_Start+0x3e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	bf14      	ite	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	2300      	moveq	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	e015      	b.n	8007c1a <HAL_TIMEx_PWMN_Start+0x6a>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d109      	bne.n	8007c08 <HAL_TIMEx_PWMN_Start+0x58>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	bf14      	ite	ne
 8007c00:	2301      	movne	r3, #1
 8007c02:	2300      	moveq	r3, #0
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	e008      	b.n	8007c1a <HAL_TIMEx_PWMN_Start+0x6a>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	bf14      	ite	ne
 8007c14:	2301      	movne	r3, #1
 8007c16:	2300      	moveq	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e073      	b.n	8007d0a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d104      	bne.n	8007c32 <HAL_TIMEx_PWMN_Start+0x82>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c30:	e013      	b.n	8007c5a <HAL_TIMEx_PWMN_Start+0xaa>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d104      	bne.n	8007c42 <HAL_TIMEx_PWMN_Start+0x92>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c40:	e00b      	b.n	8007c5a <HAL_TIMEx_PWMN_Start+0xaa>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d104      	bne.n	8007c52 <HAL_TIMEx_PWMN_Start+0xa2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c50:	e003      	b.n	8007c5a <HAL_TIMEx_PWMN_Start+0xaa>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2202      	movs	r2, #2
 8007c56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2204      	movs	r2, #4
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fa34 	bl	80080d0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a25      	ldr	r2, [pc, #148]	@ (8007d14 <HAL_TIMEx_PWMN_Start+0x164>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d022      	beq.n	8007cc8 <HAL_TIMEx_PWMN_Start+0x118>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c8a:	d01d      	beq.n	8007cc8 <HAL_TIMEx_PWMN_Start+0x118>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a21      	ldr	r2, [pc, #132]	@ (8007d18 <HAL_TIMEx_PWMN_Start+0x168>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d018      	beq.n	8007cc8 <HAL_TIMEx_PWMN_Start+0x118>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a20      	ldr	r2, [pc, #128]	@ (8007d1c <HAL_TIMEx_PWMN_Start+0x16c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d013      	beq.n	8007cc8 <HAL_TIMEx_PWMN_Start+0x118>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8007d20 <HAL_TIMEx_PWMN_Start+0x170>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00e      	beq.n	8007cc8 <HAL_TIMEx_PWMN_Start+0x118>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a1d      	ldr	r2, [pc, #116]	@ (8007d24 <HAL_TIMEx_PWMN_Start+0x174>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d009      	beq.n	8007cc8 <HAL_TIMEx_PWMN_Start+0x118>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d28 <HAL_TIMEx_PWMN_Start+0x178>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d004      	beq.n	8007cc8 <HAL_TIMEx_PWMN_Start+0x118>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d2c <HAL_TIMEx_PWMN_Start+0x17c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d115      	bne.n	8007cf4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	4b18      	ldr	r3, [pc, #96]	@ (8007d30 <HAL_TIMEx_PWMN_Start+0x180>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b06      	cmp	r3, #6
 8007cd8:	d015      	beq.n	8007d06 <HAL_TIMEx_PWMN_Start+0x156>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce0:	d011      	beq.n	8007d06 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0201 	orr.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf2:	e008      	b.n	8007d06 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	e000      	b.n	8007d08 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	40012c00 	.word	0x40012c00
 8007d18:	40000400 	.word	0x40000400
 8007d1c:	40000800 	.word	0x40000800
 8007d20:	40000c00 	.word	0x40000c00
 8007d24:	40013400 	.word	0x40013400
 8007d28:	40014000 	.word	0x40014000
 8007d2c:	40015000 	.word	0x40015000
 8007d30:	00010007 	.word	0x00010007

08007d34 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 f9c2 	bl	80080d0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6a1a      	ldr	r2, [r3, #32]
 8007d52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d56:	4013      	ands	r3, r2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10f      	bne.n	8007d7c <HAL_TIMEx_PWMN_Stop+0x48>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6a1a      	ldr	r2, [r3, #32]
 8007d62:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d107      	bne.n	8007d7c <HAL_TIMEx_PWMN_Stop+0x48>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6a1a      	ldr	r2, [r3, #32]
 8007d82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10f      	bne.n	8007dac <HAL_TIMEx_PWMN_Stop+0x78>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007d96:	4013      	ands	r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d107      	bne.n	8007dac <HAL_TIMEx_PWMN_Stop+0x78>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d104      	bne.n	8007dbc <HAL_TIMEx_PWMN_Stop+0x88>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dba:	e013      	b.n	8007de4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d104      	bne.n	8007dcc <HAL_TIMEx_PWMN_Stop+0x98>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dca:	e00b      	b.n	8007de4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b08      	cmp	r3, #8
 8007dd0:	d104      	bne.n	8007ddc <HAL_TIMEx_PWMN_Stop+0xa8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dda:	e003      	b.n	8007de4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e074      	b.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a34      	ldr	r2, [pc, #208]	@ (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d009      	beq.n	8007e46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a33      	ldr	r2, [pc, #204]	@ (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a31      	ldr	r2, [pc, #196]	@ (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d108      	bne.n	8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	@ (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d022      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e88:	d01d      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d018      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1d      	ldr	r2, [pc, #116]	@ (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d013      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d00e      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a15      	ldr	r2, [pc, #84]	@ (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d009      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a18      	ldr	r2, [pc, #96]	@ (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a11      	ldr	r2, [pc, #68]	@ (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40013400 	.word	0x40013400
 8007f08:	40015000 	.word	0x40015000
 8007f0c:	40000400 	.word	0x40000400
 8007f10:	40000800 	.word	0x40000800
 8007f14:	40000c00 	.word	0x40000c00
 8007f18:	40014000 	.word	0x40014000

08007f1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e078      	b.n	800802a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	041b      	lsls	r3, r3, #16
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8008038 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d009      	beq.n	8007fde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1b      	ldr	r2, [pc, #108]	@ (800803c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a19      	ldr	r2, [pc, #100]	@ (8008040 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d11c      	bne.n	8008018 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	051b      	lsls	r3, r3, #20
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	40012c00 	.word	0x40012c00
 800803c:	40013400 	.word	0x40013400
 8008040:	40015000 	.word	0x40015000

08008044 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	2204      	movs	r2, #4
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	43db      	mvns	r3, r3
 80080f2:	401a      	ands	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a1a      	ldr	r2, [r3, #32]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	fa01 f303 	lsl.w	r3, r1, r3
 8008108:	431a      	orrs	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	621a      	str	r2, [r3, #32]
}
 800810e:	bf00      	nop
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e042      	b.n	80081b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7f9 fc04 	bl	800194c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2224      	movs	r2, #36	@ 0x24
 8008148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fb25 	bl	80087b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f826 	bl	80081bc <UART_SetConfig>
 8008170:	4603      	mov	r3, r0
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e01b      	b.n	80081b2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008188:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008198:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f042 0201 	orr.w	r2, r2, #1
 80081a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fba4 	bl	80088f8 <UART_CheckIdleState>
 80081b0:	4603      	mov	r3, r0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c0:	b08c      	sub	sp, #48	@ 0x30
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	431a      	orrs	r2, r3
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	431a      	orrs	r2, r3
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4baa      	ldr	r3, [pc, #680]	@ (8008494 <UART_SetConfig+0x2d8>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	6812      	ldr	r2, [r2, #0]
 80081f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081f4:	430b      	orrs	r3, r1
 80081f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a9f      	ldr	r2, [pc, #636]	@ (8008498 <UART_SetConfig+0x2dc>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008224:	4313      	orrs	r3, r2
 8008226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008232:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	6812      	ldr	r2, [r2, #0]
 800823a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800823c:	430b      	orrs	r3, r1
 800823e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008246:	f023 010f 	bic.w	r1, r3, #15
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a90      	ldr	r2, [pc, #576]	@ (800849c <UART_SetConfig+0x2e0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d125      	bne.n	80082ac <UART_SetConfig+0xf0>
 8008260:	4b8f      	ldr	r3, [pc, #572]	@ (80084a0 <UART_SetConfig+0x2e4>)
 8008262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	2b03      	cmp	r3, #3
 800826c:	d81a      	bhi.n	80082a4 <UART_SetConfig+0xe8>
 800826e:	a201      	add	r2, pc, #4	@ (adr r2, 8008274 <UART_SetConfig+0xb8>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	08008285 	.word	0x08008285
 8008278:	08008295 	.word	0x08008295
 800827c:	0800828d 	.word	0x0800828d
 8008280:	0800829d 	.word	0x0800829d
 8008284:	2301      	movs	r3, #1
 8008286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800828a:	e116      	b.n	80084ba <UART_SetConfig+0x2fe>
 800828c:	2302      	movs	r3, #2
 800828e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008292:	e112      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008294:	2304      	movs	r3, #4
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800829a:	e10e      	b.n	80084ba <UART_SetConfig+0x2fe>
 800829c:	2308      	movs	r3, #8
 800829e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a2:	e10a      	b.n	80084ba <UART_SetConfig+0x2fe>
 80082a4:	2310      	movs	r3, #16
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082aa:	e106      	b.n	80084ba <UART_SetConfig+0x2fe>
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a7c      	ldr	r2, [pc, #496]	@ (80084a4 <UART_SetConfig+0x2e8>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d138      	bne.n	8008328 <UART_SetConfig+0x16c>
 80082b6:	4b7a      	ldr	r3, [pc, #488]	@ (80084a0 <UART_SetConfig+0x2e4>)
 80082b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082bc:	f003 030c 	and.w	r3, r3, #12
 80082c0:	2b0c      	cmp	r3, #12
 80082c2:	d82d      	bhi.n	8008320 <UART_SetConfig+0x164>
 80082c4:	a201      	add	r2, pc, #4	@ (adr r2, 80082cc <UART_SetConfig+0x110>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	08008301 	.word	0x08008301
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008321 	.word	0x08008321
 80082dc:	08008311 	.word	0x08008311
 80082e0:	08008321 	.word	0x08008321
 80082e4:	08008321 	.word	0x08008321
 80082e8:	08008321 	.word	0x08008321
 80082ec:	08008309 	.word	0x08008309
 80082f0:	08008321 	.word	0x08008321
 80082f4:	08008321 	.word	0x08008321
 80082f8:	08008321 	.word	0x08008321
 80082fc:	08008319 	.word	0x08008319
 8008300:	2300      	movs	r3, #0
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008306:	e0d8      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008308:	2302      	movs	r3, #2
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800830e:	e0d4      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008316:	e0d0      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800831e:	e0cc      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008326:	e0c8      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a5e      	ldr	r2, [pc, #376]	@ (80084a8 <UART_SetConfig+0x2ec>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d125      	bne.n	800837e <UART_SetConfig+0x1c2>
 8008332:	4b5b      	ldr	r3, [pc, #364]	@ (80084a0 <UART_SetConfig+0x2e4>)
 8008334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008338:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800833c:	2b30      	cmp	r3, #48	@ 0x30
 800833e:	d016      	beq.n	800836e <UART_SetConfig+0x1b2>
 8008340:	2b30      	cmp	r3, #48	@ 0x30
 8008342:	d818      	bhi.n	8008376 <UART_SetConfig+0x1ba>
 8008344:	2b20      	cmp	r3, #32
 8008346:	d00a      	beq.n	800835e <UART_SetConfig+0x1a2>
 8008348:	2b20      	cmp	r3, #32
 800834a:	d814      	bhi.n	8008376 <UART_SetConfig+0x1ba>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <UART_SetConfig+0x19a>
 8008350:	2b10      	cmp	r3, #16
 8008352:	d008      	beq.n	8008366 <UART_SetConfig+0x1aa>
 8008354:	e00f      	b.n	8008376 <UART_SetConfig+0x1ba>
 8008356:	2300      	movs	r3, #0
 8008358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800835c:	e0ad      	b.n	80084ba <UART_SetConfig+0x2fe>
 800835e:	2302      	movs	r3, #2
 8008360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008364:	e0a9      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008366:	2304      	movs	r3, #4
 8008368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800836c:	e0a5      	b.n	80084ba <UART_SetConfig+0x2fe>
 800836e:	2308      	movs	r3, #8
 8008370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008374:	e0a1      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008376:	2310      	movs	r3, #16
 8008378:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800837c:	e09d      	b.n	80084ba <UART_SetConfig+0x2fe>
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a4a      	ldr	r2, [pc, #296]	@ (80084ac <UART_SetConfig+0x2f0>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d125      	bne.n	80083d4 <UART_SetConfig+0x218>
 8008388:	4b45      	ldr	r3, [pc, #276]	@ (80084a0 <UART_SetConfig+0x2e4>)
 800838a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800838e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008392:	2bc0      	cmp	r3, #192	@ 0xc0
 8008394:	d016      	beq.n	80083c4 <UART_SetConfig+0x208>
 8008396:	2bc0      	cmp	r3, #192	@ 0xc0
 8008398:	d818      	bhi.n	80083cc <UART_SetConfig+0x210>
 800839a:	2b80      	cmp	r3, #128	@ 0x80
 800839c:	d00a      	beq.n	80083b4 <UART_SetConfig+0x1f8>
 800839e:	2b80      	cmp	r3, #128	@ 0x80
 80083a0:	d814      	bhi.n	80083cc <UART_SetConfig+0x210>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <UART_SetConfig+0x1f0>
 80083a6:	2b40      	cmp	r3, #64	@ 0x40
 80083a8:	d008      	beq.n	80083bc <UART_SetConfig+0x200>
 80083aa:	e00f      	b.n	80083cc <UART_SetConfig+0x210>
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b2:	e082      	b.n	80084ba <UART_SetConfig+0x2fe>
 80083b4:	2302      	movs	r3, #2
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ba:	e07e      	b.n	80084ba <UART_SetConfig+0x2fe>
 80083bc:	2304      	movs	r3, #4
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c2:	e07a      	b.n	80084ba <UART_SetConfig+0x2fe>
 80083c4:	2308      	movs	r3, #8
 80083c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ca:	e076      	b.n	80084ba <UART_SetConfig+0x2fe>
 80083cc:	2310      	movs	r3, #16
 80083ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d2:	e072      	b.n	80084ba <UART_SetConfig+0x2fe>
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a35      	ldr	r2, [pc, #212]	@ (80084b0 <UART_SetConfig+0x2f4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d12a      	bne.n	8008434 <UART_SetConfig+0x278>
 80083de:	4b30      	ldr	r3, [pc, #192]	@ (80084a0 <UART_SetConfig+0x2e4>)
 80083e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083ec:	d01a      	beq.n	8008424 <UART_SetConfig+0x268>
 80083ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083f2:	d81b      	bhi.n	800842c <UART_SetConfig+0x270>
 80083f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083f8:	d00c      	beq.n	8008414 <UART_SetConfig+0x258>
 80083fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083fe:	d815      	bhi.n	800842c <UART_SetConfig+0x270>
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <UART_SetConfig+0x250>
 8008404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008408:	d008      	beq.n	800841c <UART_SetConfig+0x260>
 800840a:	e00f      	b.n	800842c <UART_SetConfig+0x270>
 800840c:	2300      	movs	r3, #0
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008412:	e052      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008414:	2302      	movs	r3, #2
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800841a:	e04e      	b.n	80084ba <UART_SetConfig+0x2fe>
 800841c:	2304      	movs	r3, #4
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008422:	e04a      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008424:	2308      	movs	r3, #8
 8008426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800842a:	e046      	b.n	80084ba <UART_SetConfig+0x2fe>
 800842c:	2310      	movs	r3, #16
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008432:	e042      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a17      	ldr	r2, [pc, #92]	@ (8008498 <UART_SetConfig+0x2dc>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d13a      	bne.n	80084b4 <UART_SetConfig+0x2f8>
 800843e:	4b18      	ldr	r3, [pc, #96]	@ (80084a0 <UART_SetConfig+0x2e4>)
 8008440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008444:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008448:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800844c:	d01a      	beq.n	8008484 <UART_SetConfig+0x2c8>
 800844e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008452:	d81b      	bhi.n	800848c <UART_SetConfig+0x2d0>
 8008454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008458:	d00c      	beq.n	8008474 <UART_SetConfig+0x2b8>
 800845a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800845e:	d815      	bhi.n	800848c <UART_SetConfig+0x2d0>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <UART_SetConfig+0x2b0>
 8008464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008468:	d008      	beq.n	800847c <UART_SetConfig+0x2c0>
 800846a:	e00f      	b.n	800848c <UART_SetConfig+0x2d0>
 800846c:	2300      	movs	r3, #0
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008472:	e022      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008474:	2302      	movs	r3, #2
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800847a:	e01e      	b.n	80084ba <UART_SetConfig+0x2fe>
 800847c:	2304      	movs	r3, #4
 800847e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008482:	e01a      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008484:	2308      	movs	r3, #8
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800848a:	e016      	b.n	80084ba <UART_SetConfig+0x2fe>
 800848c:	2310      	movs	r3, #16
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008492:	e012      	b.n	80084ba <UART_SetConfig+0x2fe>
 8008494:	cfff69f3 	.word	0xcfff69f3
 8008498:	40008000 	.word	0x40008000
 800849c:	40013800 	.word	0x40013800
 80084a0:	40021000 	.word	0x40021000
 80084a4:	40004400 	.word	0x40004400
 80084a8:	40004800 	.word	0x40004800
 80084ac:	40004c00 	.word	0x40004c00
 80084b0:	40005000 	.word	0x40005000
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4aae      	ldr	r2, [pc, #696]	@ (8008778 <UART_SetConfig+0x5bc>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	f040 8097 	bne.w	80085f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084ca:	2b08      	cmp	r3, #8
 80084cc:	d823      	bhi.n	8008516 <UART_SetConfig+0x35a>
 80084ce:	a201      	add	r2, pc, #4	@ (adr r2, 80084d4 <UART_SetConfig+0x318>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	080084f9 	.word	0x080084f9
 80084d8:	08008517 	.word	0x08008517
 80084dc:	08008501 	.word	0x08008501
 80084e0:	08008517 	.word	0x08008517
 80084e4:	08008507 	.word	0x08008507
 80084e8:	08008517 	.word	0x08008517
 80084ec:	08008517 	.word	0x08008517
 80084f0:	08008517 	.word	0x08008517
 80084f4:	0800850f 	.word	0x0800850f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084f8:	f7fd fd02 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 80084fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084fe:	e010      	b.n	8008522 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008500:	4b9e      	ldr	r3, [pc, #632]	@ (800877c <UART_SetConfig+0x5c0>)
 8008502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008504:	e00d      	b.n	8008522 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008506:	f7fd fc8d 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 800850a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800850c:	e009      	b.n	8008522 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800850e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008512:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008514:	e005      	b.n	8008522 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 8130 	beq.w	800878a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852e:	4a94      	ldr	r2, [pc, #592]	@ (8008780 <UART_SetConfig+0x5c4>)
 8008530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008534:	461a      	mov	r2, r3
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	fbb3 f3f2 	udiv	r3, r3, r2
 800853c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	4413      	add	r3, r2
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	429a      	cmp	r2, r3
 800854c:	d305      	bcc.n	800855a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	429a      	cmp	r2, r3
 8008558:	d903      	bls.n	8008562 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008560:	e113      	b.n	800878a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008564:	2200      	movs	r2, #0
 8008566:	60bb      	str	r3, [r7, #8]
 8008568:	60fa      	str	r2, [r7, #12]
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800856e:	4a84      	ldr	r2, [pc, #528]	@ (8008780 <UART_SetConfig+0x5c4>)
 8008570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008574:	b29b      	uxth	r3, r3
 8008576:	2200      	movs	r2, #0
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008580:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008584:	f7f7 fe48 	bl	8000218 <__aeabi_uldivmod>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4610      	mov	r0, r2
 800858e:	4619      	mov	r1, r3
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	020b      	lsls	r3, r1, #8
 800859a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800859e:	0202      	lsls	r2, r0, #8
 80085a0:	6979      	ldr	r1, [r7, #20]
 80085a2:	6849      	ldr	r1, [r1, #4]
 80085a4:	0849      	lsrs	r1, r1, #1
 80085a6:	2000      	movs	r0, #0
 80085a8:	460c      	mov	r4, r1
 80085aa:	4605      	mov	r5, r0
 80085ac:	eb12 0804 	adds.w	r8, r2, r4
 80085b0:	eb43 0905 	adc.w	r9, r3, r5
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	469a      	mov	sl, r3
 80085bc:	4693      	mov	fp, r2
 80085be:	4652      	mov	r2, sl
 80085c0:	465b      	mov	r3, fp
 80085c2:	4640      	mov	r0, r8
 80085c4:	4649      	mov	r1, r9
 80085c6:	f7f7 fe27 	bl	8000218 <__aeabi_uldivmod>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4613      	mov	r3, r2
 80085d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085d8:	d308      	bcc.n	80085ec <UART_SetConfig+0x430>
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085e0:	d204      	bcs.n	80085ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6a3a      	ldr	r2, [r7, #32]
 80085e8:	60da      	str	r2, [r3, #12]
 80085ea:	e0ce      	b.n	800878a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085f2:	e0ca      	b.n	800878a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085fc:	d166      	bne.n	80086cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80085fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008602:	2b08      	cmp	r3, #8
 8008604:	d827      	bhi.n	8008656 <UART_SetConfig+0x49a>
 8008606:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <UART_SetConfig+0x450>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	08008631 	.word	0x08008631
 8008610:	08008639 	.word	0x08008639
 8008614:	08008641 	.word	0x08008641
 8008618:	08008657 	.word	0x08008657
 800861c:	08008647 	.word	0x08008647
 8008620:	08008657 	.word	0x08008657
 8008624:	08008657 	.word	0x08008657
 8008628:	08008657 	.word	0x08008657
 800862c:	0800864f 	.word	0x0800864f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008630:	f7fd fc66 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 8008634:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008636:	e014      	b.n	8008662 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008638:	f7fd fc78 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 800863c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800863e:	e010      	b.n	8008662 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008640:	4b4e      	ldr	r3, [pc, #312]	@ (800877c <UART_SetConfig+0x5c0>)
 8008642:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008644:	e00d      	b.n	8008662 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008646:	f7fd fbed 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 800864a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800864c:	e009      	b.n	8008662 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800864e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008652:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008654:	e005      	b.n	8008662 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8090 	beq.w	800878a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866e:	4a44      	ldr	r2, [pc, #272]	@ (8008780 <UART_SetConfig+0x5c4>)
 8008670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008674:	461a      	mov	r2, r3
 8008676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008678:	fbb3 f3f2 	udiv	r3, r3, r2
 800867c:	005a      	lsls	r2, r3, #1
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	441a      	add	r2, r3
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	fbb2 f3f3 	udiv	r3, r2, r3
 800868e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	2b0f      	cmp	r3, #15
 8008694:	d916      	bls.n	80086c4 <UART_SetConfig+0x508>
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800869c:	d212      	bcs.n	80086c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	f023 030f 	bic.w	r3, r3, #15
 80086a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	f003 0307 	and.w	r3, r3, #7
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	8bfb      	ldrh	r3, [r7, #30]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	8bfa      	ldrh	r2, [r7, #30]
 80086c0:	60da      	str	r2, [r3, #12]
 80086c2:	e062      	b.n	800878a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086ca:	e05e      	b.n	800878a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d828      	bhi.n	8008726 <UART_SetConfig+0x56a>
 80086d4:	a201      	add	r2, pc, #4	@ (adr r2, 80086dc <UART_SetConfig+0x520>)
 80086d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086da:	bf00      	nop
 80086dc:	08008701 	.word	0x08008701
 80086e0:	08008709 	.word	0x08008709
 80086e4:	08008711 	.word	0x08008711
 80086e8:	08008727 	.word	0x08008727
 80086ec:	08008717 	.word	0x08008717
 80086f0:	08008727 	.word	0x08008727
 80086f4:	08008727 	.word	0x08008727
 80086f8:	08008727 	.word	0x08008727
 80086fc:	0800871f 	.word	0x0800871f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008700:	f7fd fbfe 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 8008704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008706:	e014      	b.n	8008732 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008708:	f7fd fc10 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 800870c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800870e:	e010      	b.n	8008732 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008710:	4b1a      	ldr	r3, [pc, #104]	@ (800877c <UART_SetConfig+0x5c0>)
 8008712:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008714:	e00d      	b.n	8008732 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008716:	f7fd fb85 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 800871a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800871c:	e009      	b.n	8008732 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800871e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008724:	e005      	b.n	8008732 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008730:	bf00      	nop
    }

    if (pclk != 0U)
 8008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d028      	beq.n	800878a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873c:	4a10      	ldr	r2, [pc, #64]	@ (8008780 <UART_SetConfig+0x5c4>)
 800873e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008742:	461a      	mov	r2, r3
 8008744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008746:	fbb3 f2f2 	udiv	r2, r3, r2
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	085b      	lsrs	r3, r3, #1
 8008750:	441a      	add	r2, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	fbb2 f3f3 	udiv	r3, r2, r3
 800875a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	2b0f      	cmp	r3, #15
 8008760:	d910      	bls.n	8008784 <UART_SetConfig+0x5c8>
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008768:	d20c      	bcs.n	8008784 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	b29a      	uxth	r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60da      	str	r2, [r3, #12]
 8008774:	e009      	b.n	800878a <UART_SetConfig+0x5ce>
 8008776:	bf00      	nop
 8008778:	40008000 	.word	0x40008000
 800877c:	00f42400 	.word	0x00f42400
 8008780:	08008e98 	.word	0x08008e98
      }
      else
      {
        ret = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2201      	movs	r2, #1
 800878e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2201      	movs	r2, #1
 8008796:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2200      	movs	r2, #0
 800879e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2200      	movs	r2, #0
 80087a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80087a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3730      	adds	r7, #48	@ 0x30
 80087ae:	46bd      	mov	sp, r7
 80087b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080087b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00a      	beq.n	80087de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008804:	f003 0302 	and.w	r3, r3, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	430a      	orrs	r2, r1
 8008842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886a:	f003 0320 	and.w	r3, r3, #32
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00a      	beq.n	8008888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008890:	2b00      	cmp	r3, #0
 8008892:	d01a      	beq.n	80088ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088b2:	d10a      	bne.n	80088ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	605a      	str	r2, [r3, #4]
  }
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b098      	sub	sp, #96	@ 0x60
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008908:	f7f9 f986 	bl	8001c18 <HAL_GetTick>
 800890c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0308 	and.w	r3, r3, #8
 8008918:	2b08      	cmp	r3, #8
 800891a:	d12f      	bne.n	800897c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800891c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008924:	2200      	movs	r2, #0
 8008926:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f88e 	bl	8008a4c <UART_WaitOnFlagUntilTimeout>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d022      	beq.n	800897c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800894a:	653b      	str	r3, [r7, #80]	@ 0x50
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	461a      	mov	r2, r3
 8008952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008954:	647b      	str	r3, [r7, #68]	@ 0x44
 8008956:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800895a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e6      	bne.n	8008936 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e063      	b.n	8008a44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0304 	and.w	r3, r3, #4
 8008986:	2b04      	cmp	r3, #4
 8008988:	d149      	bne.n	8008a1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800898a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008992:	2200      	movs	r2, #0
 8008994:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f857 	bl	8008a4c <UART_WaitOnFlagUntilTimeout>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d03c      	beq.n	8008a1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	623b      	str	r3, [r7, #32]
   return(result);
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80089c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e6      	bne.n	80089a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3308      	adds	r3, #8
 80089dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f023 0301 	bic.w	r3, r3, #1
 80089ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3308      	adds	r3, #8
 80089f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089f6:	61fa      	str	r2, [r7, #28]
 80089f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	69b9      	ldr	r1, [r7, #24]
 80089fc:	69fa      	ldr	r2, [r7, #28]
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	617b      	str	r3, [r7, #20]
   return(result);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e5      	bne.n	80089d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e012      	b.n	8008a44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2220      	movs	r2, #32
 8008a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3758      	adds	r7, #88	@ 0x58
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	603b      	str	r3, [r7, #0]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a5c:	e04f      	b.n	8008afe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d04b      	beq.n	8008afe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a66:	f7f9 f8d7 	bl	8001c18 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d302      	bcc.n	8008a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e04e      	b.n	8008b1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0304 	and.w	r3, r3, #4
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d037      	beq.n	8008afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b80      	cmp	r3, #128	@ 0x80
 8008a92:	d034      	beq.n	8008afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b40      	cmp	r3, #64	@ 0x40
 8008a98:	d031      	beq.n	8008afe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	f003 0308 	and.w	r3, r3, #8
 8008aa4:	2b08      	cmp	r3, #8
 8008aa6:	d110      	bne.n	8008aca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2208      	movs	r2, #8
 8008aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 f838 	bl	8008b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2208      	movs	r2, #8
 8008aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e029      	b.n	8008b1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ad8:	d111      	bne.n	8008afe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f81e 	bl	8008b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e00f      	b.n	8008b1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69da      	ldr	r2, [r3, #28]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4013      	ands	r3, r2
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	bf0c      	ite	eq
 8008b0e:	2301      	moveq	r3, #1
 8008b10:	2300      	movne	r3, #0
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	461a      	mov	r2, r3
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d0a0      	beq.n	8008a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b095      	sub	sp, #84	@ 0x54
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e6      	bne.n	8008b2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3308      	adds	r3, #8
 8008b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b76:	f023 0301 	bic.w	r3, r3, #1
 8008b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3308      	adds	r3, #8
 8008b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b8c:	e841 2300 	strex	r3, r2, [r1]
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1e3      	bne.n	8008b60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d118      	bne.n	8008bd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	e853 3f00 	ldrex	r3, [r3]
 8008bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f023 0310 	bic.w	r3, r3, #16
 8008bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bbe:	61bb      	str	r3, [r7, #24]
 8008bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	6979      	ldr	r1, [r7, #20]
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	613b      	str	r3, [r7, #16]
   return(result);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e6      	bne.n	8008ba0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008be6:	bf00      	nop
 8008be8:	3754      	adds	r7, #84	@ 0x54
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c04:	2302      	movs	r3, #2
 8008c06:	e027      	b.n	8008c58 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2224      	movs	r2, #36	@ 0x24
 8008c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008c36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e02d      	b.n	8008cd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2224      	movs	r2, #36	@ 0x24
 8008c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f84f 	bl	8008d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e02d      	b.n	8008d54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2224      	movs	r2, #36	@ 0x24
 8008d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0201 	bic.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f811 	bl	8008d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d108      	bne.n	8008d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d7c:	e031      	b.n	8008de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d7e:	2308      	movs	r3, #8
 8008d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d82:	2308      	movs	r3, #8
 8008d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	0e5b      	lsrs	r3, r3, #25
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	0f5b      	lsrs	r3, r3, #29
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	7b3a      	ldrb	r2, [r7, #12]
 8008daa:	4911      	ldr	r1, [pc, #68]	@ (8008df0 <UARTEx_SetNbDataToProcess+0x94>)
 8008dac:	5c8a      	ldrb	r2, [r1, r2]
 8008dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008db2:	7b3a      	ldrb	r2, [r7, #12]
 8008db4:	490f      	ldr	r1, [pc, #60]	@ (8008df4 <UARTEx_SetNbDataToProcess+0x98>)
 8008db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	7b7a      	ldrb	r2, [r7, #13]
 8008dc8:	4909      	ldr	r1, [pc, #36]	@ (8008df0 <UARTEx_SetNbDataToProcess+0x94>)
 8008dca:	5c8a      	ldrb	r2, [r1, r2]
 8008dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008dd0:	7b7a      	ldrb	r2, [r7, #13]
 8008dd2:	4908      	ldr	r1, [pc, #32]	@ (8008df4 <UARTEx_SetNbDataToProcess+0x98>)
 8008dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008de2:	bf00      	nop
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	08008eb0 	.word	0x08008eb0
 8008df4:	08008eb8 	.word	0x08008eb8

08008df8 <memset>:
 8008df8:	4402      	add	r2, r0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d100      	bne.n	8008e02 <memset+0xa>
 8008e00:	4770      	bx	lr
 8008e02:	f803 1b01 	strb.w	r1, [r3], #1
 8008e06:	e7f9      	b.n	8008dfc <memset+0x4>

08008e08 <__libc_init_array>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8008e40 <__libc_init_array+0x38>)
 8008e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8008e44 <__libc_init_array+0x3c>)
 8008e0e:	1b64      	subs	r4, r4, r5
 8008e10:	10a4      	asrs	r4, r4, #2
 8008e12:	2600      	movs	r6, #0
 8008e14:	42a6      	cmp	r6, r4
 8008e16:	d109      	bne.n	8008e2c <__libc_init_array+0x24>
 8008e18:	4d0b      	ldr	r5, [pc, #44]	@ (8008e48 <__libc_init_array+0x40>)
 8008e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8008e4c <__libc_init_array+0x44>)
 8008e1c:	f000 f818 	bl	8008e50 <_init>
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	2600      	movs	r6, #0
 8008e26:	42a6      	cmp	r6, r4
 8008e28:	d105      	bne.n	8008e36 <__libc_init_array+0x2e>
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e30:	4798      	blx	r3
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7ee      	b.n	8008e14 <__libc_init_array+0xc>
 8008e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3a:	4798      	blx	r3
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	e7f2      	b.n	8008e26 <__libc_init_array+0x1e>
 8008e40:	08008ec8 	.word	0x08008ec8
 8008e44:	08008ec8 	.word	0x08008ec8
 8008e48:	08008ec8 	.word	0x08008ec8
 8008e4c:	08008ecc 	.word	0x08008ecc

08008e50 <_init>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr

08008e5c <_fini>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr
