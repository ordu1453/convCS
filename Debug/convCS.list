
convCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009260  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08009440  08009440  0000a440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009610  08009610  0000b070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009610  08009610  0000a610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009618  08009618  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009618  08009618  0000a618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800961c  0800961c  0000a61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08009620  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000070  08009690  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08009690  0000b4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b53c  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003454  00000000  00000000  000265dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00029a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012aa  00000000  00000000  0002b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025004  00000000  00000000  0002c50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb6f  00000000  00000000  0005150e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a3f  00000000  00000000  0006d07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163abc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f44  00000000  00000000  00163b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0016aa44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009428 	.word	0x08009428

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08009428 	.word	0x08009428

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <canReceiveHandler>:
HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, data);
}


void canReceiveHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	@ 0x40
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
FDCAN_RxHeaderTypeDef rxHeader;
uint8_t data[8];


if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, data) != HAL_OK)
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	f107 0218 	add.w	r2, r7, #24
 80005fc:	2140      	movs	r1, #64	@ 0x40
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f004 f8cc 	bl	800479c <HAL_FDCAN_GetRxMessage>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d116      	bne.n	8000638 <canReceiveHandler+0x4c>
return;


requestedMode = (SystemState_t)data[0];
 800060a:	7c3a      	ldrb	r2, [r7, #16]
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <canReceiveHandler+0x54>)
 800060e:	701a      	strb	r2, [r3, #0]


int16_t vDeci = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	81fb      	strh	r3, [r7, #14]
memcpy(&vDeci, &data[1], 2);
 8000614:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8000618:	b29b      	uxth	r3, r3
 800061a:	81fb      	strh	r3, [r7, #14]
targetVoltage = (float)vDeci * 100.0f;
 800061c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000628:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000644 <canReceiveHandler+0x58>
 800062c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <canReceiveHandler+0x5c>)
 8000632:	edc3 7a00 	vstr	s15, [r3]
 8000636:	e000      	b.n	800063a <canReceiveHandler+0x4e>
return;
 8000638:	bf00      	nop
}
 800063a:	3740      	adds	r7, #64	@ 0x40
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000090 	.word	0x20000090
 8000644:	42c80000 	.word	0x42c80000
 8000648:	2000008c 	.word	0x2000008c

0800064c <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
canReceiveHandler(hfdcan);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffc8 	bl	80005ec <canReceiveHandler>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <ConverterGetState>:
// call pwm disable until safe
pwmDisable();
}
#endif

SystemState_t ConverterGetState(void) {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
    return currentState;
 8000668:	4b03      	ldr	r3, [pc, #12]	@ (8000678 <ConverterGetState+0x14>)
 800066a:	781b      	ldrb	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	200000b4 	.word	0x200000b4

0800067c <converterProcess>:


void converterProcess(SystemState_t state)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08c      	sub	sp, #48	@ 0x30
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
#ifdef TEST_UNITY
	printf("===TESTING===\n");
 8000686:	484f      	ldr	r0, [pc, #316]	@ (80007c4 <converterProcess+0x148>)
 8000688:	f008 f86c 	bl	8008764 <puts>
    printf("Converter process running\n");
 800068c:	484e      	ldr	r0, [pc, #312]	@ (80007c8 <converterProcess+0x14c>)
 800068e:	f008 f869 	bl	8008764 <puts>
    sensorRead();
    const SensorValues_t* s = sensorGetValues();
    uint32_t errMask = ERR_NONE;
    uint8_t hasErr = diagCheck(s, &errMask);
#else
	printf("Variable setting\n");
 8000692:	484e      	ldr	r0, [pc, #312]	@ (80007cc <converterProcess+0x150>)
 8000694:	f008 f866 	bl	8008764 <puts>
    // Заглушка для юнит-тестов
    const SensorValues_t* s = &unitTestSensorValues;
 8000698:	4b4d      	ldr	r3, [pc, #308]	@ (80007d0 <converterProcess+0x154>)
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t errMask = unitTestErrorMask;
 800069c:	4b4d      	ldr	r3, [pc, #308]	@ (80007d4 <converterProcess+0x158>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t hasErr = unitTestHasError;
 80006a2:	4b4d      	ldr	r3, [pc, #308]	@ (80007d8 <converterProcess+0x15c>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("System has error: %d\n", unitTestHasError);
 80006aa:	4b4b      	ldr	r3, [pc, #300]	@ (80007d8 <converterProcess+0x15c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	484a      	ldr	r0, [pc, #296]	@ (80007dc <converterProcess+0x160>)
 80006b2:	f007 ffef 	bl	8008694 <iprintf>
    printf("System state: %d\n", currentState);
 80006b6:	4b4a      	ldr	r3, [pc, #296]	@ (80007e0 <converterProcess+0x164>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4849      	ldr	r0, [pc, #292]	@ (80007e4 <converterProcess+0x168>)
 80006be:	f007 ffe9 	bl	8008694 <iprintf>
#endif


    globalErrorMask = errMask;
 80006c2:	4a49      	ldr	r2, [pc, #292]	@ (80007e8 <converterProcess+0x16c>)
 80006c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006c6:	6013      	str	r3, [r2, #0]
#ifdef TEST_UNITY
	printf("Global error mask setted\n");
 80006c8:	4848      	ldr	r0, [pc, #288]	@ (80007ec <converterProcess+0x170>)
 80006ca:	f008 f84b 	bl	8008764 <puts>
#endif
    // mode change -> reset pid
    if ((uint32_t)state != lastMode)
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	4b47      	ldr	r3, [pc, #284]	@ (80007f0 <converterProcess+0x174>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d005      	beq.n	80006e4 <converterProcess+0x68>
    {
        piReset(&currentPid);
 80006d8:	4846      	ldr	r0, [pc, #280]	@ (80007f4 <converterProcess+0x178>)
 80006da:	f000 fd04 	bl	80010e6 <piReset>
        lastMode = (uint32_t)state;
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4a43      	ldr	r2, [pc, #268]	@ (80007f0 <converterProcess+0x174>)
 80006e2:	6013      	str	r3, [r2, #0]
    }
#ifdef TEST_UNITY
	printf("Last mode setted\n");
 80006e4:	4844      	ldr	r0, [pc, #272]	@ (80007f8 <converterProcess+0x17c>)
 80006e6:	f008 f83d 	bl	8008764 <puts>
#endif

#ifdef TEST_UNITY
	printf("PWM Handler running\n");
 80006ea:	4844      	ldr	r0, [pc, #272]	@ (80007fc <converterProcess+0x180>)
 80006ec:	f008 f83a 	bl	8008764 <puts>
#endif
    pwmHandlerProcess(hasErr, state);
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fd21 	bl	8001140 <pwmHandlerProcess>


    // run PID only in charge/discharge
    if (state == STATE_CHARGE)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d11a      	bne.n	800073a <converterProcess+0xbe>
    {
#ifdef TEST_UNITY
	printf("PI-regulator evaluating\n");
 8000704:	483e      	ldr	r0, [pc, #248]	@ (8000800 <converterProcess+0x184>)
 8000706:	f008 f82d 	bl	8008764 <puts>
#endif
        float setpoint = 1000.0f;
 800070a:	4b3e      	ldr	r3, [pc, #248]	@ (8000804 <converterProcess+0x188>)
 800070c:	617b      	str	r3, [r7, #20]
        float measurement = (float)s->voltageOut;
 800070e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071a:	edc7 7a04 	vstr	s15, [r7, #16]
        float duty = piUpdate(&currentPid, setpoint, measurement);
 800071e:	edd7 0a04 	vldr	s1, [r7, #16]
 8000722:	ed97 0a05 	vldr	s0, [r7, #20]
 8000726:	4833      	ldr	r0, [pc, #204]	@ (80007f4 <converterProcess+0x178>)
 8000728:	f000 fc54 	bl	8000fd4 <piUpdate>
 800072c:	ee07 0a90 	vmov	s15, r0
 8000730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000734:	edc7 7a03 	vstr	s15, [r7, #12]
 8000738:	e01c      	b.n	8000774 <converterProcess+0xf8>
#ifndef TEST_UNITY
        pwmSetDuty((uint32_t)duty);
#endif
    }
    else if (state == STATE_DISCHARGE)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d119      	bne.n	8000774 <converterProcess+0xf8>
    {
#ifdef TEST_UNITY
	printf("PI-regulator evaluating\n");
 8000740:	482f      	ldr	r0, [pc, #188]	@ (8000800 <converterProcess+0x184>)
 8000742:	f008 f80f 	bl	8008764 <puts>
#endif
        float setpoint = -1000.0f;
 8000746:	4b30      	ldr	r3, [pc, #192]	@ (8000808 <converterProcess+0x18c>)
 8000748:	623b      	str	r3, [r7, #32]
        float measurement = (float)s->currentOut;
 800074a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	ee07 3a90 	vmov	s15, r3
 8000752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000756:	edc7 7a07 	vstr	s15, [r7, #28]
        float duty = piUpdate(&currentPid, setpoint, measurement);
 800075a:	edd7 0a07 	vldr	s1, [r7, #28]
 800075e:	ed97 0a08 	vldr	s0, [r7, #32]
 8000762:	4824      	ldr	r0, [pc, #144]	@ (80007f4 <converterProcess+0x178>)
 8000764:	f000 fc36 	bl	8000fd4 <piUpdate>
 8000768:	ee07 0a90 	vmov	s15, r0
 800076c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000770:	edc7 7a06 	vstr	s15, [r7, #24]
        pwmSetDuty((uint32_t)duty);
#endif
    }

    // precharge
    if (state == STATE_PRECHARGE && currentState != STATE_PRECHARGE)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d120      	bne.n	80007bc <converterProcess+0x140>
 800077a:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <converterProcess+0x164>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d01c      	beq.n	80007bc <converterProcess+0x140>
    {
#ifdef TEST_UNITY
	printf("Precharge mode starting\n");
 8000782:	4822      	ldr	r0, [pc, #136]	@ (800080c <converterProcess+0x190>)
 8000784:	f007 ffee 	bl	8008764 <puts>
#endif
        currentState = STATE_PRECHARGE;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <converterProcess+0x164>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
#ifndef TEST_UNITY
        prechargeStart();
#endif
        if (!hasErr)
 800078e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000792:	2b00      	cmp	r3, #0
 8000794:	d109      	bne.n	80007aa <converterProcess+0x12e>
        {
#ifdef TEST_UNITY
	printf("No error after precharging\n");
 8000796:	481e      	ldr	r0, [pc, #120]	@ (8000810 <converterProcess+0x194>)
 8000798:	f007 ffe4 	bl	8008764 <puts>
#endif
            currentState = STATE_IDLE;
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <converterProcess+0x164>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
#ifdef TEST_UNITY
	printf("Entering to STATE_IDLE\n");
 80007a2:	481c      	ldr	r0, [pc, #112]	@ (8000814 <converterProcess+0x198>)
 80007a4:	f007 ffde 	bl	8008764 <puts>
    }

#ifndef TEST_UNITY
    canPublishTelemetry(currentState, errMask, s);
#endif
}
 80007a8:	e008      	b.n	80007bc <converterProcess+0x140>
	printf("Error found after precharging\n");
 80007aa:	481b      	ldr	r0, [pc, #108]	@ (8000818 <converterProcess+0x19c>)
 80007ac:	f007 ffda 	bl	8008764 <puts>
            currentState = STATE_INIT;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <converterProcess+0x164>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	701a      	strb	r2, [r3, #0]
	printf("Entering to STATE_INIT\n");
 80007b6:	4819      	ldr	r0, [pc, #100]	@ (800081c <converterProcess+0x1a0>)
 80007b8:	f007 ffd4 	bl	8008764 <puts>
}
 80007bc:	bf00      	nop
 80007be:	3730      	adds	r7, #48	@ 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	08009440 	.word	0x08009440
 80007c8:	08009450 	.word	0x08009450
 80007cc:	0800946c 	.word	0x0800946c
 80007d0:	20000094 	.word	0x20000094
 80007d4:	200000a8 	.word	0x200000a8
 80007d8:	200000ac 	.word	0x200000ac
 80007dc:	08009480 	.word	0x08009480
 80007e0:	200000b4 	.word	0x200000b4
 80007e4:	08009498 	.word	0x08009498
 80007e8:	200000b0 	.word	0x200000b0
 80007ec:	080094ac 	.word	0x080094ac
 80007f0:	20000000 	.word	0x20000000
 80007f4:	200000b8 	.word	0x200000b8
 80007f8:	080094c8 	.word	0x080094c8
 80007fc:	080094dc 	.word	0x080094dc
 8000800:	080094f0 	.word	0x080094f0
 8000804:	447a0000 	.word	0x447a0000
 8000808:	c47a0000 	.word	0xc47a0000
 800080c:	08009508 	.word	0x08009508
 8000810:	08009520 	.word	0x08009520
 8000814:	0800953c 	.word	0x0800953c
 8000818:	08009554 	.word	0x08009554
 800081c:	08009574 	.word	0x08009574

08000820 <HAL_TIM_OC_DelayElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0f      	ldr	r2, [pc, #60]	@ (800086c <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d117      	bne.n	8000862 <HAL_TIM_OC_DelayElapsedCallback+0x42>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7f1b      	ldrb	r3, [r3, #28]
 8000836:	2b08      	cmp	r3, #8
 8000838:	d113      	bne.n	8000862 <HAL_TIM_OC_DelayElapsedCallback+0x42>
    {
// This used for adding offset to adc calculation in case if it is unnecessary to get data every pwm period
    	if (tickADC == ADC_DIVIDER){
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b14      	cmp	r3, #20
 8000840:	d10a      	bne.n	8000858 <HAL_TIM_OC_DelayElapsedCallback+0x38>
    		sensorRead();
 8000842:	f000 fcaf 	bl	80011a4 <sensorRead>
    		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000846:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800084a:	480a      	ldr	r0, [pc, #40]	@ (8000874 <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 800084c:	f004 fc50 	bl	80050f0 <HAL_GPIO_TogglePin>
    		tickADC = 0;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    	else
    	{
    		tickADC++;
    	}
    }
}
 8000856:	e004      	b.n	8000862 <HAL_TIM_OC_DelayElapsedCallback+0x42>
    		tickADC++;
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000860:	6013      	str	r3, [r2, #0]
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40012c00 	.word	0x40012c00
 8000870:	20000004 	.word	0x20000004
 8000874:	48000800 	.word	0x48000800

08000878 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a08      	ldr	r2, [pc, #32]	@ (80008a8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10a      	bne.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
    	converterProcess(ConverterGetState());
 800088a:	f7ff feeb 	bl	8000664 <ConverterGetState>
 800088e:	4603      	mov	r3, r0
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fef3 	bl	800067c <converterProcess>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000896:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800089a:	4804      	ldr	r0, [pc, #16]	@ (80008ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 800089c:	f004 fc28 	bl	80050f0 <HAL_GPIO_TogglePin>
    }
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40001000 	.word	0x40001000
 80008ac:	48000800 	.word	0x48000800

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f001 f8c7 	bl	8001a46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f81c 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f000 faf8 	bl	8000eb0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008c0:	f000 f862 	bl	8000988 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80008c4:	f000 f92e 	bl	8000b24 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008c8:	f000 f972 	bl	8000bb0 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 80008cc:	f000 f9b6 	bl	8000c3c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80008d0:	f000 faa2 	bl	8000e18 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80008d4:	f000 fa6a 	bl	8000dac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4); // adc interrupt
 80008d8:	210c      	movs	r1, #12
 80008da:	4804      	ldr	r0, [pc, #16]	@ (80008ec <main+0x3c>)
 80008dc:	f005 fd84 	bl	80063e8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // main process interrupt
 80008e0:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <main+0x40>)
 80008e2:	f005 fca7 	bl	8006234 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e6:	bf00      	nop
 80008e8:	e7fd      	b.n	80008e6 <main+0x36>
 80008ea:	bf00      	nop
 80008ec:	20000208 	.word	0x20000208
 80008f0:	20000254 	.word	0x20000254

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	@ 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	2238      	movs	r2, #56	@ 0x38
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f008 f80e 	bl	8008924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000916:	2000      	movs	r0, #0
 8000918:	f004 fc04 	bl	8005124 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000924:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	2303      	movs	r3, #3
 800092c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000932:	2355      	movs	r3, #85	@ 0x55
 8000934:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000936:	2302      	movs	r3, #2
 8000938:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800093a:	2302      	movs	r3, #2
 800093c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0318 	add.w	r3, r7, #24
 8000946:	4618      	mov	r0, r3
 8000948:	f004 fca0 	bl	800528c <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000952:	f000 fb39 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2303      	movs	r3, #3
 800095c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000966:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800096a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2104      	movs	r1, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f004 ff9d 	bl	80058b0 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800097c:	f000 fb24 	bl	8000fc8 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	@ 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b09a      	sub	sp, #104	@ 0x68
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800098e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800099a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800099e:	2220      	movs	r2, #32
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f007 ffbe 	bl	8008924 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	223c      	movs	r2, #60	@ 0x3c
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 ffb8 	bl	8008924 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b4:	4b59      	ldr	r3, [pc, #356]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009bc:	4b57      	ldr	r3, [pc, #348]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c4:	4b55      	ldr	r3, [pc, #340]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ca:	4b54      	ldr	r3, [pc, #336]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80009d0:	4b52      	ldr	r3, [pc, #328]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009d6:	4b51      	ldr	r3, [pc, #324]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009d8:	2201      	movs	r2, #1
 80009da:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009dc:	4b4f      	ldr	r3, [pc, #316]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009de:	2204      	movs	r2, #4
 80009e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009e2:	4b4e      	ldr	r3, [pc, #312]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009e8:	4b4c      	ldr	r3, [pc, #304]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80009ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009f4:	4b49      	ldr	r3, [pc, #292]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009fc:	4b47      	ldr	r3, [pc, #284]	@ (8000b1c <MX_ADC1_Init+0x194>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a02:	4b46      	ldr	r3, [pc, #280]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a08:	4b44      	ldr	r3, [pc, #272]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a10:	4b42      	ldr	r3, [pc, #264]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a16:	4b41      	ldr	r3, [pc, #260]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a1e:	483f      	ldr	r0, [pc, #252]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000a20:	f001 fafc 	bl	800201c <HAL_ADC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000a2a:	f000 facd 	bl	8000fc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a32:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a36:	4619      	mov	r1, r3
 8000a38:	4838      	ldr	r0, [pc, #224]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000a3a:	f003 fb3d 	bl	80040b8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000a44:	f000 fac0 	bl	8000fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a48:	4b35      	ldr	r3, [pc, #212]	@ (8000b20 <MX_ADC1_Init+0x198>)
 8000a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a50:	2300      	movs	r3, #0
 8000a52:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a54:	237f      	movs	r3, #127	@ 0x7f
 8000a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfig.Offset = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a60:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a64:	4619      	mov	r1, r3
 8000a66:	482d      	ldr	r0, [pc, #180]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000a68:	f001 fec0 	bl	80027ec <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000a72:	f000 faa9 	bl	8000fc8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <MX_ADC1_Init+0x198>)
 8000a78:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000a7a:	2309      	movs	r3, #9
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000a82:	237f      	movs	r3, #127	@ 0x7f
 8000a84:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000a86:	2304      	movs	r3, #4
 8000a88:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4819      	ldr	r0, [pc, #100]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000ab8:	f002 fdd2 	bl	8003660 <HAL_ADCEx_InjectedConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000ac2:	f000 fa81 	bl	8000fc8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000ac6:	f240 130f 	movw	r3, #271	@ 0x10f
 8000aca:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4812      	ldr	r0, [pc, #72]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000ad2:	f002 fdc5 	bl	8003660 <HAL_ADCEx_InjectedConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8000adc:	f000 fa74 	bl	8000fc8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000ae0:	f240 2315 	movw	r3, #533	@ 0x215
 8000ae4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000aec:	f002 fdb8 	bl	8003660 <HAL_ADCEx_InjectedConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8000af6:	f000 fa67 	bl	8000fc8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000afa:	f240 331b 	movw	r3, #795	@ 0x31b
 8000afe:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_ADC1_Init+0x194>)
 8000b06:	f002 fdab 	bl	8003660 <HAL_ADCEx_InjectedConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000b10:	f000 fa5a 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3768      	adds	r7, #104	@ 0x68
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000d4 	.word	0x200000d4
 8000b20:	04300002 	.word	0x04300002

08000b24 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b2a:	4a20      	ldr	r2, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x88>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b54:	2214      	movs	r2, #20
 8000b56:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b60:	220e      	movs	r2, #14
 8000b62:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_FDCAN1_Init+0x84>)
 8000b96:	f003 fca7 	bl	80044e8 <HAL_FDCAN_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000ba0:	f000 fa12 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000140 	.word	0x20000140
 8000bac:	40006400 	.word	0x40006400

08000bb0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bb6:	4a20      	ldr	r2, [pc, #128]	@ (8000c38 <MX_FDCAN2_Init+0x88>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 20;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000be0:	2214      	movs	r2, #20
 8000be2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bec:	220e      	movs	r2, #14
 8000bee:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_FDCAN2_Init+0x84>)
 8000c22:	f003 fc61 	bl	80044e8 <HAL_FDCAN_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000c2c:	f000 f9cc 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200001a4 	.word	0x200001a4
 8000c38:	40006800 	.word	0x40006800

08000c3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b098      	sub	sp, #96	@ 0x60
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2234      	movs	r2, #52	@ 0x34
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f007 fe5b 	bl	8008924 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000c70:	4a4d      	ldr	r2, [pc, #308]	@ (8000da8 <MX_TIM1_Init+0x16c>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c74:	4b4b      	ldr	r3, [pc, #300]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4721;
 8000c80:	4b48      	ldr	r3, [pc, #288]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000c82:	f241 2271 	movw	r2, #4721	@ 0x1271
 8000c86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b46      	ldr	r3, [pc, #280]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8e:	4b45      	ldr	r3, [pc, #276]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b43      	ldr	r3, [pc, #268]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c9a:	4842      	ldr	r0, [pc, #264]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000c9c:	f005 fd04 	bl	80066a8 <HAL_TIM_PWM_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 f98f 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000caa:	483e      	ldr	r0, [pc, #248]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000cac:	f005 fb3a 	bl	8006324 <HAL_TIM_OC_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000cb6:	f000 f987 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4835      	ldr	r0, [pc, #212]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000cce:	f006 fc41 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000cd8:	f000 f976 	bl	8000fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cdc:	2360      	movs	r3, #96	@ 0x60
 8000cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4828      	ldr	r0, [pc, #160]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000d02:	f005 fef1 	bl	8006ae8 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d0c:	f000 f95c 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d14:	2204      	movs	r2, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4822      	ldr	r0, [pc, #136]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000d1a:	f005 fee5 	bl	8006ae8 <HAL_TIM_PWM_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000d24:	f000 f950 	bl	8000fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 2300;
 8000d2c:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d36:	220c      	movs	r2, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481a      	ldr	r0, [pc, #104]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000d3c:	f005 fe5a 	bl	80069f4 <HAL_TIM_OC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000d46:	f000 f93f 	bl	8000fc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000d88:	f006 fc7a 	bl	8007680 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000d92:	f000 f919 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d96:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <MX_TIM1_Init+0x168>)
 8000d98:	f000 fc3c 	bl	8001614 <HAL_TIM_MspPostInit>

}
 8000d9c:	bf00      	nop
 8000d9e:	3760      	adds	r7, #96	@ 0x60
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000208 	.word	0x20000208
 8000da8:	40012c00 	.word	0x40012c00

08000dac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dbe:	4a15      	ldr	r2, [pc, #84]	@ (8000e14 <MX_TIM6_Init+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dd4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dde:	f005 f9d1 	bl	8006184 <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000de8:	f000 f8ee 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_TIM6_Init+0x64>)
 8000dfa:	f006 fbab 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e04:	f000 f8e0 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000254 	.word	0x20000254
 8000e14:	40001000 	.word	0x40001000

08000e18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e1e:	4a23      	ldr	r2, [pc, #140]	@ (8000eac <MX_USART3_UART_Init+0x94>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e54:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e60:	4811      	ldr	r0, [pc, #68]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e62:	f006 fce7 	bl	8007834 <HAL_UART_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e6c:	f000 f8ac 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e70:	2100      	movs	r1, #0
 8000e72:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e74:	f007 fa82 	bl	800837c <HAL_UARTEx_SetTxFifoThreshold>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e7e:	f000 f8a3 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e82:	2100      	movs	r1, #0
 8000e84:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e86:	f007 fab7 	bl	80083f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e90:	f000 f89a 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <MX_USART3_UART_Init+0x90>)
 8000e96:	f007 fa38 	bl	800830a <HAL_UARTEx_DisableFifoMode>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea0:	f000 f892 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200002a0 	.word	0x200002a0
 8000eac:	40004800 	.word	0x40004800

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	4a3c      	ldr	r2, [pc, #240]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ede:	4b37      	ldr	r3, [pc, #220]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a36      	ldr	r2, [pc, #216]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000ee4:	f043 0320 	orr.w	r3, r3, #32
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b34      	ldr	r3, [pc, #208]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0320 	and.w	r3, r3, #32
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a30      	ldr	r2, [pc, #192]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4a2a      	ldr	r2, [pc, #168]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1a:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <MX_GPIO_Init+0x10c>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000f2c:	4824      	ldr	r0, [pc, #144]	@ (8000fc0 <MX_GPIO_Init+0x110>)
 8000f2e:	f004 f8c7 	bl	80050c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GATE_GPIO_Port, RELAY_GATE_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3c:	f004 f8c0 	bl	80050c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000f40:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4819      	ldr	r0, [pc, #100]	@ (8000fc0 <MX_GPIO_Init+0x110>)
 8000f5a:	f003 ff2f 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_Pin H2_Pin H3_Pin H4_Pin */
  GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin|H4_Pin;
 8000f5e:	23f0      	movs	r3, #240	@ 0xf0
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f74:	f003 ff22 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_GATE_Pin */
  GPIO_InitStruct.Pin = RELAY_GATE_Pin;
 8000f78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_GATE_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f94:	f003 ff12 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : H5_Pin H6_Pin H7_Pin H8_Pin
                           USER_BTN_Pin */
  GPIO_InitStruct.Pin = H5_Pin|H6_Pin|H7_Pin|H8_Pin
 8000f98:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 8000f9c:	617b      	str	r3, [r7, #20]
                          |USER_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_GPIO_Init+0x114>)
 8000fae:	f003 ff05 	bl	8004dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	@ 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48000800 	.word	0x48000800
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <Error_Handler+0x8>

08000fd4 <piUpdate>:
    pi->integral = 0.0f;
    pi->output = 0u;
}

unsigned int piUpdate(PIController_t* pi, float setpoint, float measurement)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fe0:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 8000fe4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff0:	edc7 7a04 	vstr	s15, [r7, #16]
    pi->integral += error * pi->ki * pi->dt;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001000:	edd7 7a04 	vldr	s15, [r7, #16]
 8001004:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	edd3 7a02 	vldr	s15, [r3, #8]
 800100e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	edc3 7a03 	vstr	s15, [r3, #12]

    // Антивиндап
    if (pi->integral > pi->outMax) pi->integral = pi->outMax;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	edd3 7a05 	vldr	s15, [r3, #20]
 8001028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	dd04      	ble.n	800103c <piUpdate+0x68>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	e00e      	b.n	800105a <piUpdate+0x86>
    else if (pi->integral < pi->outMin) pi->integral = pi->outMin;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	edd3 7a04 	vldr	s15, [r3, #16]
 8001048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	d503      	bpl.n	800105a <piUpdate+0x86>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	60da      	str	r2, [r3, #12]

    unsigned int output = pi->kp * error + pi->integral;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	ed93 7a00 	vldr	s14, [r3]
 8001060:	edd7 7a04 	vldr	s15, [r7, #16]
 8001064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	edd3 7a03 	vldr	s15, [r3, #12]
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001076:	ee17 3a90 	vmov	r3, s15
 800107a:	617b      	str	r3, [r7, #20]

    // Ограничение выхода
    if (output > pi->outMax) output = pi->outMax;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	edd3 7a05 	vldr	s15, [r3, #20]
 800108c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	dd08      	ble.n	80010a8 <piUpdate+0xd4>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 7a05 	vldr	s15, [r3, #20]
 800109c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a0:	ee17 3a90 	vmov	r3, s15
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	e014      	b.n	80010d2 <piUpdate+0xfe>
    else if (output < pi->outMin) output = pi->outMin;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80010b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	d507      	bpl.n	80010d2 <piUpdate+0xfe>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80010c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010cc:	ee17 3a90 	vmov	r3, s15
 80010d0:	617b      	str	r3, [r7, #20]

    pi->output = output;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	619a      	str	r2, [r3, #24]
    return output;
 80010d8:	697b      	ldr	r3, [r7, #20]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <piReset>:

void piReset(PIController_t* pi)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
    pi->integral = 0.0f;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    pi->output = 0.0f;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <pwmEnable>:
}
#endif


void pwmEnable(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	if (currentPWMState == STATE_DISABLE)
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <pwmEnable+0x1c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <pwmEnable+0x12>
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
#endif
	    currentPWMState = STATE_ENABLE;
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <pwmEnable+0x1c>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
	}

}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000334 	.word	0x20000334

08001128 <pwmDisable>:

void pwmDisable(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
#endif
    currentPWMState = STATE_DISABLE;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <pwmDisable+0x14>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	20000334 	.word	0x20000334

08001140 <pwmHandlerProcess>:
extern SystemState_t currentState;



void pwmHandlerProcess(uint8_t hasError, SystemState_t state)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
if(hasError == 1 || state == STATE_INIT || state == STATE_IDLE || state == STATE_PRECHARGE)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d008      	beq.n	8001168 <pwmHandlerProcess+0x28>
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d005      	beq.n	8001168 <pwmHandlerProcess+0x28>
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <pwmHandlerProcess+0x28>
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d105      	bne.n	8001174 <pwmHandlerProcess+0x34>
{
pwmDisable();
 8001168:	f7ff ffde 	bl	8001128 <pwmDisable>
currentState = STATE_INIT;
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <pwmHandlerProcess+0x60>)
 800116e:	2202      	movs	r2, #2
 8001170:	701a      	strb	r2, [r3, #0]
else if (state == STATE_DISCHARGE)
{
pwmEnable();
currentState = STATE_DISCHARGE;
}
}
 8001172:	e010      	b.n	8001196 <pwmHandlerProcess+0x56>
else if (state == STATE_CHARGE)
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d105      	bne.n	8001186 <pwmHandlerProcess+0x46>
pwmEnable();
 800117a:	f7ff ffc5 	bl	8001108 <pwmEnable>
currentState = STATE_CHARGE;
 800117e:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <pwmHandlerProcess+0x60>)
 8001180:	2203      	movs	r2, #3
 8001182:	701a      	strb	r2, [r3, #0]
}
 8001184:	e007      	b.n	8001196 <pwmHandlerProcess+0x56>
else if (state == STATE_DISCHARGE)
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b04      	cmp	r3, #4
 800118a:	d104      	bne.n	8001196 <pwmHandlerProcess+0x56>
pwmEnable();
 800118c:	f7ff ffbc 	bl	8001108 <pwmEnable>
currentState = STATE_DISCHARGE;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <pwmHandlerProcess+0x60>)
 8001192:	2204      	movs	r2, #4
 8001194:	701a      	strb	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000b4 	.word	0x200000b4

080011a4 <sensorRead>:
HAL_ADC_Start(&hadc1);
}


void sensorRead(void)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b08f      	sub	sp, #60	@ 0x3c
 80011a8:	af00      	add	r7, sp, #0
uint32_t rawValues[5];


for (uint8_t i = 0; i < 5; i++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80011b0:	e02c      	b.n	800120c <sensorRead+0x68>
{
ADC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2220      	movs	r2, #32
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f007 fbb3 	bl	8008924 <memset>
sConfig.Channel = ADC_CHANNEL_0 + i;
 80011be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011c2:	3301      	adds	r3, #1
 80011c4:	603b      	str	r3, [r7, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80011ca:	2306      	movs	r3, #6
 80011cc:	60bb      	str	r3, [r7, #8]
HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4834      	ldr	r0, [pc, #208]	@ (80012a4 <sensorRead+0x100>)
 80011d4:	f001 fb0a 	bl	80027ec <HAL_ADC_ConfigChannel>


HAL_ADC_Start(&hadc1);
 80011d8:	4832      	ldr	r0, [pc, #200]	@ (80012a4 <sensorRead+0x100>)
 80011da:	f001 f8db 	bl	8002394 <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc1, 10);
 80011de:	210a      	movs	r1, #10
 80011e0:	4830      	ldr	r0, [pc, #192]	@ (80012a4 <sensorRead+0x100>)
 80011e2:	f001 f9ef 	bl	80025c4 <HAL_ADC_PollForConversion>
rawValues[i] = HAL_ADC_GetValue(&hadc1);
 80011e6:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 80011ea:	482e      	ldr	r0, [pc, #184]	@ (80012a4 <sensorRead+0x100>)
 80011ec:	f001 faf0 	bl	80027d0 <HAL_ADC_GetValue>
 80011f0:	4602      	mov	r2, r0
 80011f2:	00a3      	lsls	r3, r4, #2
 80011f4:	3338      	adds	r3, #56	@ 0x38
 80011f6:	443b      	add	r3, r7
 80011f8:	f843 2c18 	str.w	r2, [r3, #-24]
HAL_ADC_Stop(&hadc1);
 80011fc:	4829      	ldr	r0, [pc, #164]	@ (80012a4 <sensorRead+0x100>)
 80011fe:	f001 f9ad 	bl	800255c <HAL_ADC_Stop>
for (uint8_t i = 0; i < 5; i++)
 8001202:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001206:	3301      	adds	r3, #1
 8001208:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800120c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001210:	2b04      	cmp	r3, #4
 8001212:	d9ce      	bls.n	80011b2 <sensorRead+0xe>
}


// Преобразование ADC -> реальные значения
currentValues.currentIn    = (float)rawValues[0] * ADC_TO_CURRENT_COEFF_IN;
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80012a8 <sensorRead+0x104>
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122a:	ee17 2a90 	vmov	r2, s15
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <sensorRead+0x108>)
 8001230:	601a      	str	r2, [r3, #0]
currentValues.currentOut   = (float)rawValues[1] * ADC_TO_CURRENT_COEFF_OUT;
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80012a8 <sensorRead+0x104>
 8001240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001248:	ee17 2a90 	vmov	r2, s15
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <sensorRead+0x108>)
 800124e:	605a      	str	r2, [r3, #4]
currentValues.currentChoke    = (float)rawValues[2] * ADC_TO_CURRENT_COEFF_CHOKE;
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80012a8 <sensorRead+0x104>
 800125e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001266:	ee17 2a90 	vmov	r2, s15
 800126a:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <sensorRead+0x108>)
 800126c:	609a      	str	r2, [r3, #8]
currentValues.voltageIn    = (float)rawValues[3] * ADC_TO_VOLTAGE_COEFF_IN;
 800126e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127c:	ee17 2a90 	vmov	r2, s15
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <sensorRead+0x108>)
 8001282:	60da      	str	r2, [r3, #12]
currentValues.voltageOut   = (float)rawValues[4] * ADC_TO_VOLTAGE_COEFF_OUT;
 8001284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001292:	ee17 2a90 	vmov	r2, s15
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <sensorRead+0x108>)
 8001298:	611a      	str	r2, [r3, #16]
}
 800129a:	bf00      	nop
 800129c:	373c      	adds	r7, #60	@ 0x3c
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000d4 	.word	0x200000d4
 80012a8:	3dcccccd 	.word	0x3dcccccd
 80012ac:	20000338 	.word	0x20000338

080012b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_MspInit+0x48>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ba:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <HAL_MspInit+0x48>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <HAL_MspInit+0x48>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_MspInit+0x48>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d2:	4a09      	ldr	r2, [pc, #36]	@ (80012f8 <HAL_MspInit+0x48>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <HAL_MspInit+0x48>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80012e6:	2004      	movs	r0, #4
 80012e8:	f003 f8be 	bl	8004468 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012ec:	f003 ffbe 	bl	800526c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0a0      	sub	sp, #128	@ 0x80
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	2254      	movs	r2, #84	@ 0x54
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f007 fb01 	bl	8008924 <memset>
  if(hadc->Instance==ADC1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800132a:	d14d      	bne.n	80013c8 <HAL_ADC_MspInit+0xcc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800132c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001330:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001332:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001336:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fcd3 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001348:	f7ff fe3e 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800134c:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <HAL_ADC_MspInit+0xd4>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001350:	4a1f      	ldr	r2, [pc, #124]	@ (80013d0 <HAL_ADC_MspInit+0xd4>)
 8001352:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <HAL_ADC_MspInit+0xd4>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_ADC_MspInit+0xd4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_ADC_MspInit+0xd4>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_ADC_MspInit+0xd4>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <HAL_ADC_MspInit+0xd4>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001380:	4a13      	ldr	r2, [pc, #76]	@ (80013d0 <HAL_ADC_MspInit+0xd4>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_ADC_MspInit+0xd4>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001394:	230f      	movs	r3, #15
 8001396:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001398:	2303      	movs	r3, #3
 800139a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013aa:	f003 fd07 	bl	8004dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b4:	2303      	movs	r3, #3
 80013b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013c0:	4619      	mov	r1, r3
 80013c2:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <HAL_ADC_MspInit+0xd8>)
 80013c4:	f003 fcfa 	bl	8004dbc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013c8:	bf00      	nop
 80013ca:	3780      	adds	r7, #128	@ 0x80
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000400 	.word	0x48000400

080013d8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0a0      	sub	sp, #128	@ 0x80
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	2254      	movs	r2, #84	@ 0x54
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f007 fa93 	bl	8008924 <memset>
  if(hfdcan->Instance==FDCAN1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a59      	ldr	r2, [pc, #356]	@ (8001568 <HAL_FDCAN_MspInit+0x190>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d153      	bne.n	80014b0 <HAL_FDCAN_MspInit+0xd8>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800140e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001412:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001414:	f107 0318 	add.w	r3, r7, #24
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fc65 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001424:	f7ff fdd0 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001428:	4b50      	ldr	r3, [pc, #320]	@ (800156c <HAL_FDCAN_MspInit+0x194>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a4f      	ldr	r2, [pc, #316]	@ (800156c <HAL_FDCAN_MspInit+0x194>)
 8001430:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001432:	4b4e      	ldr	r3, [pc, #312]	@ (800156c <HAL_FDCAN_MspInit+0x194>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d10b      	bne.n	8001452 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800143a:	4b4d      	ldr	r3, [pc, #308]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	4a4c      	ldr	r2, [pc, #304]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 8001440:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001444:	6593      	str	r3, [r2, #88]	@ 0x58
 8001446:	4b4a      	ldr	r3, [pc, #296]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b47      	ldr	r3, [pc, #284]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a46      	ldr	r2, [pc, #280]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b44      	ldr	r3, [pc, #272]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800146a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800146e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800147c:	2309      	movs	r3, #9
 800147e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148a:	f003 fc97 	bl	8004dbc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2103      	movs	r1, #3
 8001492:	2015      	movs	r0, #21
 8001494:	f002 fff3 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001498:	2015      	movs	r0, #21
 800149a:	f003 f80a 	bl	80044b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 3, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2103      	movs	r1, #3
 80014a2:	2016      	movs	r0, #22
 80014a4:	f002 ffeb 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80014a8:	2016      	movs	r0, #22
 80014aa:	f003 f802 	bl	80044b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80014ae:	e056      	b.n	800155e <HAL_FDCAN_MspInit+0x186>
  else if(hfdcan->Instance==FDCAN2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001574 <HAL_FDCAN_MspInit+0x19c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d151      	bne.n	800155e <HAL_FDCAN_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80014ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80014c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014c4:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 fc0c 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 80014d6:	f7ff fd77 	bl	8000fc8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80014da:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_FDCAN_MspInit+0x194>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a22      	ldr	r2, [pc, #136]	@ (800156c <HAL_FDCAN_MspInit+0x194>)
 80014e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <HAL_FDCAN_MspInit+0x194>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10b      	bne.n	8001504 <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80014ec:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 80014f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	4a19      	ldr	r2, [pc, #100]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001510:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <HAL_FDCAN_MspInit+0x198>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800151c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001520:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800152e:	2309      	movs	r3, #9
 8001530:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001536:	4619      	mov	r1, r3
 8001538:	480f      	ldr	r0, [pc, #60]	@ (8001578 <HAL_FDCAN_MspInit+0x1a0>)
 800153a:	f003 fc3f 	bl	8004dbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 3, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2103      	movs	r1, #3
 8001542:	2056      	movs	r0, #86	@ 0x56
 8001544:	f002 ff9b 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001548:	2056      	movs	r0, #86	@ 0x56
 800154a:	f002 ffb2 	bl	80044b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 3, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2103      	movs	r1, #3
 8001552:	2057      	movs	r0, #87	@ 0x57
 8001554:	f002 ff93 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001558:	2057      	movs	r0, #87	@ 0x57
 800155a:	f002 ffaa 	bl	80044b2 <HAL_NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3780      	adds	r7, #128	@ 0x80
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40006400 	.word	0x40006400
 800156c:	2000034c 	.word	0x2000034c
 8001570:	40021000 	.word	0x40021000
 8001574:	40006800 	.word	0x40006800
 8001578:	48000400 	.word	0x48000400

0800157c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <HAL_TIM_PWM_MspInit+0x44>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d113      	bne.n	80015b6 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <HAL_TIM_PWM_MspInit+0x48>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	4a0c      	ldr	r2, [pc, #48]	@ (80015c4 <HAL_TIM_PWM_MspInit+0x48>)
 8001594:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001598:	6613      	str	r3, [r2, #96]	@ 0x60
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_TIM_PWM_MspInit+0x48>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2102      	movs	r1, #2
 80015aa:	201b      	movs	r0, #27
 80015ac:	f002 ff67 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80015b0:	201b      	movs	r0, #27
 80015b2:	f002 ff7e 	bl	80044b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40012c00 	.word	0x40012c00
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d113      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_TIM_Base_MspInit+0x48>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015de:	4a0c      	ldr	r2, [pc, #48]	@ (8001610 <HAL_TIM_Base_MspInit+0x48>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_TIM_Base_MspInit+0x48>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2102      	movs	r1, #2
 80015f6:	2036      	movs	r0, #54	@ 0x36
 80015f8:	f002 ff41 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015fc:	2036      	movs	r0, #54	@ 0x36
 80015fe:	f002 ff58 	bl	80044b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40001000 	.word	0x40001000
 8001610:	40021000 	.word	0x40021000

08001614 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a2e      	ldr	r2, [pc, #184]	@ (80016ec <HAL_TIM_MspPostInit+0xd8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d156      	bne.n	80016e4 <HAL_TIM_MspPostInit+0xd0>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <HAL_TIM_MspPostInit+0xdc>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	4a2d      	ldr	r2, [pc, #180]	@ (80016f0 <HAL_TIM_MspPostInit+0xdc>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001642:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <HAL_TIM_MspPostInit+0xdc>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4b28      	ldr	r3, [pc, #160]	@ (80016f0 <HAL_TIM_MspPostInit+0xdc>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	4a27      	ldr	r2, [pc, #156]	@ (80016f0 <HAL_TIM_MspPostInit+0xdc>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165a:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <HAL_TIM_MspPostInit+0xdc>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_TIM_MspPostInit+0xdc>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	4a21      	ldr	r2, [pc, #132]	@ (80016f0 <HAL_TIM_MspPostInit+0xdc>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <HAL_TIM_MspPostInit+0xdc>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
    PC13     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800167e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001690:	2304      	movs	r3, #4
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4816      	ldr	r0, [pc, #88]	@ (80016f4 <HAL_TIM_MspPostInit+0xe0>)
 800169c:	f003 fb8e 	bl	8004dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a0:	2301      	movs	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016b0:	2306      	movs	r3, #6
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	480f      	ldr	r0, [pc, #60]	@ (80016f8 <HAL_TIM_MspPostInit+0xe4>)
 80016bc:	f003 fb7e 	bl	8004dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016d2:	2306      	movs	r3, #6
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e0:	f003 fb6c 	bl	8004dbc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	3728      	adds	r7, #40	@ 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48000800 	.word	0x48000800
 80016f8:	48000400 	.word	0x48000400

080016fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09e      	sub	sp, #120	@ 0x78
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2254      	movs	r2, #84	@ 0x54
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f007 f901 	bl	8008924 <memset>
  if(huart->Instance==USART3)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1f      	ldr	r2, [pc, #124]	@ (80017a4 <HAL_UART_MspInit+0xa8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d136      	bne.n	800179a <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800172c:	2304      	movs	r3, #4
 800172e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4618      	mov	r0, r3
 800173a:	f004 fad5 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001744:	f7ff fc40 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <HAL_UART_MspInit+0xac>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	4a16      	ldr	r2, [pc, #88]	@ (80017a8 <HAL_UART_MspInit+0xac>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001752:	6593      	str	r3, [r2, #88]	@ 0x58
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <HAL_UART_MspInit+0xac>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001758:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_UART_MspInit+0xac>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	4a10      	ldr	r2, [pc, #64]	@ (80017a8 <HAL_UART_MspInit+0xac>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176c:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <HAL_UART_MspInit+0xac>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001778:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800177c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800178a:	2307      	movs	r3, #7
 800178c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <HAL_UART_MspInit+0xb0>)
 8001796:	f003 fb11 	bl	8004dbc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800179a:	bf00      	nop
 800179c:	3778      	adds	r7, #120	@ 0x78
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40004800 	.word	0x40004800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000400 	.word	0x48000400

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <NMI_Handler+0x4>

080017b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <MemManage_Handler+0x4>

080017c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001806:	f000 f971 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <FDCAN1_IT0_IRQHandler+0x10>)
 8001816:	f003 f8c9 	bl	80049ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000140 	.word	0x20000140

08001824 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <FDCAN1_IT1_IRQHandler+0x10>)
 800182a:	f003 f8bf 	bl	80049ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000140 	.word	0x20000140

08001838 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <TIM1_CC_IRQHandler+0x10>)
 800183e:	f004 ff8a 	bl	8006756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000208 	.word	0x20000208

0800184c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <TIM6_DAC_IRQHandler+0x10>)
 8001852:	f004 ff80 	bl	8006756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000254 	.word	0x20000254

08001860 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <FDCAN2_IT0_IRQHandler+0x10>)
 8001866:	f003 f8a1 	bl	80049ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001a4 	.word	0x200001a4

08001874 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <FDCAN2_IT1_IRQHandler+0x10>)
 800187a:	f003 f897 	bl	80049ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001a4 	.word	0x200001a4

08001888 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e00a      	b.n	80018b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189a:	f3af 8000 	nop.w
 800189e:	4601      	mov	r1, r0
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbf0      	blt.n	800189a <_read+0x12>
  }

  return len;
 80018b8:	687b      	ldr	r3, [r7, #4]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e009      	b.n	80018e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf1      	blt.n	80018d4 <_write+0x12>
  }
  return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_close>:

int _close(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001922:	605a      	str	r2, [r3, #4]
  return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_isatty>:

int _isatty(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	@ (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f007 f814 	bl	80089c0 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20020000 	.word	0x20020000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	20000350 	.word	0x20000350
 80019cc:	200004a8 	.word	0x200004a8

080019d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <SystemInit+0x20>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <SystemInit+0x20>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f4:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f8:	f7ff ffea 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019fc:	480c      	ldr	r0, [pc, #48]	@ (8001a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80019fe:	490d      	ldr	r1, [pc, #52]	@ (8001a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <LoopForever+0xe>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a14:	4c0a      	ldr	r4, [pc, #40]	@ (8001a40 <LoopForever+0x16>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a22:	f006 ffd3 	bl	80089cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a26:	f7fe ff43 	bl	80008b0 <main>

08001a2a <LoopForever>:

LoopForever:
    b LoopForever
 8001a2a:	e7fe      	b.n	8001a2a <LoopForever>
  ldr   r0, =_estack
 8001a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a38:	08009620 	.word	0x08009620
  ldr r2, =_sbss
 8001a3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a40:	200004a4 	.word	0x200004a4

08001a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_2_IRQHandler>

08001a46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f002 fd09 	bl	8004468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a56:	2007      	movs	r0, #7
 8001a58:	f000 f80e 	bl	8001a78 <HAL_InitTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	e001      	b.n	8001a6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a68:	f7ff fc22 	bl	80012b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a6c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a84:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <HAL_InitTick+0x68>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d022      	beq.n	8001ad2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_InitTick+0x6c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <HAL_InitTick+0x68>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fd14 	bl	80044ce <HAL_SYSTICK_Config>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10f      	bne.n	8001acc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	d809      	bhi.n	8001ac6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aba:	f002 fce0 	bl	800447e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_InitTick+0x70>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e007      	b.n	8001ad6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e004      	b.n	8001ad6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	e001      	b.n	8001ad6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000010 	.word	0x20000010
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	2000000c 	.word	0x2000000c

08001aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_IncTick+0x1c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_IncTick+0x20>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a03      	ldr	r2, [pc, #12]	@ (8001b08 <HAL_IncTick+0x1c>)
 8001afc:	6013      	str	r3, [r2, #0]
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20000354 	.word	0x20000354
 8001b0c:	20000010 	.word	0x20000010

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000354 	.word	0x20000354

08001b28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	609a      	str	r2, [r3, #8]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3360      	adds	r3, #96	@ 0x60
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <LL_ADC_SetOffset+0x44>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	03fff000 	.word	0x03fff000

08001bd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3360      	adds	r3, #96	@ 0x60
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3360      	adds	r3, #96	@ 0x60
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b087      	sub	sp, #28
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3360      	adds	r3, #96	@ 0x60
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3360      	adds	r3, #96	@ 0x60
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	615a      	str	r2, [r3, #20]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b087      	sub	sp, #28
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3330      	adds	r3, #48	@ 0x30
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	4413      	add	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	211f      	movs	r1, #31
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	401a      	ands	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	0e9b      	lsrs	r3, r3, #26
 8001d2a:	f003 011f 	and.w	r1, r3, #31
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b087      	sub	sp, #28
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3314      	adds	r3, #20
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	0e5b      	lsrs	r3, r3, #25
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	0d1b      	lsrs	r3, r3, #20
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2107      	movs	r1, #7
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	401a      	ands	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	0d1b      	lsrs	r3, r3, #20
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	43db      	mvns	r3, r3
 8001dba:	401a      	ands	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0318 	and.w	r3, r3, #24
 8001dc2:	4908      	ldr	r1, [pc, #32]	@ (8001de4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dc4:	40d9      	lsrs	r1, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	400b      	ands	r3, r1
 8001dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	0007ffff 	.word	0x0007ffff

08001de8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 031f 	and.w	r3, r3, #31
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6093      	str	r3, [r2, #8]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e58:	d101      	bne.n	8001e5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ef4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ef8:	f043 0202 	orr.w	r2, r3, #2
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <LL_ADC_IsEnabled+0x18>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <LL_ADC_IsEnabled+0x1a>
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d101      	bne.n	8001f4a <LL_ADC_IsDisableOngoing+0x18>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <LL_ADC_IsDisableOngoing+0x1a>
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f6c:	f043 0204 	orr.w	r2, r3, #4
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f94:	f043 0210 	orr.w	r2, r3, #16
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d101      	bne.n	8001fc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fde:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe2:	f043 0220 	orr.w	r2, r3, #32
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b08      	cmp	r3, #8
 8002008:	d101      	bne.n	800200e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1a9      	b.n	800238a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff f959 	bl	80012fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fef1 	bl	8001e44 <LL_ADC_IsDeepPowerDownEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fed7 	bl	8001e20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff0c 	bl	8001e94 <LL_ADC_IsInternalRegulatorEnabled>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d115      	bne.n	80020ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fef0 	bl	8001e6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800208c:	4b9c      	ldr	r3, [pc, #624]	@ (8002300 <HAL_ADC_Init+0x2e4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	4a9c      	ldr	r2, [pc, #624]	@ (8002304 <HAL_ADC_Init+0x2e8>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	3301      	adds	r3, #1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f9      	bne.n	80020a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff feee 	bl	8001e94 <LL_ADC_IsInternalRegulatorEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c2:	f043 0210 	orr.w	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff62 	bl	8001fa8 <LL_ADC_REG_IsConversionOngoing>
 80020e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8142 	bne.w	8002378 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 813e 	bne.w	8002378 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002100:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002104:	f043 0202 	orr.w	r2, r3, #2
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fefb 	bl	8001f0c <LL_ADC_IsEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d141      	bne.n	80021a0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002124:	d004      	beq.n	8002130 <HAL_ADC_Init+0x114>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a77      	ldr	r2, [pc, #476]	@ (8002308 <HAL_ADC_Init+0x2ec>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d10f      	bne.n	8002150 <HAL_ADC_Init+0x134>
 8002130:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002134:	f7ff feea 	bl	8001f0c <LL_ADC_IsEnabled>
 8002138:	4604      	mov	r4, r0
 800213a:	4873      	ldr	r0, [pc, #460]	@ (8002308 <HAL_ADC_Init+0x2ec>)
 800213c:	f7ff fee6 	bl	8001f0c <LL_ADC_IsEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	4323      	orrs	r3, r4
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e012      	b.n	8002176 <HAL_ADC_Init+0x15a>
 8002150:	486e      	ldr	r0, [pc, #440]	@ (800230c <HAL_ADC_Init+0x2f0>)
 8002152:	f7ff fedb 	bl	8001f0c <LL_ADC_IsEnabled>
 8002156:	4604      	mov	r4, r0
 8002158:	486d      	ldr	r0, [pc, #436]	@ (8002310 <HAL_ADC_Init+0x2f4>)
 800215a:	f7ff fed7 	bl	8001f0c <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	431c      	orrs	r4, r3
 8002162:	486c      	ldr	r0, [pc, #432]	@ (8002314 <HAL_ADC_Init+0x2f8>)
 8002164:	f7ff fed2 	bl	8001f0c <LL_ADC_IsEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	4323      	orrs	r3, r4
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002182:	d004      	beq.n	800218e <HAL_ADC_Init+0x172>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a5f      	ldr	r2, [pc, #380]	@ (8002308 <HAL_ADC_Init+0x2ec>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <HAL_ADC_Init+0x176>
 800218e:	4a62      	ldr	r2, [pc, #392]	@ (8002318 <HAL_ADC_Init+0x2fc>)
 8002190:	e000      	b.n	8002194 <HAL_ADC_Init+0x178>
 8002192:	4a62      	ldr	r2, [pc, #392]	@ (800231c <HAL_ADC_Init+0x300>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f7ff fcc4 	bl	8001b28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7f5b      	ldrb	r3, [r3, #29]
 80021a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d106      	bne.n	80021dc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	045b      	lsls	r3, r3, #17
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b48      	ldr	r3, [pc, #288]	@ (8002320 <HAL_ADC_Init+0x304>)
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	430b      	orrs	r3, r1
 800220a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fee5 	bl	8001ff6 <LL_ADC_INJ_IsConversionOngoing>
 800222c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d17f      	bne.n	8002334 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d17c      	bne.n	8002334 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800223e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002246:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002256:	f023 0302 	bic.w	r3, r3, #2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	430b      	orrs	r3, r1
 8002262:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d017      	beq.n	800229c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800227a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002284:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002288:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6911      	ldr	r1, [r2, #16]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	430b      	orrs	r3, r1
 8002296:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800229a:	e013      	b.n	80022c4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d12a      	bne.n	8002324 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022e4:	4311      	orrs	r1, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022f0:	430a      	orrs	r2, r1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	611a      	str	r2, [r3, #16]
 80022fe:	e019      	b.n	8002334 <HAL_ADC_Init+0x318>
 8002300:	20000008 	.word	0x20000008
 8002304:	053e2d63 	.word	0x053e2d63
 8002308:	50000100 	.word	0x50000100
 800230c:	50000400 	.word	0x50000400
 8002310:	50000500 	.word	0x50000500
 8002314:	50000600 	.word	0x50000600
 8002318:	50000300 	.word	0x50000300
 800231c:	50000700 	.word	0x50000700
 8002320:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10c      	bne.n	8002356 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f023 010f 	bic.w	r1, r3, #15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	1e5a      	subs	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	631a      	str	r2, [r3, #48]	@ 0x30
 8002354:	e007      	b.n	8002366 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 020f 	bic.w	r2, r2, #15
 8002364:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002376:	e007      	b.n	8002388 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002388:	7ffb      	ldrb	r3, [r7, #31]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd90      	pop	{r4, r7, pc}
 8002392:	bf00      	nop

08002394 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023a4:	d004      	beq.n	80023b0 <HAL_ADC_Start+0x1c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a67      	ldr	r2, [pc, #412]	@ (8002548 <HAL_ADC_Start+0x1b4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_Start+0x20>
 80023b0:	4b66      	ldr	r3, [pc, #408]	@ (800254c <HAL_ADC_Start+0x1b8>)
 80023b2:	e000      	b.n	80023b6 <HAL_ADC_Start+0x22>
 80023b4:	4b66      	ldr	r3, [pc, #408]	@ (8002550 <HAL_ADC_Start+0x1bc>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fd16 	bl	8001de8 <LL_ADC_GetMultimode>
 80023bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fdf0 	bl	8001fa8 <LL_ADC_REG_IsConversionOngoing>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 80b4 	bne.w	8002538 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Start+0x4a>
 80023da:	2302      	movs	r3, #2
 80023dc:	e0af      	b.n	800253e <HAL_ADC_Start+0x1aa>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fefc 	bl	80031e4 <ADC_Enable>
 80023ec:	4603      	mov	r3, r0
 80023ee:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 809b 	bne.w	800252e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a4d      	ldr	r2, [pc, #308]	@ (8002548 <HAL_ADC_Start+0x1b4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_ADC_Start+0x96>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a4e      	ldr	r2, [pc, #312]	@ (8002554 <HAL_ADC_Start+0x1c0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d002      	beq.n	8002426 <HAL_ADC_Start+0x92>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	e003      	b.n	800242e <HAL_ADC_Start+0x9a>
 8002426:	4b4c      	ldr	r3, [pc, #304]	@ (8002558 <HAL_ADC_Start+0x1c4>)
 8002428:	e001      	b.n	800242e <HAL_ADC_Start+0x9a>
 800242a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4293      	cmp	r3, r2
 8002434:	d002      	beq.n	800243c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002440:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002454:	d106      	bne.n	8002464 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245a:	f023 0206 	bic.w	r2, r3, #6
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	661a      	str	r2, [r3, #96]	@ 0x60
 8002462:	e002      	b.n	800246a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	221c      	movs	r2, #28
 8002470:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a32      	ldr	r2, [pc, #200]	@ (8002548 <HAL_ADC_Start+0x1b4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_ADC_Start+0x104>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a32      	ldr	r2, [pc, #200]	@ (8002554 <HAL_ADC_Start+0x1c0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d002      	beq.n	8002494 <HAL_ADC_Start+0x100>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e003      	b.n	800249c <HAL_ADC_Start+0x108>
 8002494:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <HAL_ADC_Start+0x1c4>)
 8002496:	e001      	b.n	800249c <HAL_ADC_Start+0x108>
 8002498:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d008      	beq.n	80024b6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d002      	beq.n	80024b6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	2b09      	cmp	r3, #9
 80024b4:	d114      	bne.n	80024e0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fd3d 	bl	8001f58 <LL_ADC_REG_StartConversion>
 80024de:	e02d      	b.n	800253c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a15      	ldr	r2, [pc, #84]	@ (8002548 <HAL_ADC_Start+0x1b4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_ADC_Start+0x176>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a16      	ldr	r2, [pc, #88]	@ (8002554 <HAL_ADC_Start+0x1c0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d002      	beq.n	8002506 <HAL_ADC_Start+0x172>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	e003      	b.n	800250e <HAL_ADC_Start+0x17a>
 8002506:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <HAL_ADC_Start+0x1c4>)
 8002508:	e001      	b.n	800250e <HAL_ADC_Start+0x17a>
 800250a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800250e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00f      	beq.n	800253c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002524:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800252c:	e006      	b.n	800253c <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002536:	e001      	b.n	800253c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002538:	2302      	movs	r3, #2
 800253a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800253c:	7dfb      	ldrb	r3, [r7, #23]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	50000100 	.word	0x50000100
 800254c:	50000300 	.word	0x50000300
 8002550:	50000700 	.word	0x50000700
 8002554:	50000500 	.word	0x50000500
 8002558:	50000400 	.word	0x50000400

0800255c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Stop+0x16>
 800256e:	2302      	movs	r3, #2
 8002570:	e023      	b.n	80025ba <HAL_ADC_Stop+0x5e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800257a:	2103      	movs	r1, #3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fd75 	bl	800306c <ADC_ConversionStop>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d111      	bne.n	80025b0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 febf 	bl	8003310 <ADC_Disable>
 8002592:	4603      	mov	r3, r0
 8002594:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d6:	d004      	beq.n	80025e2 <HAL_ADC_PollForConversion+0x1e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a77      	ldr	r2, [pc, #476]	@ (80027bc <HAL_ADC_PollForConversion+0x1f8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_PollForConversion+0x22>
 80025e2:	4b77      	ldr	r3, [pc, #476]	@ (80027c0 <HAL_ADC_PollForConversion+0x1fc>)
 80025e4:	e000      	b.n	80025e8 <HAL_ADC_PollForConversion+0x24>
 80025e6:	4b77      	ldr	r3, [pc, #476]	@ (80027c4 <HAL_ADC_PollForConversion+0x200>)
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fbfd 	bl	8001de8 <LL_ADC_GetMultimode>
 80025ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d102      	bne.n	80025fe <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025f8:	2308      	movs	r3, #8
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	e037      	b.n	800266e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b05      	cmp	r3, #5
 8002608:	d002      	beq.n	8002610 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d111      	bne.n	8002634 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	f043 0220 	orr.w	r2, r3, #32
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0c1      	b.n	80027b2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800262e:	2304      	movs	r3, #4
 8002630:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002632:	e01c      	b.n	800266e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800263c:	d004      	beq.n	8002648 <HAL_ADC_PollForConversion+0x84>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a5e      	ldr	r2, [pc, #376]	@ (80027bc <HAL_ADC_PollForConversion+0x1f8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d101      	bne.n	800264c <HAL_ADC_PollForConversion+0x88>
 8002648:	4b5d      	ldr	r3, [pc, #372]	@ (80027c0 <HAL_ADC_PollForConversion+0x1fc>)
 800264a:	e000      	b.n	800264e <HAL_ADC_PollForConversion+0x8a>
 800264c:	4b5d      	ldr	r3, [pc, #372]	@ (80027c4 <HAL_ADC_PollForConversion+0x200>)
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fbd8 	bl	8001e04 <LL_ADC_GetMultiDMATransfer>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	f043 0220 	orr.w	r2, r3, #32
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0a3      	b.n	80027b2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800266a:	2304      	movs	r3, #4
 800266c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800266e:	f7ff fa4f 	bl	8001b10 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002674:	e021      	b.n	80026ba <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d01d      	beq.n	80026ba <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800267e:	f7ff fa47 	bl	8001b10 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <HAL_ADC_PollForConversion+0xd0>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d112      	bne.n	80026ba <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10b      	bne.n	80026ba <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a6:	f043 0204 	orr.w	r2, r3, #4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e07b      	b.n	80027b2 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0d6      	beq.n	8002676 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff faf7 	bl	8001ccc <LL_ADC_REG_IsTriggerSourceSWStart>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01c      	beq.n	800271e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7f5b      	ldrb	r3, [r3, #29]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d118      	bne.n	800271e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d111      	bne.n	800271e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a26      	ldr	r2, [pc, #152]	@ (80027bc <HAL_ADC_PollForConversion+0x1f8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_ADC_PollForConversion+0x178>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a26      	ldr	r2, [pc, #152]	@ (80027c8 <HAL_ADC_PollForConversion+0x204>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d002      	beq.n	8002738 <HAL_ADC_PollForConversion+0x174>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e003      	b.n	8002740 <HAL_ADC_PollForConversion+0x17c>
 8002738:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <HAL_ADC_PollForConversion+0x208>)
 800273a:	e001      	b.n	8002740 <HAL_ADC_PollForConversion+0x17c>
 800273c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	4293      	cmp	r3, r2
 8002746:	d008      	beq.n	800275a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d002      	beq.n	800275a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b09      	cmp	r3, #9
 8002758:	d104      	bne.n	8002764 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e014      	b.n	800278e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a14      	ldr	r2, [pc, #80]	@ (80027bc <HAL_ADC_PollForConversion+0x1f8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d009      	beq.n	8002782 <HAL_ADC_PollForConversion+0x1be>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a15      	ldr	r2, [pc, #84]	@ (80027c8 <HAL_ADC_PollForConversion+0x204>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d002      	beq.n	800277e <HAL_ADC_PollForConversion+0x1ba>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	e003      	b.n	8002786 <HAL_ADC_PollForConversion+0x1c2>
 800277e:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <HAL_ADC_PollForConversion+0x208>)
 8002780:	e001      	b.n	8002786 <HAL_ADC_PollForConversion+0x1c2>
 8002782:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002786:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d104      	bne.n	800279e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2208      	movs	r2, #8
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e008      	b.n	80027b0 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d103      	bne.n	80027b0 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	220c      	movs	r2, #12
 80027ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	50000100 	.word	0x50000100
 80027c0:	50000300 	.word	0x50000300
 80027c4:	50000700 	.word	0x50000700
 80027c8:	50000500 	.word	0x50000500
 80027cc:	50000400 	.word	0x50000400

080027d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b0b6      	sub	sp, #216	@ 0xd8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x24>
 800280a:	2302      	movs	r3, #2
 800280c:	f000 bc13 	b.w	8003036 <HAL_ADC_ConfigChannel+0x84a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fbc3 	bl	8001fa8 <LL_ADC_REG_IsConversionOngoing>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 83f3 	bne.w	8003010 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	f7ff fa5b 	bl	8001cf2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fbb1 	bl	8001fa8 <LL_ADC_REG_IsConversionOngoing>
 8002846:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fbd1 	bl	8001ff6 <LL_ADC_INJ_IsConversionOngoing>
 8002854:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002858:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 81d9 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002862:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 81d4 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002874:	d10f      	bne.n	8002896 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	4619      	mov	r1, r3
 8002882:	f7ff fa62 	bl	8001d4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fa09 	bl	8001ca6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002894:	e00e      	b.n	80028b4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f7ff fa51 	bl	8001d4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f9f9 	bl	8001ca6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	08db      	lsrs	r3, r3, #3
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d022      	beq.n	800291c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6919      	ldr	r1, [r3, #16]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028e6:	f7ff f953 	bl	8001b90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6919      	ldr	r1, [r3, #16]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f7ff f99f 	bl	8001c3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x126>
 800290c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002910:	e000      	b.n	8002914 <HAL_ADC_ConfigChannel+0x128>
 8002912:	2300      	movs	r3, #0
 8002914:	461a      	mov	r2, r3
 8002916:	f7ff f9ab 	bl	8001c70 <LL_ADC_SetOffsetSaturation>
 800291a:	e17b      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f958 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x15c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff f94d 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	f003 021f 	and.w	r2, r3, #31
 8002946:	e01e      	b.n	8002986 <HAL_ADC_ConfigChannel+0x19a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f942 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002966:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800296a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800296e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e004      	b.n	8002984 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800297a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_ConfigChannel+0x1b2>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	e018      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x1e4>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80029b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80029ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e004      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d106      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f911 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2101      	movs	r1, #1
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f8f5 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x222>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f8ea 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002a04:	4603      	mov	r3, r0
 8002a06:	0e9b      	lsrs	r3, r3, #26
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	e01e      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x260>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2101      	movs	r1, #1
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff f8df 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002a2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002a34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	e004      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x278>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	e018      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x2aa>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e004      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d106      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f8ae 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f892 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x2e8>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f887 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	0e9b      	lsrs	r3, r3, #26
 8002ace:	f003 021f 	and.w	r2, r3, #31
 8002ad2:	e01e      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x326>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2102      	movs	r1, #2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f87c 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002af2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e004      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002b06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d105      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x33e>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	0e9b      	lsrs	r3, r3, #26
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	e016      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x36c>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002b3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	e004      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d106      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2102      	movs	r1, #2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f84d 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2103      	movs	r1, #3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff f831 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x3aa>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2103      	movs	r1, #3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f826 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	e017      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x3da>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2103      	movs	r1, #3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff f81b 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002bae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bb0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002bb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002bb8:	2320      	movs	r3, #32
 8002bba:	e003      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002bbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x3f2>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	e011      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x416>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002bf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e003      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d106      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2103      	movs	r1, #3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fff8 	bl	8001c04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f977 	bl	8001f0c <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 813d 	bne.w	8002ea0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f7ff f8b4 	bl	8001da0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4aa2      	ldr	r2, [pc, #648]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	f040 812e 	bne.w	8002ea0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10b      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x480>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2b09      	cmp	r3, #9
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e019      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x4b4>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c7c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e003      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2b09      	cmp	r3, #9
 8002c98:	bf94      	ite	ls
 8002c9a:	2301      	movls	r3, #1
 8002c9c:	2300      	movhi	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d079      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x4d4>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	069b      	lsls	r3, r3, #26
 8002cba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cbe:	e015      	b.n	8002cec <HAL_ADC_ConfigChannel+0x500>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cd0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e003      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	069b      	lsls	r3, r3, #26
 8002ce8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x520>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	e017      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x550>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d24:	2320      	movs	r3, #32
 8002d26:	e003      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2101      	movs	r1, #1
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	ea42 0103 	orr.w	r1, r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x576>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0e9b      	lsrs	r3, r3, #26
 8002d52:	3301      	adds	r3, #1
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	051b      	lsls	r3, r3, #20
 8002d60:	e018      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x5a8>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	e003      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d94:	430b      	orrs	r3, r1
 8002d96:	e07e      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x5c8>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	3301      	adds	r3, #1
 8002dac:	069b      	lsls	r3, r3, #26
 8002dae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002db2:	e015      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x5f4>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002dcc:	2320      	movs	r3, #32
 8002dce:	e003      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	069b      	lsls	r3, r3, #26
 8002ddc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x614>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	3301      	adds	r3, #1
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2101      	movs	r1, #1
 8002dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfe:	e017      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x644>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	e003      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	ea42 0103 	orr.w	r1, r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10d      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x670>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	3301      	adds	r3, #1
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	3b1e      	subs	r3, #30
 8002e54:	051b      	lsls	r3, r3, #20
 8002e56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	e01b      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x6a8>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	613b      	str	r3, [r7, #16]
  return result;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e74:	2320      	movs	r3, #32
 8002e76:	e003      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	f003 021f 	and.w	r2, r3, #31
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b1e      	subs	r3, #30
 8002e8e:	051b      	lsls	r3, r3, #20
 8002e90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e94:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f7fe ff55 	bl	8001d4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_ADC_ConfigChannel+0x6e0>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80be 	beq.w	800302a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eb6:	d004      	beq.n	8002ec2 <HAL_ADC_ConfigChannel+0x6d6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a04      	ldr	r2, [pc, #16]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x6ec>
 8002ec2:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002ec4:	e009      	b.n	8002eda <HAL_ADC_ConfigChannel+0x6ee>
 8002ec6:	bf00      	nop
 8002ec8:	407f0000 	.word	0x407f0000
 8002ecc:	80080000 	.word	0x80080000
 8002ed0:	50000100 	.word	0x50000100
 8002ed4:	50000300 	.word	0x50000300
 8002ed8:	4b59      	ldr	r3, [pc, #356]	@ (8003040 <HAL_ADC_ConfigChannel+0x854>)
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fe4a 	bl	8001b74 <LL_ADC_GetCommonPathInternalCh>
 8002ee0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a56      	ldr	r2, [pc, #344]	@ (8003044 <HAL_ADC_ConfigChannel+0x858>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x70c>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a55      	ldr	r2, [pc, #340]	@ (8003048 <HAL_ADC_ConfigChannel+0x85c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d13a      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002efc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d134      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f0c:	d005      	beq.n	8002f1a <HAL_ADC_ConfigChannel+0x72e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a4e      	ldr	r2, [pc, #312]	@ (800304c <HAL_ADC_ConfigChannel+0x860>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	f040 8085 	bne.w	8003024 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f22:	d004      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x742>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a49      	ldr	r2, [pc, #292]	@ (8003050 <HAL_ADC_ConfigChannel+0x864>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x746>
 8002f2e:	4a49      	ldr	r2, [pc, #292]	@ (8003054 <HAL_ADC_ConfigChannel+0x868>)
 8002f30:	e000      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x748>
 8002f32:	4a43      	ldr	r2, [pc, #268]	@ (8003040 <HAL_ADC_ConfigChannel+0x854>)
 8002f34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f7fe fe05 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f44:	4b44      	ldr	r3, [pc, #272]	@ (8003058 <HAL_ADC_ConfigChannel+0x86c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	4a44      	ldr	r2, [pc, #272]	@ (800305c <HAL_ADC_ConfigChannel+0x870>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f5e:	e002      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f9      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f6c:	e05a      	b.n	8003024 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a3b      	ldr	r2, [pc, #236]	@ (8003060 <HAL_ADC_ConfigChannel+0x874>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d125      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d11f      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a31      	ldr	r2, [pc, #196]	@ (8003050 <HAL_ADC_ConfigChannel+0x864>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d104      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x7ac>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a34      	ldr	r2, [pc, #208]	@ (8003064 <HAL_ADC_ConfigChannel+0x878>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d047      	beq.n	8003028 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fa0:	d004      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x7c0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8003050 <HAL_ADC_ConfigChannel+0x864>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x7c4>
 8002fac:	4a29      	ldr	r2, [pc, #164]	@ (8003054 <HAL_ADC_ConfigChannel+0x868>)
 8002fae:	e000      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x7c6>
 8002fb0:	4a23      	ldr	r2, [pc, #140]	@ (8003040 <HAL_ADC_ConfigChannel+0x854>)
 8002fb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f7fe fdc6 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fc2:	e031      	b.n	8003028 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <HAL_ADC_ConfigChannel+0x87c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d12d      	bne.n	800302a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d127      	bne.n	800302a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1c      	ldr	r2, [pc, #112]	@ (8003050 <HAL_ADC_ConfigChannel+0x864>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fec:	d004      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0x80c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a17      	ldr	r2, [pc, #92]	@ (8003050 <HAL_ADC_ConfigChannel+0x864>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x810>
 8002ff8:	4a16      	ldr	r2, [pc, #88]	@ (8003054 <HAL_ADC_ConfigChannel+0x868>)
 8002ffa:	e000      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x812>
 8002ffc:	4a10      	ldr	r2, [pc, #64]	@ (8003040 <HAL_ADC_ConfigChannel+0x854>)
 8002ffe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003002:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f7fe fda0 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
 800300e:	e00c      	b.n	800302a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003022:	e002      	b.n	800302a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003024:	bf00      	nop
 8003026:	e000      	b.n	800302a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003028:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003032:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003036:	4618      	mov	r0, r3
 8003038:	37d8      	adds	r7, #216	@ 0xd8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	50000700 	.word	0x50000700
 8003044:	c3210000 	.word	0xc3210000
 8003048:	90c00010 	.word	0x90c00010
 800304c:	50000600 	.word	0x50000600
 8003050:	50000100 	.word	0x50000100
 8003054:	50000300 	.word	0x50000300
 8003058:	20000008 	.word	0x20000008
 800305c:	053e2d63 	.word	0x053e2d63
 8003060:	c7520000 	.word	0xc7520000
 8003064:	50000500 	.word	0x50000500
 8003068:	cb840000 	.word	0xcb840000

0800306c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe ff90 	bl	8001fa8 <LL_ADC_REG_IsConversionOngoing>
 8003088:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe ffb1 	bl	8001ff6 <LL_ADC_INJ_IsConversionOngoing>
 8003094:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d103      	bne.n	80030a4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8098 	beq.w	80031d4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02a      	beq.n	8003108 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7f5b      	ldrb	r3, [r3, #29]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d126      	bne.n	8003108 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7f1b      	ldrb	r3, [r3, #28]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d122      	bne.n	8003108 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80030c2:	2301      	movs	r3, #1
 80030c4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030c6:	e014      	b.n	80030f2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	4a45      	ldr	r2, [pc, #276]	@ (80031e0 <ADC_ConversionStop+0x174>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d90d      	bls.n	80030ec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	f043 0210 	orr.w	r2, r3, #16
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e074      	b.n	80031d6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	3301      	adds	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fc:	2b40      	cmp	r3, #64	@ 0x40
 80030fe:	d1e3      	bne.n	80030c8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2240      	movs	r2, #64	@ 0x40
 8003106:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d014      	beq.n	8003138 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe ff48 	bl	8001fa8 <LL_ADC_REG_IsConversionOngoing>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe ff05 	bl	8001f32 <LL_ADC_IsDisableOngoing>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe ff24 	bl	8001f80 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d014      	beq.n	8003168 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe ff57 	bl	8001ff6 <LL_ADC_INJ_IsConversionOngoing>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe feed 	bl	8001f32 <LL_ADC_IsDisableOngoing>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d104      	bne.n	8003168 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe ff33 	bl	8001fce <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d005      	beq.n	800317a <ADC_ConversionStop+0x10e>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d105      	bne.n	8003180 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003174:	230c      	movs	r3, #12
 8003176:	617b      	str	r3, [r7, #20]
        break;
 8003178:	e005      	b.n	8003186 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800317a:	2308      	movs	r3, #8
 800317c:	617b      	str	r3, [r7, #20]
        break;
 800317e:	e002      	b.n	8003186 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003180:	2304      	movs	r3, #4
 8003182:	617b      	str	r3, [r7, #20]
        break;
 8003184:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003186:	f7fe fcc3 	bl	8001b10 <HAL_GetTick>
 800318a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800318c:	e01b      	b.n	80031c6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800318e:	f7fe fcbf 	bl	8001b10 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b05      	cmp	r3, #5
 800319a:	d914      	bls.n	80031c6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	f043 0210 	orr.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e007      	b.n	80031d6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1dc      	bne.n	800318e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	a33fffff 	.word	0xa33fffff

080031e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe fe89 	bl	8001f0c <LL_ADC_IsEnabled>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d176      	bne.n	80032ee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	4b3c      	ldr	r3, [pc, #240]	@ (80032f8 <ADC_Enable+0x114>)
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e062      	b.n	80032f0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fe44 	bl	8001ebc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800323c:	d004      	beq.n	8003248 <ADC_Enable+0x64>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2e      	ldr	r2, [pc, #184]	@ (80032fc <ADC_Enable+0x118>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <ADC_Enable+0x68>
 8003248:	4b2d      	ldr	r3, [pc, #180]	@ (8003300 <ADC_Enable+0x11c>)
 800324a:	e000      	b.n	800324e <ADC_Enable+0x6a>
 800324c:	4b2d      	ldr	r3, [pc, #180]	@ (8003304 <ADC_Enable+0x120>)
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fc90 	bl	8001b74 <LL_ADC_GetCommonPathInternalCh>
 8003254:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800325a:	2b00      	cmp	r3, #0
 800325c:	d013      	beq.n	8003286 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800325e:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <ADC_Enable+0x124>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	4a29      	ldr	r2, [pc, #164]	@ (800330c <ADC_Enable+0x128>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	099b      	lsrs	r3, r3, #6
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003278:	e002      	b.n	8003280 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	3b01      	subs	r3, #1
 800327e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f9      	bne.n	800327a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003286:	f7fe fc43 	bl	8001b10 <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800328c:	e028      	b.n	80032e0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe fe3a 	bl	8001f0c <LL_ADC_IsEnabled>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fe0a 	bl	8001ebc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032a8:	f7fe fc32 	bl	8001b10 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d914      	bls.n	80032e0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d00d      	beq.n	80032e0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c8:	f043 0210 	orr.w	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e007      	b.n	80032f0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d1cf      	bne.n	800328e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	8000003f 	.word	0x8000003f
 80032fc:	50000100 	.word	0x50000100
 8003300:	50000300 	.word	0x50000300
 8003304:	50000700 	.word	0x50000700
 8003308:	20000008 	.word	0x20000008
 800330c:	053e2d63 	.word	0x053e2d63

08003310 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fe08 	bl	8001f32 <LL_ADC_IsDisableOngoing>
 8003322:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fdef 	bl	8001f0c <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d047      	beq.n	80033c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d144      	bne.n	80033c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030d 	and.w	r3, r3, #13
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10c      	bne.n	8003362 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe fdc9 	bl	8001ee4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2203      	movs	r2, #3
 8003358:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800335a:	f7fe fbd9 	bl	8001b10 <HAL_GetTick>
 800335e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003360:	e029      	b.n	80033b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	f043 0210 	orr.w	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e023      	b.n	80033c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800337e:	f7fe fbc7 	bl	8001b10 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d914      	bls.n	80033b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	f043 0210 	orr.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e007      	b.n	80033c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1dc      	bne.n	800337e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <LL_ADC_SetCommonPathInternalCh>:
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_ADC_GetCommonPathInternalCh>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_ADC_SetOffset>:
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3360      	adds	r3, #96	@ 0x60
 8003422:	461a      	mov	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b08      	ldr	r3, [pc, #32]	@ (8003454 <LL_ADC_SetOffset+0x44>)
 8003432:	4013      	ands	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	4313      	orrs	r3, r2
 8003440:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	601a      	str	r2, [r3, #0]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	03fff000 	.word	0x03fff000

08003458 <LL_ADC_GetOffsetChannel>:
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3360      	adds	r3, #96	@ 0x60
 8003466:	461a      	mov	r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_SetOffsetState>:
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3360      	adds	r3, #96	@ 0x60
 8003494:	461a      	mov	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <LL_ADC_SetOffsetSign>:
{
 80034ba:	b480      	push	{r7}
 80034bc:	b087      	sub	sp, #28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3360      	adds	r3, #96	@ 0x60
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	431a      	orrs	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_SetOffsetSaturation>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3360      	adds	r3, #96	@ 0x60
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	431a      	orrs	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	601a      	str	r2, [r3, #0]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	615a      	str	r2, [r3, #20]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_ADC_SetChannelSamplingTime>:
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3314      	adds	r3, #20
 800355c:	461a      	mov	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	0e5b      	lsrs	r3, r3, #25
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	4413      	add	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	0d1b      	lsrs	r3, r3, #20
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2107      	movs	r1, #7
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	401a      	ands	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	0d1b      	lsrs	r3, r3, #20
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	431a      	orrs	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	601a      	str	r2, [r3, #0]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <LL_ADC_SetChannelSingleDiff>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035bc:	43db      	mvns	r3, r3
 80035be:	401a      	ands	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f003 0318 	and.w	r3, r3, #24
 80035c6:	4908      	ldr	r1, [pc, #32]	@ (80035e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80035c8:	40d9      	lsrs	r1, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	400b      	ands	r3, r1
 80035ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d2:	431a      	orrs	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	0007ffff 	.word	0x0007ffff

080035ec <LL_ADC_IsEnabled>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <LL_ADC_IsEnabled+0x18>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <LL_ADC_IsEnabled+0x1a>
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_ADC_REG_IsConversionOngoing>:
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b04      	cmp	r3, #4
 8003624:	d101      	bne.n	800362a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d101      	bne.n	8003650 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0b6      	sub	sp, #216	@ 0xd8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003680:	2b01      	cmp	r3, #1
 8003682:	d102      	bne.n	800368a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003684:	2302      	movs	r3, #2
 8003686:	f000 bcfd 	b.w	8004084 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d130      	bne.n	8003704 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b09      	cmp	r3, #9
 80036a8:	d179      	bne.n	800379e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d010      	beq.n	80036d4 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0e9b      	lsrs	r3, r3, #26
 80036b8:	025b      	lsls	r3, r3, #9
 80036ba:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80036c6:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036d2:	e007      	b.n	80036e4 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	025b      	lsls	r3, r3, #9
 80036dc:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80036e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036ea:	4b84      	ldr	r3, [pc, #528]	@ (80038fc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80036f6:	430b      	orrs	r3, r1
 80036f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003700:	665a      	str	r2, [r3, #100]	@ 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003702:	e04c      	b.n	800379e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11d      	bne.n	8003748 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372c:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8003730:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800373c:	e004      	b.n	8003748 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	3b01      	subs	r3, #1
 8003744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0e9b      	lsrs	r3, r3, #26
 800374e:	f003 021f 	and.w	r2, r3, #31
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800376c:	1e5a      	subs	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	669a      	str	r2, [r3, #104]	@ 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003776:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800378e:	4b5b      	ldr	r3, [pc, #364]	@ (80038fc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	430b      	orrs	r3, r1
 800379c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff ff48 	bl	8003638 <LL_ADC_INJ_IsConversionOngoing>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d124      	bne.n	80037f8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d112      	bne.n	80037de <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80037c8:	055a      	lsls	r2, r3, #21
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037d0:	051b      	lsls	r3, r3, #20
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	60da      	str	r2, [r3, #12]
 80037dc:	e00c      	b.n	80037f8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80037ee:	055a      	lsls	r2, r3, #21
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff ff08 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 8003802:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff14 	bl	8003638 <LL_ADC_INJ_IsConversionOngoing>
 8003810:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003814:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003818:	2b00      	cmp	r3, #0
 800381a:	f040 822e 	bne.w	8003c7a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800381e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 8229 	bne.w	8003c7a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d116      	bne.n	8003866 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800383e:	2b01      	cmp	r3, #1
 8003840:	d108      	bne.n	8003854 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003850:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003852:	e01f      	b.n	8003894 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003862:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003864:	e016      	b.n	8003894 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800386c:	2b01      	cmp	r3, #1
 800386e:	d109      	bne.n	8003884 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	65da      	str	r2, [r3, #92]	@ 0x5c

        tmp_hal_status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003882:	e007      	b.n	8003894 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8003892:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800389a:	2b01      	cmp	r3, #1
 800389c:	d110      	bne.n	80038c0 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f423 72ff 	bic.w	r2, r3, #510	@ 0x1fe
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	430b      	orrs	r3, r1
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0202 	orr.w	r2, r2, #2
 80038bc:	611a      	str	r2, [r3, #16]
 80038be:	e007      	b.n	80038d0 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0202 	bic.w	r2, r2, #2
 80038ce:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038d8:	d112      	bne.n	8003900 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	4619      	mov	r1, r3
 80038e6:	f7ff fe31 	bl	800354c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fe17 	bl	8003526 <LL_ADC_SetSamplingTimeCommonConfig>
 80038f8:	e011      	b.n	800391e <HAL_ADCEx_InjectedConfigChannel+0x2be>
 80038fa:	bf00      	nop
 80038fc:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800390c:	461a      	mov	r2, r3
 800390e:	f7ff fe1d 	bl	800354c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fe04 	bl	8003526 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	08db      	lsrs	r3, r3, #3
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d022      	beq.n	8003986 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6919      	ldr	r1, [r3, #16]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003950:	f7ff fd5e 	bl	8003410 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6919      	ldr	r1, [r3, #16]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	461a      	mov	r2, r3
 8003962:	f7ff fdaa 	bl	80034ba <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800397a:	e000      	b.n	800397e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800397c:	2300      	movs	r3, #0
 800397e:	461a      	mov	r2, r3
 8003980:	f7ff fdb6 	bl	80034f0 <LL_ADC_SetOffsetSaturation>
 8003984:	e179      	b.n	8003c7a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fd63 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003992:	4603      	mov	r3, r0
 8003994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fd58 	bl	8003458 <LL_ADC_GetOffsetChannel>
 80039a8:	4603      	mov	r3, r0
 80039aa:	0e9b      	lsrs	r3, r3, #26
 80039ac:	f003 021f 	and.w	r2, r3, #31
 80039b0:	e01e      	b.n	80039f0 <HAL_ADCEx_InjectedConfigChannel+0x390>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fd4d 	bl	8003458 <LL_ADC_GetOffsetChannel>
 80039be:	4603      	mov	r3, r0
 80039c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80039d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80039d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 80039e0:	2320      	movs	r3, #32
 80039e2:	e004      	b.n	80039ee <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 80039e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	e018      	b.n	8003a3a <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003a24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	e004      	b.n	8003a3a <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003a30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d106      	bne.n	8003a4c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fd1c 	bl	8003484 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fd00 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fcf5 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	f003 021f 	and.w	r2, r3, #31
 8003a76:	e01e      	b.n	8003ab6 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fcea 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003aa6:	2320      	movs	r3, #32
 8003aa8:	e004      	b.n	8003ab4 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	0e9b      	lsrs	r3, r3, #26
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	e018      	b.n	8003b00 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ae6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003af2:	2320      	movs	r3, #32
 8003af4:	e004      	b.n	8003b00 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d106      	bne.n	8003b12 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fcb9 	bl	8003484 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fc9d 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fc92 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	0e9b      	lsrs	r3, r3, #26
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	e01e      	b.n	8003b7c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2102      	movs	r1, #2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fc87 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003b6c:	2320      	movs	r3, #32
 8003b6e:	e004      	b.n	8003b7a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	e014      	b.n	8003bbe <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e004      	b.n	8003bbe <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8003bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d106      	bne.n	8003bd0 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2102      	movs	r1, #2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fc5a 	bl	8003484 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fc3e 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2103      	movs	r1, #3
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fc33 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	0e9b      	lsrs	r3, r3, #26
 8003bf6:	f003 021f 	and.w	r2, r3, #31
 8003bfa:	e017      	b.n	8003c2c <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2103      	movs	r1, #3
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fc28 	bl	8003458 <LL_ADC_GetOffsetChannel>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c16:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8003c1e:	2320      	movs	r3, #32
 8003c20:	e003      	b.n	8003c2a <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8003c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	0e9b      	lsrs	r3, r3, #26
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	e011      	b.n	8003c68 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c54:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e003      	b.n	8003c68 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8003c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d106      	bne.n	8003c7a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	2103      	movs	r1, #3
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fc05 	bl	8003484 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fcb4 	bl	80035ec <LL_ADC_IsEnabled>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 813d 	bne.w	8003f06 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f7ff fc83 	bl	80035a4 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4aa2      	ldr	r2, [pc, #648]	@ (8003f2c <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	f040 812e 	bne.w	8003f06 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	0e9b      	lsrs	r3, r3, #26
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2b09      	cmp	r3, #9
 8003cc8:	bf94      	ite	ls
 8003cca:	2301      	movls	r3, #1
 8003ccc:	2300      	movhi	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	e019      	b.n	8003d06 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8003cea:	2320      	movs	r3, #32
 8003cec:	e003      	b.n	8003cf6 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8003cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	2b09      	cmp	r3, #9
 8003cfe:	bf94      	ite	ls
 8003d00:	2301      	movls	r3, #1
 8003d02:	2300      	movhi	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d079      	beq.n	8003dfe <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	0e9b      	lsrs	r3, r3, #26
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	069b      	lsls	r3, r3, #26
 8003d20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d24:	e015      	b.n	8003d52 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d36:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003d3e:	2320      	movs	r3, #32
 8003d40:	e003      	b.n	8003d4a <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8003d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	069b      	lsls	r3, r3, #26
 8003d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0e9b      	lsrs	r3, r3, #26
 8003d64:	3301      	adds	r3, #1
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	e017      	b.n	8003da2 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d82:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	e003      	b.n	8003d96 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8003d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	ea42 0103 	orr.w	r1, r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 021f 	and.w	r2, r3, #31
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	051b      	lsls	r3, r3, #20
 8003dc6:	e018      	b.n	8003dfa <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd0:	fa93 f3a3 	rbit	r3, r3
 8003dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8003de0:	2320      	movs	r3, #32
 8003de2:	e003      	b.n	8003dec <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8003de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	3301      	adds	r3, #1
 8003dee:	f003 021f 	and.w	r2, r3, #31
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	e07e      	b.n	8003efc <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d107      	bne.n	8003e1a <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	0e9b      	lsrs	r3, r3, #26
 8003e10:	3301      	adds	r3, #1
 8003e12:	069b      	lsls	r3, r3, #26
 8003e14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e18:	e015      	b.n	8003e46 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8003e32:	2320      	movs	r3, #32
 8003e34:	e003      	b.n	8003e3e <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	069b      	lsls	r3, r3, #26
 8003e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0e9b      	lsrs	r3, r3, #26
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2101      	movs	r1, #1
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	e017      	b.n	8003e96 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	61bb      	str	r3, [r7, #24]
  return result;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	e003      	b.n	8003e8a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	ea42 0103 	orr.w	r1, r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	0e9b      	lsrs	r3, r3, #26
 8003eac:	3301      	adds	r3, #1
 8003eae:	f003 021f 	and.w	r2, r3, #31
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3b1e      	subs	r3, #30
 8003eba:	051b      	lsls	r3, r3, #20
 8003ebc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ec0:	e01b      	b.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	60fb      	str	r3, [r7, #12]
  return result;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8003eda:	2320      	movs	r3, #32
 8003edc:	e003      	b.n	8003ee6 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f003 021f 	and.w	r2, r3, #31
 8003eec:	4613      	mov	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3b1e      	subs	r3, #30
 8003ef4:	051b      	lsls	r3, r3, #20
 8003ef6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003efa:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7ff fb23 	bl	800354c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80b2 	beq.w	8004078 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f1c:	d004      	beq.n	8003f28 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a04      	ldr	r2, [pc, #16]	@ (8003f34 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8003f28:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8003f2a:	e008      	b.n	8003f3e <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8003f2c:	407f0000 	.word	0x407f0000
 8003f30:	80080000 	.word	0x80080000
 8003f34:	50000100 	.word	0x50000100
 8003f38:	50000300 	.word	0x50000300
 8003f3c:	4b53      	ldr	r3, [pc, #332]	@ (800408c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fa58 	bl	80033f4 <LL_ADC_GetCommonPathInternalCh>
 8003f44:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a50      	ldr	r2, [pc, #320]	@ (8004090 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a4f      	ldr	r2, [pc, #316]	@ (8004094 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d139      	bne.n	8003fd0 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d133      	bne.n	8003fd0 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f70:	d004      	beq.n	8003f7c <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a48      	ldr	r2, [pc, #288]	@ (8004098 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d17a      	bne.n	8004072 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f84:	d004      	beq.n	8003f90 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a44      	ldr	r2, [pc, #272]	@ (800409c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8003f90:	4a43      	ldr	r2, [pc, #268]	@ (80040a0 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8003f92:	e000      	b.n	8003f96 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8003f94:	4a3d      	ldr	r2, [pc, #244]	@ (800408c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8003f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7ff fa14 	bl	80033ce <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80040a4 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	099b      	lsrs	r3, r3, #6
 8003fac:	4a3e      	ldr	r2, [pc, #248]	@ (80040a8 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	099a      	lsrs	r2, r3, #6
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003fbe:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003fc0:	e002      	b.n	8003fc8 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f9      	bne.n	8003fc2 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fce:	e050      	b.n	8004072 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a35      	ldr	r2, [pc, #212]	@ (80040ac <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d125      	bne.n	8004026 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11f      	bne.n	8004026 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2c      	ldr	r2, [pc, #176]	@ (800409c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d104      	bne.n	8003ffa <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80040b0 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d03d      	beq.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004002:	d004      	beq.n	800400e <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a24      	ldr	r2, [pc, #144]	@ (800409c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 800400e:	4a24      	ldr	r2, [pc, #144]	@ (80040a0 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004010:	e000      	b.n	8004014 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8004012:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004018:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f7ff f9d5 	bl	80033ce <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004024:	e027      	b.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a22      	ldr	r2, [pc, #136]	@ (80040b4 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d123      	bne.n	8004078 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004030:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11d      	bne.n	8004078 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a16      	ldr	r2, [pc, #88]	@ (800409c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800404e:	d004      	beq.n	800405a <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a11      	ldr	r2, [pc, #68]	@ (800409c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 800405a:	4a11      	ldr	r2, [pc, #68]	@ (80040a0 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800405c:	e000      	b.n	8004060 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 800405e:	4a0b      	ldr	r2, [pc, #44]	@ (800408c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004060:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004064:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f7ff f9af 	bl	80033ce <LL_ADC_SetCommonPathInternalCh>
 8004070:	e002      	b.n	8004078 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004076:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004080:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004084:	4618      	mov	r0, r3
 8004086:	37d8      	adds	r7, #216	@ 0xd8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	50000700 	.word	0x50000700
 8004090:	c3210000 	.word	0xc3210000
 8004094:	90c00010 	.word	0x90c00010
 8004098:	50000600 	.word	0x50000600
 800409c:	50000100 	.word	0x50000100
 80040a0:	50000300 	.word	0x50000300
 80040a4:	20000008 	.word	0x20000008
 80040a8:	053e2d63 	.word	0x053e2d63
 80040ac:	c7520000 	.word	0xc7520000
 80040b0:	50000500 	.word	0x50000500
 80040b4:	cb840000 	.word	0xcb840000

080040b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b0a1      	sub	sp, #132	@ 0x84
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e0e7      	b.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80040de:	2300      	movs	r3, #0
 80040e0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80040e2:	2300      	movs	r3, #0
 80040e4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ee:	d102      	bne.n	80040f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040f0:	4b6f      	ldr	r3, [pc, #444]	@ (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	e009      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6e      	ldr	r2, [pc, #440]	@ (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d102      	bne.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004100:	4b6d      	ldr	r3, [pc, #436]	@ (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	e001      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10b      	bne.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0be      	b.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fa71 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 8004130:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fa6b 	bl	8003612 <LL_ADC_REG_IsConversionOngoing>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 80a0 	bne.w	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004144:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 809c 	bne.w	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004154:	d004      	beq.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a55      	ldr	r2, [pc, #340]	@ (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004160:	4b56      	ldr	r3, [pc, #344]	@ (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004162:	e000      	b.n	8004166 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004164:	4b56      	ldr	r3, [pc, #344]	@ (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004166:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d04b      	beq.n	8004208 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004182:	035b      	lsls	r3, r3, #13
 8004184:	430b      	orrs	r3, r1
 8004186:	431a      	orrs	r2, r3
 8004188:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800418a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004194:	d004      	beq.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a45      	ldr	r2, [pc, #276]	@ (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10f      	bne.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80041a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80041a4:	f7ff fa22 	bl	80035ec <LL_ADC_IsEnabled>
 80041a8:	4604      	mov	r4, r0
 80041aa:	4841      	ldr	r0, [pc, #260]	@ (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041ac:	f7ff fa1e 	bl	80035ec <LL_ADC_IsEnabled>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4323      	orrs	r3, r4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e012      	b.n	80041e6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80041c0:	483c      	ldr	r0, [pc, #240]	@ (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041c2:	f7ff fa13 	bl	80035ec <LL_ADC_IsEnabled>
 80041c6:	4604      	mov	r4, r0
 80041c8:	483b      	ldr	r0, [pc, #236]	@ (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041ca:	f7ff fa0f 	bl	80035ec <LL_ADC_IsEnabled>
 80041ce:	4603      	mov	r3, r0
 80041d0:	431c      	orrs	r4, r3
 80041d2:	483c      	ldr	r0, [pc, #240]	@ (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041d4:	f7ff fa0a 	bl	80035ec <LL_ADC_IsEnabled>
 80041d8:	4603      	mov	r3, r0
 80041da:	4323      	orrs	r3, r4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d056      	beq.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80041f2:	f023 030f 	bic.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	6811      	ldr	r1, [r2, #0]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	430a      	orrs	r2, r1
 8004200:	431a      	orrs	r2, r3
 8004202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004204:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004206:	e047      	b.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004208:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004212:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800421c:	d004      	beq.n	8004228 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a23      	ldr	r2, [pc, #140]	@ (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d10f      	bne.n	8004248 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004228:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800422c:	f7ff f9de 	bl	80035ec <LL_ADC_IsEnabled>
 8004230:	4604      	mov	r4, r0
 8004232:	481f      	ldr	r0, [pc, #124]	@ (80042b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004234:	f7ff f9da 	bl	80035ec <LL_ADC_IsEnabled>
 8004238:	4603      	mov	r3, r0
 800423a:	4323      	orrs	r3, r4
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e012      	b.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004248:	481a      	ldr	r0, [pc, #104]	@ (80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800424a:	f7ff f9cf 	bl	80035ec <LL_ADC_IsEnabled>
 800424e:	4604      	mov	r4, r0
 8004250:	4819      	ldr	r0, [pc, #100]	@ (80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004252:	f7ff f9cb 	bl	80035ec <LL_ADC_IsEnabled>
 8004256:	4603      	mov	r3, r0
 8004258:	431c      	orrs	r4, r3
 800425a:	481a      	ldr	r0, [pc, #104]	@ (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800425c:	f7ff f9c6 	bl	80035ec <LL_ADC_IsEnabled>
 8004260:	4603      	mov	r3, r0
 8004262:	4323      	orrs	r3, r4
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d012      	beq.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800427a:	f023 030f 	bic.w	r3, r3, #15
 800427e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004280:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004282:	e009      	b.n	8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004288:	f043 0220 	orr.w	r2, r3, #32
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004296:	e000      	b.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004298:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80042a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3784      	adds	r7, #132	@ 0x84
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd90      	pop	{r4, r7, pc}
 80042ae:	bf00      	nop
 80042b0:	50000100 	.word	0x50000100
 80042b4:	50000400 	.word	0x50000400
 80042b8:	50000500 	.word	0x50000500
 80042bc:	50000300 	.word	0x50000300
 80042c0:	50000700 	.word	0x50000700
 80042c4:	50000600 	.word	0x50000600

080042c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d8:	4b0c      	ldr	r3, [pc, #48]	@ (800430c <__NVIC_SetPriorityGrouping+0x44>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042e4:	4013      	ands	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042fa:	4a04      	ldr	r2, [pc, #16]	@ (800430c <__NVIC_SetPriorityGrouping+0x44>)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	60d3      	str	r3, [r2, #12]
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004314:	4b04      	ldr	r3, [pc, #16]	@ (8004328 <__NVIC_GetPriorityGrouping+0x18>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 0307 	and.w	r3, r3, #7
}
 800431e:	4618      	mov	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	db0b      	blt.n	8004356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	f003 021f 	and.w	r2, r3, #31
 8004344:	4907      	ldr	r1, [pc, #28]	@ (8004364 <__NVIC_EnableIRQ+0x38>)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2001      	movs	r0, #1
 800434e:	fa00 f202 	lsl.w	r2, r0, r2
 8004352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	e000e100 	.word	0xe000e100

08004368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	6039      	str	r1, [r7, #0]
 8004372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004378:	2b00      	cmp	r3, #0
 800437a:	db0a      	blt.n	8004392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	b2da      	uxtb	r2, r3
 8004380:	490c      	ldr	r1, [pc, #48]	@ (80043b4 <__NVIC_SetPriority+0x4c>)
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	0112      	lsls	r2, r2, #4
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	440b      	add	r3, r1
 800438c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004390:	e00a      	b.n	80043a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	4908      	ldr	r1, [pc, #32]	@ (80043b8 <__NVIC_SetPriority+0x50>)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	3b04      	subs	r3, #4
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	440b      	add	r3, r1
 80043a6:	761a      	strb	r2, [r3, #24]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000e100 	.word	0xe000e100
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	@ 0x24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f1c3 0307 	rsb	r3, r3, #7
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	bf28      	it	cs
 80043da:	2304      	movcs	r3, #4
 80043dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d902      	bls.n	80043ec <NVIC_EncodePriority+0x30>
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3b03      	subs	r3, #3
 80043ea:	e000      	b.n	80043ee <NVIC_EncodePriority+0x32>
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	f04f 32ff 	mov.w	r2, #4294967295
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	401a      	ands	r2, r3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004404:	f04f 31ff 	mov.w	r1, #4294967295
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	43d9      	mvns	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004414:	4313      	orrs	r3, r2
         );
}
 8004416:	4618      	mov	r0, r3
 8004418:	3724      	adds	r7, #36	@ 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3b01      	subs	r3, #1
 8004430:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004434:	d301      	bcc.n	800443a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004436:	2301      	movs	r3, #1
 8004438:	e00f      	b.n	800445a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800443a:	4a0a      	ldr	r2, [pc, #40]	@ (8004464 <SysTick_Config+0x40>)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3b01      	subs	r3, #1
 8004440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004442:	210f      	movs	r1, #15
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	f7ff ff8e 	bl	8004368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800444c:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <SysTick_Config+0x40>)
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004452:	4b04      	ldr	r3, [pc, #16]	@ (8004464 <SysTick_Config+0x40>)
 8004454:	2207      	movs	r2, #7
 8004456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	e000e010 	.word	0xe000e010

08004468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ff29 	bl	80042c8 <__NVIC_SetPriorityGrouping>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af00      	add	r7, sp, #0
 8004484:	4603      	mov	r3, r0
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800448c:	f7ff ff40 	bl	8004310 <__NVIC_GetPriorityGrouping>
 8004490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	6978      	ldr	r0, [r7, #20]
 8004498:	f7ff ff90 	bl	80043bc <NVIC_EncodePriority>
 800449c:	4602      	mov	r2, r0
 800449e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff ff5f 	bl	8004368 <__NVIC_SetPriority>
}
 80044aa:	bf00      	nop
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff33 	bl	800432c <__NVIC_EnableIRQ>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff ffa4 	bl	8004424 <SysTick_Config>
 80044dc:	4603      	mov	r3, r0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e147      	b.n	800478a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fc ff62 	bl	80013d8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0210 	bic.w	r2, r2, #16
 8004522:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004524:	f7fd faf4 	bl	8001b10 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800452a:	e012      	b.n	8004552 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800452c:	f7fd faf0 	bl	8001b10 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b0a      	cmp	r3, #10
 8004538:	d90b      	bls.n	8004552 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e11b      	b.n	800478a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b08      	cmp	r3, #8
 800455e:	d0e5      	beq.n	800452c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004570:	f7fd face 	bl	8001b10 <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004576:	e012      	b.n	800459e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004578:	f7fd faca 	bl	8001b10 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b0a      	cmp	r3, #10
 8004584:	d90b      	bls.n	800459e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2203      	movs	r2, #3
 8004596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0f5      	b.n	800478a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0e5      	beq.n	8004578 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0202 	orr.w	r2, r2, #2
 80045ba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a74      	ldr	r2, [pc, #464]	@ (8004794 <HAL_FDCAN_Init+0x2ac>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d103      	bne.n	80045ce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80045c6:	4a74      	ldr	r2, [pc, #464]	@ (8004798 <HAL_FDCAN_Init+0x2b0>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7c1b      	ldrb	r3, [r3, #16]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d108      	bne.n	80045e8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045e4:	619a      	str	r2, [r3, #24]
 80045e6:	e007      	b.n	80045f8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	7c5b      	ldrb	r3, [r3, #17]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d108      	bne.n	8004612 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800460e:	619a      	str	r2, [r3, #24]
 8004610:	e007      	b.n	8004622 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004620:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7c9b      	ldrb	r3, [r3, #18]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d108      	bne.n	800463c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004638:	619a      	str	r2, [r3, #24]
 800463a:	e007      	b.n	800464c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800464a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699a      	ldr	r2, [r3, #24]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004670:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0210 	bic.w	r2, r2, #16
 8004680:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d108      	bne.n	800469c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0204 	orr.w	r2, r2, #4
 8004698:	619a      	str	r2, [r3, #24]
 800469a:	e02c      	b.n	80046f6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d028      	beq.n	80046f6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d01c      	beq.n	80046e6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046ba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0210 	orr.w	r2, r2, #16
 80046ca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d110      	bne.n	80046f6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0220 	orr.w	r2, r2, #32
 80046e2:	619a      	str	r2, [r3, #24]
 80046e4:	e007      	b.n	80046f6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699a      	ldr	r2, [r3, #24]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0220 	orr.w	r2, r2, #32
 80046f4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	3b01      	subs	r3, #1
 8004704:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004706:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800470e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	3b01      	subs	r3, #1
 8004718:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800471e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004720:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800472a:	d115      	bne.n	8004758 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	3b01      	subs	r3, #1
 8004738:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800473a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	3b01      	subs	r3, #1
 8004742:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004744:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	3b01      	subs	r3, #1
 800474e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004754:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004756:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fab8 	bl	8004ce4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40006400 	.word	0x40006400
 8004798:	40006500 	.word	0x40006500

0800479c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800479c:	b480      	push	{r7}
 800479e:	b08b      	sub	sp, #44	@ 0x2c
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047b4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80047b6:	7efb      	ldrb	r3, [r7, #27]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	f040 80e8 	bne.w	800498e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	d137      	bne.n	8004834 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0db      	b.n	800499c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047f4:	d10a      	bne.n	800480c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004806:	d101      	bne.n	800480c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004808:	2301      	movs	r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
 8004832:	e036      	b.n	80048a2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004848:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0a3      	b.n	800499c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800485c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004864:	d10a      	bne.n	800487c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800486e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004876:	d101      	bne.n	800487c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004878:	2301      	movs	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004884:	0a1b      	lsrs	r3, r3, #8
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	440b      	add	r3, r1
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	0c9b      	lsrs	r3, r3, #18
 80048bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e005      	b.n	80048d2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	3304      	adds	r3, #4
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	0c1b      	lsrs	r3, r3, #16
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0e1b      	lsrs	r3, r3, #24
 8004926:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	0fda      	lsrs	r2, r3, #31
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	3304      	adds	r3, #4
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004942:	2300      	movs	r3, #0
 8004944:	623b      	str	r3, [r7, #32]
 8004946:	e00a      	b.n	800495e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	441a      	add	r2, r3
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	440b      	add	r3, r1
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	3301      	adds	r3, #1
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	4a11      	ldr	r2, [pc, #68]	@ (80049a8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8004964:	5cd3      	ldrb	r3, [r2, r3]
 8004966:	461a      	mov	r2, r3
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	4293      	cmp	r3, r2
 800496c:	d3ec      	bcc.n	8004948 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b40      	cmp	r3, #64	@ 0x40
 8004972:	d105      	bne.n	8004980 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800497e:	e004      	b.n	800498a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e006      	b.n	800499c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004992:	f043 0208 	orr.w	r2, r3, #8
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	372c      	adds	r7, #44	@ 0x2c
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	080095a4 	.word	0x080095a4

080049ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	@ 0x30
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80049be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c8:	4013      	ands	r3, r2
 80049ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049e0:	4013      	ands	r3, r2
 80049e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f8:	4013      	ands	r3, r2
 80049fa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a02:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004a06:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	6a3a      	ldr	r2, [r7, #32]
 8004a10:	4013      	ands	r3, r2
 8004a12:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004a1e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a32:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	099b      	lsrs	r3, r3, #6
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00c      	beq.n	8004a62 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	099b      	lsrs	r3, r3, #6
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d006      	beq.n	8004a62 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2240      	movs	r2, #64	@ 0x40
 8004a5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f922 	bl	8004ca6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	0a1b      	lsrs	r3, r3, #8
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01a      	beq.n	8004aa4 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	0a1b      	lsrs	r3, r3, #8
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d014      	beq.n	8004aa4 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a82:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004a9c:	6939      	ldr	r1, [r7, #16]
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8e2 	bl	8004c68 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ab0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f8ac 	bl	8004c12 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ac6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fb fdbe 	bl	800064c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004adc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004ade:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8a1 	bl	8004c28 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	0a5b      	lsrs	r3, r3, #9
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	0a5b      	lsrs	r3, r3, #9
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b06:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f898 	bl	8004c3e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	09db      	lsrs	r3, r3, #7
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d019      	beq.n	8004b4e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	09db      	lsrs	r3, r3, #7
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d013      	beq.n	8004b4e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004b2e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2280      	movs	r2, #128	@ 0x80
 8004b44:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f882 	bl	8004c52 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	0b5b      	lsrs	r3, r3, #13
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	0b5b      	lsrs	r3, r3, #13
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f884 	bl	8004c7e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	0bdb      	lsrs	r3, r3, #15
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	0bdb      	lsrs	r3, r3, #15
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004b96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f87a 	bl	8004c92 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	0b9b      	lsrs	r3, r3, #14
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d010      	beq.n	8004bcc <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	0b9b      	lsrs	r3, r3, #14
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004bbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004bda:	69f9      	ldr	r1, [r7, #28]
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f876 	bl	8004cce <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6a3a      	ldr	r2, [r7, #32]
 8004bee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f858 	bl	8004cba <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	3730      	adds	r7, #48	@ 0x30
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004cec:	4b30      	ldr	r3, [pc, #192]	@ (8004db0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004cee:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8004db4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d103      	bne.n	8004d02 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004d00:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d103      	bne.n	8004d14 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8004d12:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d22:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2a:	041a      	lsls	r2, r3, #16
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d48:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d50:	061a      	lsls	r2, r3, #24
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	e005      	b.n	8004d96 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3304      	adds	r3, #4
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d3f3      	bcc.n	8004d8a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	4000a400 	.word	0x4000a400
 8004db4:	40006800 	.word	0x40006800
 8004db8:	40006c00 	.word	0x40006c00

08004dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004dca:	e15a      	b.n	8005082 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 814c 	beq.w	800507c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d005      	beq.n	8004dfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d130      	bne.n	8004e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e32:	2201      	movs	r2, #1
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0201 	and.w	r2, r3, #1
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d017      	beq.n	8004e9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2203      	movs	r2, #3
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d123      	bne.n	8004eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	08da      	lsrs	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3208      	adds	r2, #8
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	08da      	lsrs	r2, r3, #3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3208      	adds	r2, #8
 8004ee8:	6939      	ldr	r1, [r7, #16]
 8004eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	2203      	movs	r2, #3
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4013      	ands	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 0203 	and.w	r2, r3, #3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80a6 	beq.w	800507c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f30:	4b5b      	ldr	r3, [pc, #364]	@ (80050a0 <HAL_GPIO_Init+0x2e4>)
 8004f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f34:	4a5a      	ldr	r2, [pc, #360]	@ (80050a0 <HAL_GPIO_Init+0x2e4>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f3c:	4b58      	ldr	r3, [pc, #352]	@ (80050a0 <HAL_GPIO_Init+0x2e4>)
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f48:	4a56      	ldr	r2, [pc, #344]	@ (80050a4 <HAL_GPIO_Init+0x2e8>)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	3302      	adds	r3, #2
 8004f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	220f      	movs	r2, #15
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	43db      	mvns	r3, r3
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f72:	d01f      	beq.n	8004fb4 <HAL_GPIO_Init+0x1f8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a4c      	ldr	r2, [pc, #304]	@ (80050a8 <HAL_GPIO_Init+0x2ec>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d019      	beq.n	8004fb0 <HAL_GPIO_Init+0x1f4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a4b      	ldr	r2, [pc, #300]	@ (80050ac <HAL_GPIO_Init+0x2f0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <HAL_GPIO_Init+0x1f0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a4a      	ldr	r2, [pc, #296]	@ (80050b0 <HAL_GPIO_Init+0x2f4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_GPIO_Init+0x1ec>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a49      	ldr	r2, [pc, #292]	@ (80050b4 <HAL_GPIO_Init+0x2f8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d007      	beq.n	8004fa4 <HAL_GPIO_Init+0x1e8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a48      	ldr	r2, [pc, #288]	@ (80050b8 <HAL_GPIO_Init+0x2fc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d101      	bne.n	8004fa0 <HAL_GPIO_Init+0x1e4>
 8004f9c:	2305      	movs	r3, #5
 8004f9e:	e00a      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fa0:	2306      	movs	r3, #6
 8004fa2:	e008      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	e006      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e004      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e002      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_GPIO_Init+0x1fa>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	f002 0203 	and.w	r2, r2, #3
 8004fbc:	0092      	lsls	r2, r2, #2
 8004fbe:	4093      	lsls	r3, r2
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fc6:	4937      	ldr	r1, [pc, #220]	@ (80050a4 <HAL_GPIO_Init+0x2e8>)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	3302      	adds	r3, #2
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fd4:	4b39      	ldr	r3, [pc, #228]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ff8:	4a30      	ldr	r2, [pc, #192]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	43db      	mvns	r3, r3
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005022:	4a26      	ldr	r2, [pc, #152]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005028:	4b24      	ldr	r3, [pc, #144]	@ (80050bc <HAL_GPIO_Init+0x300>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	43db      	mvns	r3, r3
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800504c:	4a1b      	ldr	r2, [pc, #108]	@ (80050bc <HAL_GPIO_Init+0x300>)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005052:	4b1a      	ldr	r3, [pc, #104]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	43db      	mvns	r3, r3
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005076:	4a11      	ldr	r2, [pc, #68]	@ (80050bc <HAL_GPIO_Init+0x300>)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3301      	adds	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f ae9d 	bne.w	8004dcc <HAL_GPIO_Init+0x10>
  }
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40010000 	.word	0x40010000
 80050a8:	48000400 	.word	0x48000400
 80050ac:	48000800 	.word	0x48000800
 80050b0:	48000c00 	.word	0x48000c00
 80050b4:	48001000 	.word	0x48001000
 80050b8:	48001400 	.word	0x48001400
 80050bc:	40010400 	.word	0x40010400

080050c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	807b      	strh	r3, [r7, #2]
 80050cc:	4613      	mov	r3, r2
 80050ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050d0:	787b      	ldrb	r3, [r7, #1]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050d6:	887a      	ldrh	r2, [r7, #2]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050dc:	e002      	b.n	80050e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050de:	887a      	ldrh	r2, [r7, #2]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005102:	887a      	ldrh	r2, [r7, #2]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4013      	ands	r3, r2
 8005108:	041a      	lsls	r2, r3, #16
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	43d9      	mvns	r1, r3
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	400b      	ands	r3, r1
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	619a      	str	r2, [r3, #24]
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d141      	bne.n	80051b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005132:	4b4b      	ldr	r3, [pc, #300]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800513a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513e:	d131      	bne.n	80051a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005140:	4b47      	ldr	r3, [pc, #284]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005146:	4a46      	ldr	r2, [pc, #280]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800514c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005150:	4b43      	ldr	r3, [pc, #268]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005158:	4a41      	ldr	r2, [pc, #260]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800515e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005160:	4b40      	ldr	r3, [pc, #256]	@ (8005264 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2232      	movs	r2, #50	@ 0x32
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	4a3f      	ldr	r2, [pc, #252]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	0c9b      	lsrs	r3, r3, #18
 8005172:	3301      	adds	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005176:	e002      	b.n	800517e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3b01      	subs	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800517e:	4b38      	ldr	r3, [pc, #224]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518a:	d102      	bne.n	8005192 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f2      	bne.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005192:	4b33      	ldr	r3, [pc, #204]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800519e:	d158      	bne.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e057      	b.n	8005254 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051b4:	e04d      	b.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051bc:	d141      	bne.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051be:	4b28      	ldr	r3, [pc, #160]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ca:	d131      	bne.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051cc:	4b24      	ldr	r3, [pc, #144]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051d2:	4a23      	ldr	r2, [pc, #140]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051dc:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005264 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2232      	movs	r2, #50	@ 0x32
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	0c9b      	lsrs	r3, r3, #18
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005202:	e002      	b.n	800520a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3b01      	subs	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800520a:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005216:	d102      	bne.n	800521e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f2      	bne.n	8005204 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800521e:	4b10      	ldr	r3, [pc, #64]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522a:	d112      	bne.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e011      	b.n	8005254 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005230:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005236:	4a0a      	ldr	r2, [pc, #40]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800523c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005240:	e007      	b.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005242:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800524a:	4a05      	ldr	r2, [pc, #20]	@ (8005260 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005250:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40007000 	.word	0x40007000
 8005264:	20000008 	.word	0x20000008
 8005268:	431bde83 	.word	0x431bde83

0800526c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4a04      	ldr	r2, [pc, #16]	@ (8005288 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800527a:	6093      	str	r3, [r2, #8]
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40007000 	.word	0x40007000

0800528c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e2fe      	b.n	800589c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d075      	beq.n	8005396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052aa:	4b97      	ldr	r3, [pc, #604]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b4:	4b94      	ldr	r3, [pc, #592]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_OscConfig+0x3e>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_OscConfig+0x44>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d10b      	bne.n	80052e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	4b8d      	ldr	r3, [pc, #564]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05b      	beq.n	8005394 <HAL_RCC_OscConfig+0x108>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d157      	bne.n	8005394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e2d9      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f0:	d106      	bne.n	8005300 <HAL_RCC_OscConfig+0x74>
 80052f2:	4b85      	ldr	r3, [pc, #532]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a84      	ldr	r2, [pc, #528]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e01d      	b.n	800533c <HAL_RCC_OscConfig+0xb0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x98>
 800530a:	4b7f      	ldr	r3, [pc, #508]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a7e      	ldr	r2, [pc, #504]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	4b7c      	ldr	r3, [pc, #496]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a7b      	ldr	r2, [pc, #492]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0xb0>
 8005324:	4b78      	ldr	r3, [pc, #480]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a77      	ldr	r2, [pc, #476]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800532a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	4b75      	ldr	r3, [pc, #468]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a74      	ldr	r2, [pc, #464]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800533a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fc fbe4 	bl	8001b10 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800534c:	f7fc fbe0 	bl	8001b10 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	@ 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e29e      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800535e:	4b6a      	ldr	r3, [pc, #424]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0xc0>
 800536a:	e014      	b.n	8005396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fc fbd0 	bl	8001b10 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005374:	f7fc fbcc 	bl	8001b10 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	@ 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e28a      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005386:	4b60      	ldr	r3, [pc, #384]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0xe8>
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d075      	beq.n	800548e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a2:	4b59      	ldr	r3, [pc, #356]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ac:	4b56      	ldr	r3, [pc, #344]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b0c      	cmp	r3, #12
 80053ba:	d102      	bne.n	80053c2 <HAL_RCC_OscConfig+0x136>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d002      	beq.n	80053c8 <HAL_RCC_OscConfig+0x13c>
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d11f      	bne.n	8005408 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_OscConfig+0x154>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e25d      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e0:	4b49      	ldr	r3, [pc, #292]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	4946      	ldr	r1, [pc, #280]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053f4:	4b45      	ldr	r3, [pc, #276]	@ (800550c <HAL_RCC_OscConfig+0x280>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fc fb3d 	bl	8001a78 <HAL_InitTick>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d043      	beq.n	800548c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e249      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d023      	beq.n	8005458 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005410:	4b3d      	ldr	r3, [pc, #244]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a3c      	ldr	r2, [pc, #240]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800541a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fc fb78 	bl	8001b10 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005424:	f7fc fb74 	bl	8001b10 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e232      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005436:	4b34      	ldr	r3, [pc, #208]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	4b31      	ldr	r3, [pc, #196]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	061b      	lsls	r3, r3, #24
 8005450:	492d      	ldr	r1, [pc, #180]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005452:	4313      	orrs	r3, r2
 8005454:	604b      	str	r3, [r1, #4]
 8005456:	e01a      	b.n	800548e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005458:	4b2b      	ldr	r3, [pc, #172]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a2a      	ldr	r2, [pc, #168]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 800545e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fc fb54 	bl	8001b10 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546c:	f7fc fb50 	bl	8001b10 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e20e      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800547e:	4b22      	ldr	r3, [pc, #136]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x1e0>
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800548c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d041      	beq.n	800551e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01c      	beq.n	80054dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a2:	4b19      	ldr	r3, [pc, #100]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a8:	4a17      	ldr	r2, [pc, #92]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b2:	f7fc fb2d 	bl	8001b10 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ba:	f7fc fb29 	bl	8001b10 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e1e7      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ef      	beq.n	80054ba <HAL_RCC_OscConfig+0x22e>
 80054da:	e020      	b.n	800551e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e2:	4a09      	ldr	r2, [pc, #36]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fc fb10 	bl	8001b10 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054f2:	e00d      	b.n	8005510 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f4:	f7fc fb0c 	bl	8001b10 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d906      	bls.n	8005510 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e1ca      	b.n	800589c <HAL_RCC_OscConfig+0x610>
 8005506:	bf00      	nop
 8005508:	40021000 	.word	0x40021000
 800550c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005510:	4b8c      	ldr	r3, [pc, #560]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ea      	bne.n	80054f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80a6 	beq.w	8005678 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552c:	2300      	movs	r3, #0
 800552e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005530:	4b84      	ldr	r3, [pc, #528]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_OscConfig+0x2b4>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <HAL_RCC_OscConfig+0x2b6>
 8005540:	2300      	movs	r3, #0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00d      	beq.n	8005562 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005546:	4b7f      	ldr	r3, [pc, #508]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554a:	4a7e      	ldr	r2, [pc, #504]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800554c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005550:	6593      	str	r3, [r2, #88]	@ 0x58
 8005552:	4b7c      	ldr	r3, [pc, #496]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800555e:	2301      	movs	r3, #1
 8005560:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005562:	4b79      	ldr	r3, [pc, #484]	@ (8005748 <HAL_RCC_OscConfig+0x4bc>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d118      	bne.n	80055a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800556e:	4b76      	ldr	r3, [pc, #472]	@ (8005748 <HAL_RCC_OscConfig+0x4bc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a75      	ldr	r2, [pc, #468]	@ (8005748 <HAL_RCC_OscConfig+0x4bc>)
 8005574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557a:	f7fc fac9 	bl	8001b10 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005582:	f7fc fac5 	bl	8001b10 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e183      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005594:	4b6c      	ldr	r3, [pc, #432]	@ (8005748 <HAL_RCC_OscConfig+0x4bc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d108      	bne.n	80055ba <HAL_RCC_OscConfig+0x32e>
 80055a8:	4b66      	ldr	r3, [pc, #408]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ae:	4a65      	ldr	r2, [pc, #404]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055b8:	e024      	b.n	8005604 <HAL_RCC_OscConfig+0x378>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d110      	bne.n	80055e4 <HAL_RCC_OscConfig+0x358>
 80055c2:	4b60      	ldr	r3, [pc, #384]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055ca:	f043 0304 	orr.w	r3, r3, #4
 80055ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055e2:	e00f      	b.n	8005604 <HAL_RCC_OscConfig+0x378>
 80055e4:	4b57      	ldr	r3, [pc, #348]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ea:	4a56      	ldr	r2, [pc, #344]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f4:	4b53      	ldr	r3, [pc, #332]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	4a52      	ldr	r2, [pc, #328]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80055fc:	f023 0304 	bic.w	r3, r3, #4
 8005600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d016      	beq.n	800563a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fc fa80 	bl	8001b10 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005612:	e00a      	b.n	800562a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005614:	f7fc fa7c 	bl	8001b10 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e138      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562a:	4b46      	ldr	r3, [pc, #280]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0ed      	beq.n	8005614 <HAL_RCC_OscConfig+0x388>
 8005638:	e015      	b.n	8005666 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563a:	f7fc fa69 	bl	8001b10 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005642:	f7fc fa65 	bl	8001b10 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e121      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005658:	4b3a      	ldr	r3, [pc, #232]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1ed      	bne.n	8005642 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005666:	7ffb      	ldrb	r3, [r7, #31]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d105      	bne.n	8005678 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800566c:	4b35      	ldr	r3, [pc, #212]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800566e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005670:	4a34      	ldr	r2, [pc, #208]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005676:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d03c      	beq.n	80056fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01c      	beq.n	80056c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800568c:	4b2d      	ldr	r3, [pc, #180]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800568e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005692:	4a2c      	ldr	r2, [pc, #176]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569c:	f7fc fa38 	bl	8001b10 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a4:	f7fc fa34 	bl	8001b10 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e0f2      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056b6:	4b23      	ldr	r3, [pc, #140]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80056b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ef      	beq.n	80056a4 <HAL_RCC_OscConfig+0x418>
 80056c4:	e01b      	b.n	80056fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80056c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d6:	f7fc fa1b 	bl	8001b10 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056de:	f7fc fa17 	bl	8001b10 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0d5      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056f0:	4b14      	ldr	r3, [pc, #80]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 80056f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ef      	bne.n	80056de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80c9 	beq.w	800589a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005708:	4b0e      	ldr	r3, [pc, #56]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	2b0c      	cmp	r3, #12
 8005712:	f000 8083 	beq.w	800581c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d15e      	bne.n	80057dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571e:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a08      	ldr	r2, [pc, #32]	@ (8005744 <HAL_RCC_OscConfig+0x4b8>)
 8005724:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7fc f9f1 	bl	8001b10 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005730:	e00c      	b.n	800574c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005732:	f7fc f9ed 	bl	8001b10 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d905      	bls.n	800574c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e0ab      	b.n	800589c <HAL_RCC_OscConfig+0x610>
 8005744:	40021000 	.word	0x40021000
 8005748:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574c:	4b55      	ldr	r3, [pc, #340]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1ec      	bne.n	8005732 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005758:	4b52      	ldr	r3, [pc, #328]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	4b52      	ldr	r3, [pc, #328]	@ (80058a8 <HAL_RCC_OscConfig+0x61c>)
 800575e:	4013      	ands	r3, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6a11      	ldr	r1, [r2, #32]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005768:	3a01      	subs	r2, #1
 800576a:	0112      	lsls	r2, r2, #4
 800576c:	4311      	orrs	r1, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005772:	0212      	lsls	r2, r2, #8
 8005774:	4311      	orrs	r1, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800577a:	0852      	lsrs	r2, r2, #1
 800577c:	3a01      	subs	r2, #1
 800577e:	0552      	lsls	r2, r2, #21
 8005780:	4311      	orrs	r1, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005786:	0852      	lsrs	r2, r2, #1
 8005788:	3a01      	subs	r2, #1
 800578a:	0652      	lsls	r2, r2, #25
 800578c:	4311      	orrs	r1, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005792:	06d2      	lsls	r2, r2, #27
 8005794:	430a      	orrs	r2, r1
 8005796:	4943      	ldr	r1, [pc, #268]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 8005798:	4313      	orrs	r3, r2
 800579a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579c:	4b41      	ldr	r3, [pc, #260]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a40      	ldr	r2, [pc, #256]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057a8:	4b3e      	ldr	r3, [pc, #248]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4a3d      	ldr	r2, [pc, #244]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fc f9ac 	bl	8001b10 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fc f9a8 	bl	8001b10 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e066      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ce:	4b35      	ldr	r3, [pc, #212]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x530>
 80057da:	e05e      	b.n	800589a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057dc:	4b31      	ldr	r3, [pc, #196]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a30      	ldr	r2, [pc, #192]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fc f992 	bl	8001b10 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fc f98e 	bl	8001b10 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e04c      	b.n	800589c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005802:	4b28      	ldr	r3, [pc, #160]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800580e:	4b25      	ldr	r3, [pc, #148]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	4924      	ldr	r1, [pc, #144]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 8005814:	4b25      	ldr	r3, [pc, #148]	@ (80058ac <HAL_RCC_OscConfig+0x620>)
 8005816:	4013      	ands	r3, r2
 8005818:	60cb      	str	r3, [r1, #12]
 800581a:	e03e      	b.n	800589a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e039      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005828:	4b1e      	ldr	r3, [pc, #120]	@ (80058a4 <HAL_RCC_OscConfig+0x618>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 0203 	and.w	r2, r3, #3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	429a      	cmp	r2, r3
 800583a:	d12c      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	3b01      	subs	r3, #1
 8005848:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584a:	429a      	cmp	r2, r3
 800584c:	d123      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d11b      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005868:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800586a:	429a      	cmp	r2, r3
 800586c:	d113      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	3b01      	subs	r3, #1
 800587c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d109      	bne.n	8005896 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	3b01      	subs	r3, #1
 8005890:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d001      	beq.n	800589a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000
 80058a8:	019f800c 	.word	0x019f800c
 80058ac:	feeefffc 	.word	0xfeeefffc

080058b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e11e      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c8:	4b91      	ldr	r3, [pc, #580]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d910      	bls.n	80058f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d6:	4b8e      	ldr	r3, [pc, #568]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 020f 	bic.w	r2, r3, #15
 80058de:	498c      	ldr	r1, [pc, #560]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e106      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d073      	beq.n	80059ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d129      	bne.n	8005960 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590c:	4b81      	ldr	r3, [pc, #516]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0f4      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800591c:	f000 f99e 	bl	8005c5c <RCC_GetSysClockFreqFromPLLSource>
 8005920:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4a7c      	ldr	r2, [pc, #496]	@ (8005b18 <HAL_RCC_ClockConfig+0x268>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d93f      	bls.n	80059aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800592a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800593e:	2b00      	cmp	r3, #0
 8005940:	d033      	beq.n	80059aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005946:	2b00      	cmp	r3, #0
 8005948:	d12f      	bne.n	80059aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800594a:	4b72      	ldr	r3, [pc, #456]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005952:	4a70      	ldr	r2, [pc, #448]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005958:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800595a:	2380      	movs	r3, #128	@ 0x80
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e024      	b.n	80059aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d107      	bne.n	8005978 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005968:	4b6a      	ldr	r3, [pc, #424]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0c6      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005978:	4b66      	ldr	r3, [pc, #408]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0be      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005988:	f000 f8ce 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 800598c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4a61      	ldr	r2, [pc, #388]	@ (8005b18 <HAL_RCC_ClockConfig+0x268>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d909      	bls.n	80059aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005996:	4b5f      	ldr	r3, [pc, #380]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800599e:	4a5d      	ldr	r2, [pc, #372]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 80059a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 0203 	bic.w	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	4957      	ldr	r1, [pc, #348]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059bc:	f7fc f8a8 	bl	8001b10 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c2:	e00a      	b.n	80059da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c4:	f7fc f8a4 	bl	8001b10 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e095      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059da:	4b4e      	ldr	r3, [pc, #312]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 020c 	and.w	r2, r3, #12
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d1eb      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d023      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a04:	4b43      	ldr	r3, [pc, #268]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a42      	ldr	r2, [pc, #264]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a24:	4a3b      	ldr	r2, [pc, #236]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a2c:	4b39      	ldr	r3, [pc, #228]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4936      	ldr	r1, [pc, #216]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b80      	cmp	r3, #128	@ 0x80
 8005a44:	d105      	bne.n	8005a52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a46:	4b33      	ldr	r3, [pc, #204]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	4a32      	ldr	r2, [pc, #200]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005a4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a52:	4b2f      	ldr	r3, [pc, #188]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d21d      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a60:	4b2b      	ldr	r3, [pc, #172]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f023 020f 	bic.w	r2, r3, #15
 8005a68:	4929      	ldr	r1, [pc, #164]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a70:	f7fc f84e 	bl	8001b10 <HAL_GetTick>
 8005a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a78:	f7fc f84a 	bl	8001b10 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e03b      	b.n	8005b06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8e:	4b20      	ldr	r3, [pc, #128]	@ (8005b10 <HAL_RCC_ClockConfig+0x260>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1ed      	bne.n	8005a78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4917      	ldr	r1, [pc, #92]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ac6:	4b13      	ldr	r3, [pc, #76]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	490f      	ldr	r1, [pc, #60]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ada:	f000 f825 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b14 <HAL_RCC_ClockConfig+0x264>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	091b      	lsrs	r3, r3, #4
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	490c      	ldr	r1, [pc, #48]	@ (8005b1c <HAL_RCC_ClockConfig+0x26c>)
 8005aec:	5ccb      	ldrb	r3, [r1, r3]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	fa22 f303 	lsr.w	r3, r2, r3
 8005af6:	4a0a      	ldr	r2, [pc, #40]	@ (8005b20 <HAL_RCC_ClockConfig+0x270>)
 8005af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005afa:	4b0a      	ldr	r3, [pc, #40]	@ (8005b24 <HAL_RCC_ClockConfig+0x274>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fb ffba 	bl	8001a78 <HAL_InitTick>
 8005b04:	4603      	mov	r3, r0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40022000 	.word	0x40022000
 8005b14:	40021000 	.word	0x40021000
 8005b18:	04c4b400 	.word	0x04c4b400
 8005b1c:	0800958c 	.word	0x0800958c
 8005b20:	20000008 	.word	0x20000008
 8005b24:	2000000c 	.word	0x2000000c

08005b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d102      	bne.n	8005b40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	e047      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b40:	4b27      	ldr	r3, [pc, #156]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 030c 	and.w	r3, r3, #12
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d102      	bne.n	8005b52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b4c:	4b26      	ldr	r3, [pc, #152]	@ (8005be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	e03e      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b52:	4b23      	ldr	r3, [pc, #140]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	2b0c      	cmp	r3, #12
 8005b5c:	d136      	bne.n	8005bcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b5e:	4b20      	ldr	r3, [pc, #128]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b68:	4b1d      	ldr	r3, [pc, #116]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	3301      	adds	r3, #1
 8005b74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d10c      	bne.n	8005b96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	4a16      	ldr	r2, [pc, #88]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b86:	68d2      	ldr	r2, [r2, #12]
 8005b88:	0a12      	lsrs	r2, r2, #8
 8005b8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	617b      	str	r3, [r7, #20]
      break;
 8005b94:	e00c      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b96:	4a13      	ldr	r2, [pc, #76]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	4a10      	ldr	r2, [pc, #64]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba0:	68d2      	ldr	r2, [r2, #12]
 8005ba2:	0a12      	lsrs	r2, r2, #8
 8005ba4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]
      break;
 8005bae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	0e5b      	lsrs	r3, r3, #25
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e001      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bd0:	693b      	ldr	r3, [r7, #16]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40021000 	.word	0x40021000
 8005be4:	00f42400 	.word	0x00f42400
 8005be8:	007a1200 	.word	0x007a1200

08005bec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000008 	.word	0x20000008

08005c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c08:	f7ff fff0 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4904      	ldr	r1, [pc, #16]	@ (8005c2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	0800959c 	.word	0x0800959c

08005c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c34:	f7ff ffda 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	0adb      	lsrs	r3, r3, #11
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	4904      	ldr	r1, [pc, #16]	@ (8005c58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c46:	5ccb      	ldrb	r3, [r1, r3]
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40021000 	.word	0x40021000
 8005c58:	0800959c 	.word	0x0800959c

08005c5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c62:	4b1e      	ldr	r3, [pc, #120]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d10c      	bne.n	8005c9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c80:	4a17      	ldr	r2, [pc, #92]	@ (8005ce0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	4a14      	ldr	r2, [pc, #80]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c8a:	68d2      	ldr	r2, [r2, #12]
 8005c8c:	0a12      	lsrs	r2, r2, #8
 8005c8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	617b      	str	r3, [r7, #20]
    break;
 8005c98:	e00c      	b.n	8005cb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ce4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ca4:	68d2      	ldr	r2, [r2, #12]
 8005ca6:	0a12      	lsrs	r2, r2, #8
 8005ca8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cac:	fb02 f303 	mul.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]
    break;
 8005cb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cb4:	4b09      	ldr	r3, [pc, #36]	@ (8005cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	0e5b      	lsrs	r3, r3, #25
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005cce:	687b      	ldr	r3, [r7, #4]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	007a1200 	.word	0x007a1200
 8005ce4:	00f42400 	.word	0x00f42400

08005ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8098 	beq.w	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d06:	2300      	movs	r3, #0
 8005d08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0a:	4b43      	ldr	r3, [pc, #268]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10d      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d16:	4b40      	ldr	r3, [pc, #256]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d22:	4b3d      	ldr	r3, [pc, #244]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d2a:	60bb      	str	r3, [r7, #8]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d32:	4b3a      	ldr	r3, [pc, #232]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a39      	ldr	r2, [pc, #228]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d3e:	f7fb fee7 	bl	8001b10 <HAL_GetTick>
 8005d42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d44:	e009      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d46:	f7fb fee3 	bl	8001b10 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d902      	bls.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	74fb      	strb	r3, [r7, #19]
        break;
 8005d58:	e005      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d5a:	4b30      	ldr	r3, [pc, #192]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0ef      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d66:	7cfb      	ldrb	r3, [r7, #19]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d159      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01e      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d019      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d88:	4b23      	ldr	r3, [pc, #140]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d94:	4b20      	ldr	r3, [pc, #128]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005da4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005daa:	4a1b      	ldr	r2, [pc, #108]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005db4:	4a18      	ldr	r2, [pc, #96]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d016      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc6:	f7fb fea3 	bl	8001b10 <HAL_GetTick>
 8005dca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dcc:	e00b      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dce:	f7fb fe9f 	bl	8001b10 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d902      	bls.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	74fb      	strb	r3, [r7, #19]
            break;
 8005de4:	e006      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0ec      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dfa:	4b07      	ldr	r3, [pc, #28]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e08:	4903      	ldr	r1, [pc, #12]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e10:	e008      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e12:	7cfb      	ldrb	r3, [r7, #19]
 8005e14:	74bb      	strb	r3, [r7, #18]
 8005e16:	e005      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	7cfb      	ldrb	r3, [r7, #19]
 8005e22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e24:	7c7b      	ldrb	r3, [r7, #17]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d105      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2a:	4ba7      	ldr	r3, [pc, #668]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2e:	4aa6      	ldr	r2, [pc, #664]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e42:	4ba1      	ldr	r3, [pc, #644]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e48:	f023 0203 	bic.w	r2, r3, #3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	499d      	ldr	r1, [pc, #628]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e64:	4b98      	ldr	r3, [pc, #608]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6a:	f023 020c 	bic.w	r2, r3, #12
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	4995      	ldr	r1, [pc, #596]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e86:	4b90      	ldr	r3, [pc, #576]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	498c      	ldr	r1, [pc, #560]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ea8:	4b87      	ldr	r3, [pc, #540]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	4984      	ldr	r1, [pc, #528]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005eca:	4b7f      	ldr	r3, [pc, #508]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	497b      	ldr	r1, [pc, #492]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eec:	4b76      	ldr	r3, [pc, #472]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	4973      	ldr	r1, [pc, #460]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f0e:	4b6e      	ldr	r3, [pc, #440]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	496a      	ldr	r1, [pc, #424]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f30:	4b65      	ldr	r3, [pc, #404]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	4962      	ldr	r1, [pc, #392]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f52:	4b5d      	ldr	r3, [pc, #372]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	4959      	ldr	r1, [pc, #356]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f74:	4b54      	ldr	r3, [pc, #336]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f7a:	f023 0203 	bic.w	r2, r3, #3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	4951      	ldr	r1, [pc, #324]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f96:	4b4c      	ldr	r3, [pc, #304]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	4948      	ldr	r1, [pc, #288]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d015      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fb8:	4b43      	ldr	r3, [pc, #268]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc6:	4940      	ldr	r1, [pc, #256]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fd6:	d105      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fe2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d015      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ff0:	4b35      	ldr	r3, [pc, #212]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ffe:	4932      	ldr	r1, [pc, #200]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800600e:	d105      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006010:	4b2d      	ldr	r3, [pc, #180]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4a2c      	ldr	r2, [pc, #176]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800601a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d015      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006028:	4b27      	ldr	r3, [pc, #156]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006036:	4924      	ldr	r1, [pc, #144]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006042:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006046:	d105      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006048:	4b1f      	ldr	r3, [pc, #124]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a1e      	ldr	r2, [pc, #120]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006052:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006060:	4b19      	ldr	r3, [pc, #100]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006066:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606e:	4916      	ldr	r1, [pc, #88]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800607e:	d105      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006080:	4b11      	ldr	r3, [pc, #68]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800608a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d019      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006098:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	4908      	ldr	r1, [pc, #32]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060b6:	d109      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b8:	4b03      	ldr	r3, [pc, #12]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a02      	ldr	r2, [pc, #8]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c2:	60d3      	str	r3, [r2, #12]
 80060c4:	e002      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80060c6:	bf00      	nop
 80060c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d015      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060d8:	4b29      	ldr	r3, [pc, #164]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e6:	4926      	ldr	r1, [pc, #152]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060f6:	d105      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060f8:	4b21      	ldr	r3, [pc, #132]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	4a20      	ldr	r2, [pc, #128]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006102:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d015      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006110:	4b1b      	ldr	r3, [pc, #108]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800611e:	4918      	ldr	r1, [pc, #96]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612e:	d105      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006130:	4b13      	ldr	r3, [pc, #76]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4a12      	ldr	r2, [pc, #72]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d015      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006148:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800614a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800614e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006156:	490a      	ldr	r1, [pc, #40]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006162:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006166:	d105      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006168:	4b05      	ldr	r3, [pc, #20]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a04      	ldr	r2, [pc, #16]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800616e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006172:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006174:	7cbb      	ldrb	r3, [r7, #18]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40021000 	.word	0x40021000

08006184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e049      	b.n	800622a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fb fa0c 	bl	80015c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f000 fdc2 	bl	8006d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b01      	cmp	r3, #1
 8006246:	d001      	beq.n	800624c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e054      	b.n	80062f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a26      	ldr	r2, [pc, #152]	@ (8006304 <HAL_TIM_Base_Start_IT+0xd0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d022      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006276:	d01d      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a22      	ldr	r2, [pc, #136]	@ (8006308 <HAL_TIM_Base_Start_IT+0xd4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a21      	ldr	r2, [pc, #132]	@ (800630c <HAL_TIM_Base_Start_IT+0xd8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1f      	ldr	r2, [pc, #124]	@ (8006310 <HAL_TIM_Base_Start_IT+0xdc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1e      	ldr	r2, [pc, #120]	@ (8006314 <HAL_TIM_Base_Start_IT+0xe0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006318 <HAL_TIM_Base_Start_IT+0xe4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x80>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1b      	ldr	r2, [pc, #108]	@ (800631c <HAL_TIM_Base_Start_IT+0xe8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d115      	bne.n	80062e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	4b19      	ldr	r3, [pc, #100]	@ (8006320 <HAL_TIM_Base_Start_IT+0xec>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b06      	cmp	r3, #6
 80062c4:	d015      	beq.n	80062f2 <HAL_TIM_Base_Start_IT+0xbe>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062cc:	d011      	beq.n	80062f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	e008      	b.n	80062f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e000      	b.n	80062f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40012c00 	.word	0x40012c00
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40000c00 	.word	0x40000c00
 8006314:	40013400 	.word	0x40013400
 8006318:	40014000 	.word	0x40014000
 800631c:	40015000 	.word	0x40015000
 8006320:	00010007 	.word	0x00010007

08006324 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e049      	b.n	80063ca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f841 	bl	80063d2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3304      	adds	r3, #4
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f000 fcf2 	bl	8006d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <HAL_TIM_OC_Start_IT+0x28>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	bf14      	ite	ne
 8006408:	2301      	movne	r3, #1
 800640a:	2300      	moveq	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	e03c      	b.n	800648a <HAL_TIM_OC_Start_IT+0xa2>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b04      	cmp	r3, #4
 8006414:	d109      	bne.n	800642a <HAL_TIM_OC_Start_IT+0x42>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b01      	cmp	r3, #1
 8006420:	bf14      	ite	ne
 8006422:	2301      	movne	r3, #1
 8006424:	2300      	moveq	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	e02f      	b.n	800648a <HAL_TIM_OC_Start_IT+0xa2>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b08      	cmp	r3, #8
 800642e:	d109      	bne.n	8006444 <HAL_TIM_OC_Start_IT+0x5c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	bf14      	ite	ne
 800643c:	2301      	movne	r3, #1
 800643e:	2300      	moveq	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	e022      	b.n	800648a <HAL_TIM_OC_Start_IT+0xa2>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b0c      	cmp	r3, #12
 8006448:	d109      	bne.n	800645e <HAL_TIM_OC_Start_IT+0x76>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	bf14      	ite	ne
 8006456:	2301      	movne	r3, #1
 8006458:	2300      	moveq	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	e015      	b.n	800648a <HAL_TIM_OC_Start_IT+0xa2>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b10      	cmp	r3, #16
 8006462:	d109      	bne.n	8006478 <HAL_TIM_OC_Start_IT+0x90>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	e008      	b.n	800648a <HAL_TIM_OC_Start_IT+0xa2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e0f1      	b.n	8006676 <HAL_TIM_OC_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <HAL_TIM_OC_Start_IT+0xba>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064a0:	e023      	b.n	80064ea <HAL_TIM_OC_Start_IT+0x102>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d104      	bne.n	80064b2 <HAL_TIM_OC_Start_IT+0xca>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064b0:	e01b      	b.n	80064ea <HAL_TIM_OC_Start_IT+0x102>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_OC_Start_IT+0xda>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064c0:	e013      	b.n	80064ea <HAL_TIM_OC_Start_IT+0x102>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_OC_Start_IT+0xea>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064d0:	e00b      	b.n	80064ea <HAL_TIM_OC_Start_IT+0x102>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_OC_Start_IT+0xfa>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064e0:	e003      	b.n	80064ea <HAL_TIM_OC_Start_IT+0x102>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b0c      	cmp	r3, #12
 80064ee:	d841      	bhi.n	8006574 <HAL_TIM_OC_Start_IT+0x18c>
 80064f0:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <HAL_TIM_OC_Start_IT+0x110>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	0800652d 	.word	0x0800652d
 80064fc:	08006575 	.word	0x08006575
 8006500:	08006575 	.word	0x08006575
 8006504:	08006575 	.word	0x08006575
 8006508:	0800653f 	.word	0x0800653f
 800650c:	08006575 	.word	0x08006575
 8006510:	08006575 	.word	0x08006575
 8006514:	08006575 	.word	0x08006575
 8006518:	08006551 	.word	0x08006551
 800651c:	08006575 	.word	0x08006575
 8006520:	08006575 	.word	0x08006575
 8006524:	08006575 	.word	0x08006575
 8006528:	08006563 	.word	0x08006563
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0202 	orr.w	r2, r2, #2
 800653a:	60da      	str	r2, [r3, #12]
      break;
 800653c:	e01d      	b.n	800657a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0204 	orr.w	r2, r2, #4
 800654c:	60da      	str	r2, [r3, #12]
      break;
 800654e:	e014      	b.n	800657a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0208 	orr.w	r2, r2, #8
 800655e:	60da      	str	r2, [r3, #12]
      break;
 8006560:	e00b      	b.n	800657a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0210 	orr.w	r2, r2, #16
 8006570:	60da      	str	r2, [r3, #12]
      break;
 8006572:	e002      	b.n	800657a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
      break;
 8006578:	bf00      	nop
  }

  if (status == HAL_OK)
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d179      	bne.n	8006674 <HAL_TIM_OC_Start_IT+0x28c>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 ffbd 	bl	8007508 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a3b      	ldr	r2, [pc, #236]	@ (8006680 <HAL_TIM_OC_Start_IT+0x298>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d018      	beq.n	80065ca <HAL_TIM_OC_Start_IT+0x1e2>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a39      	ldr	r2, [pc, #228]	@ (8006684 <HAL_TIM_OC_Start_IT+0x29c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <HAL_TIM_OC_Start_IT+0x1e2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a38      	ldr	r2, [pc, #224]	@ (8006688 <HAL_TIM_OC_Start_IT+0x2a0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_TIM_OC_Start_IT+0x1e2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a36      	ldr	r2, [pc, #216]	@ (800668c <HAL_TIM_OC_Start_IT+0x2a4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d009      	beq.n	80065ca <HAL_TIM_OC_Start_IT+0x1e2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a35      	ldr	r2, [pc, #212]	@ (8006690 <HAL_TIM_OC_Start_IT+0x2a8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_TIM_OC_Start_IT+0x1e2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a33      	ldr	r2, [pc, #204]	@ (8006694 <HAL_TIM_OC_Start_IT+0x2ac>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d101      	bne.n	80065ce <HAL_TIM_OC_Start_IT+0x1e6>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e000      	b.n	80065d0 <HAL_TIM_OC_Start_IT+0x1e8>
 80065ce:	2300      	movs	r3, #0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d007      	beq.n	80065e4 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a25      	ldr	r2, [pc, #148]	@ (8006680 <HAL_TIM_OC_Start_IT+0x298>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d022      	beq.n	8006634 <HAL_TIM_OC_Start_IT+0x24c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f6:	d01d      	beq.n	8006634 <HAL_TIM_OC_Start_IT+0x24c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a26      	ldr	r2, [pc, #152]	@ (8006698 <HAL_TIM_OC_Start_IT+0x2b0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d018      	beq.n	8006634 <HAL_TIM_OC_Start_IT+0x24c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a25      	ldr	r2, [pc, #148]	@ (800669c <HAL_TIM_OC_Start_IT+0x2b4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <HAL_TIM_OC_Start_IT+0x24c>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a23      	ldr	r2, [pc, #140]	@ (80066a0 <HAL_TIM_OC_Start_IT+0x2b8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00e      	beq.n	8006634 <HAL_TIM_OC_Start_IT+0x24c>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1a      	ldr	r2, [pc, #104]	@ (8006684 <HAL_TIM_OC_Start_IT+0x29c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d009      	beq.n	8006634 <HAL_TIM_OC_Start_IT+0x24c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a18      	ldr	r2, [pc, #96]	@ (8006688 <HAL_TIM_OC_Start_IT+0x2a0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_TIM_OC_Start_IT+0x24c>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a19      	ldr	r2, [pc, #100]	@ (8006694 <HAL_TIM_OC_Start_IT+0x2ac>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d115      	bne.n	8006660 <HAL_TIM_OC_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	4b1a      	ldr	r3, [pc, #104]	@ (80066a4 <HAL_TIM_OC_Start_IT+0x2bc>)
 800663c:	4013      	ands	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b06      	cmp	r3, #6
 8006644:	d015      	beq.n	8006672 <HAL_TIM_OC_Start_IT+0x28a>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800664c:	d011      	beq.n	8006672 <HAL_TIM_OC_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0201 	orr.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665e:	e008      	b.n	8006672 <HAL_TIM_OC_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e000      	b.n	8006674 <HAL_TIM_OC_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006672:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40013400 	.word	0x40013400
 8006688:	40014000 	.word	0x40014000
 800668c:	40014400 	.word	0x40014400
 8006690:	40014800 	.word	0x40014800
 8006694:	40015000 	.word	0x40015000
 8006698:	40000400 	.word	0x40000400
 800669c:	40000800 	.word	0x40000800
 80066a0:	40000c00 	.word	0x40000c00
 80066a4:	00010007 	.word	0x00010007

080066a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e049      	b.n	800674e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fa ff54 	bl	800157c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	f000 fb30 	bl	8006d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d020      	beq.n	80067ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01b      	beq.n	80067ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f06f 0202 	mvn.w	r2, #2
 800678a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fab5 	bl	8006d10 <HAL_TIM_IC_CaptureCallback>
 80067a6:	e005      	b.n	80067b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fa f839 	bl	8000820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fab8 	bl	8006d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01b      	beq.n	8006806 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f06f 0204 	mvn.w	r2, #4
 80067d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa8f 	bl	8006d10 <HAL_TIM_IC_CaptureCallback>
 80067f2:	e005      	b.n	8006800 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fa f813 	bl	8000820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa92 	bl	8006d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d020      	beq.n	8006852 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01b      	beq.n	8006852 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f06f 0208 	mvn.w	r2, #8
 8006822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2204      	movs	r2, #4
 8006828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fa69 	bl	8006d10 <HAL_TIM_IC_CaptureCallback>
 800683e:	e005      	b.n	800684c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7f9 ffed 	bl	8000820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa6c 	bl	8006d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d020      	beq.n	800689e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01b      	beq.n	800689e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f06f 0210 	mvn.w	r2, #16
 800686e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2208      	movs	r2, #8
 8006874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa43 	bl	8006d10 <HAL_TIM_IC_CaptureCallback>
 800688a:	e005      	b.n	8006898 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7f9 ffc7 	bl	8000820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa46 	bl	8006d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00c      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f06f 0201 	mvn.w	r2, #1
 80068ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7f9 ffdb 	bl	8000878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00c      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80068e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 ff66 	bl	80077bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00c      	beq.n	8006914 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006900:	2b00      	cmp	r3, #0
 8006902:	d007      	beq.n	8006914 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800690c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 ff5e 	bl	80077d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fa00 	bl	8006d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0220 	mvn.w	r2, #32
 8006954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 ff26 	bl	80077a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00c      	beq.n	8006980 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d007      	beq.n	8006980 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 ff32 	bl	80077e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00c      	beq.n	80069a4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800699c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 ff2a 	bl	80077f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00c      	beq.n	80069c8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80069c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 ff22 	bl	800780c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00c      	beq.n	80069ec <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80069e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 ff1a 	bl	8007820 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e066      	b.n	8006ae0 <HAL_TIM_OC_ConfigChannel+0xec>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b14      	cmp	r3, #20
 8006a1e:	d857      	bhi.n	8006ad0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006a20:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a7d 	.word	0x08006a7d
 8006a2c:	08006ad1 	.word	0x08006ad1
 8006a30:	08006ad1 	.word	0x08006ad1
 8006a34:	08006ad1 	.word	0x08006ad1
 8006a38:	08006a8b 	.word	0x08006a8b
 8006a3c:	08006ad1 	.word	0x08006ad1
 8006a40:	08006ad1 	.word	0x08006ad1
 8006a44:	08006ad1 	.word	0x08006ad1
 8006a48:	08006a99 	.word	0x08006a99
 8006a4c:	08006ad1 	.word	0x08006ad1
 8006a50:	08006ad1 	.word	0x08006ad1
 8006a54:	08006ad1 	.word	0x08006ad1
 8006a58:	08006aa7 	.word	0x08006aa7
 8006a5c:	08006ad1 	.word	0x08006ad1
 8006a60:	08006ad1 	.word	0x08006ad1
 8006a64:	08006ad1 	.word	0x08006ad1
 8006a68:	08006ab5 	.word	0x08006ab5
 8006a6c:	08006ad1 	.word	0x08006ad1
 8006a70:	08006ad1 	.word	0x08006ad1
 8006a74:	08006ad1 	.word	0x08006ad1
 8006a78:	08006ac3 	.word	0x08006ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fa16 	bl	8006eb4 <TIM_OC1_SetConfig>
      break;
 8006a88:	e025      	b.n	8006ad6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68b9      	ldr	r1, [r7, #8]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 faa9 	bl	8006fe8 <TIM_OC2_SetConfig>
      break;
 8006a96:	e01e      	b.n	8006ad6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fb36 	bl	8007110 <TIM_OC3_SetConfig>
      break;
 8006aa4:	e017      	b.n	8006ad6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fbc1 	bl	8007234 <TIM_OC4_SetConfig>
      break;
 8006ab2:	e010      	b.n	8006ad6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fc4e 	bl	800735c <TIM_OC5_SetConfig>
      break;
 8006ac0:	e009      	b.n	8006ad6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fcb1 	bl	8007430 <TIM_OC6_SetConfig>
      break;
 8006ace:	e002      	b.n	8006ad6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e0ff      	b.n	8006d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b14      	cmp	r3, #20
 8006b12:	f200 80f0 	bhi.w	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b16:	a201      	add	r2, pc, #4	@ (adr r2, 8006b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b71 	.word	0x08006b71
 8006b20:	08006cf7 	.word	0x08006cf7
 8006b24:	08006cf7 	.word	0x08006cf7
 8006b28:	08006cf7 	.word	0x08006cf7
 8006b2c:	08006bb1 	.word	0x08006bb1
 8006b30:	08006cf7 	.word	0x08006cf7
 8006b34:	08006cf7 	.word	0x08006cf7
 8006b38:	08006cf7 	.word	0x08006cf7
 8006b3c:	08006bf3 	.word	0x08006bf3
 8006b40:	08006cf7 	.word	0x08006cf7
 8006b44:	08006cf7 	.word	0x08006cf7
 8006b48:	08006cf7 	.word	0x08006cf7
 8006b4c:	08006c33 	.word	0x08006c33
 8006b50:	08006cf7 	.word	0x08006cf7
 8006b54:	08006cf7 	.word	0x08006cf7
 8006b58:	08006cf7 	.word	0x08006cf7
 8006b5c:	08006c75 	.word	0x08006c75
 8006b60:	08006cf7 	.word	0x08006cf7
 8006b64:	08006cf7 	.word	0x08006cf7
 8006b68:	08006cf7 	.word	0x08006cf7
 8006b6c:	08006cb5 	.word	0x08006cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f99c 	bl	8006eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0208 	orr.w	r2, r2, #8
 8006b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0204 	bic.w	r2, r2, #4
 8006b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6999      	ldr	r1, [r3, #24]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	619a      	str	r2, [r3, #24]
      break;
 8006bae:	e0a5      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fa16 	bl	8006fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6999      	ldr	r1, [r3, #24]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	021a      	lsls	r2, r3, #8
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	619a      	str	r2, [r3, #24]
      break;
 8006bf0:	e084      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fa89 	bl	8007110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0208 	orr.w	r2, r2, #8
 8006c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0204 	bic.w	r2, r2, #4
 8006c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69d9      	ldr	r1, [r3, #28]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	691a      	ldr	r2, [r3, #16]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	61da      	str	r2, [r3, #28]
      break;
 8006c30:	e064      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fafb 	bl	8007234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69d9      	ldr	r1, [r3, #28]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	021a      	lsls	r2, r3, #8
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	61da      	str	r2, [r3, #28]
      break;
 8006c72:	e043      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fb6e 	bl	800735c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0208 	orr.w	r2, r2, #8
 8006c8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0204 	bic.w	r2, r2, #4
 8006c9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cb2:	e023      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fbb8 	bl	8007430 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cde:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	021a      	lsls	r2, r3, #8
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cf4:	e002      	b.n	8006cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop

08006d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8006e90 <TIM_Base_SetConfig+0x144>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d017      	beq.n	8006d94 <TIM_Base_SetConfig+0x48>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d6a:	d013      	beq.n	8006d94 <TIM_Base_SetConfig+0x48>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a49      	ldr	r2, [pc, #292]	@ (8006e94 <TIM_Base_SetConfig+0x148>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00f      	beq.n	8006d94 <TIM_Base_SetConfig+0x48>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a48      	ldr	r2, [pc, #288]	@ (8006e98 <TIM_Base_SetConfig+0x14c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x48>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a47      	ldr	r2, [pc, #284]	@ (8006e9c <TIM_Base_SetConfig+0x150>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x48>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a46      	ldr	r2, [pc, #280]	@ (8006ea0 <TIM_Base_SetConfig+0x154>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x48>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a45      	ldr	r2, [pc, #276]	@ (8006ea4 <TIM_Base_SetConfig+0x158>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a39      	ldr	r2, [pc, #228]	@ (8006e90 <TIM_Base_SetConfig+0x144>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d023      	beq.n	8006df6 <TIM_Base_SetConfig+0xaa>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db4:	d01f      	beq.n	8006df6 <TIM_Base_SetConfig+0xaa>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a36      	ldr	r2, [pc, #216]	@ (8006e94 <TIM_Base_SetConfig+0x148>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01b      	beq.n	8006df6 <TIM_Base_SetConfig+0xaa>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a35      	ldr	r2, [pc, #212]	@ (8006e98 <TIM_Base_SetConfig+0x14c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d017      	beq.n	8006df6 <TIM_Base_SetConfig+0xaa>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a34      	ldr	r2, [pc, #208]	@ (8006e9c <TIM_Base_SetConfig+0x150>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <TIM_Base_SetConfig+0xaa>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a33      	ldr	r2, [pc, #204]	@ (8006ea0 <TIM_Base_SetConfig+0x154>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00f      	beq.n	8006df6 <TIM_Base_SetConfig+0xaa>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a33      	ldr	r2, [pc, #204]	@ (8006ea8 <TIM_Base_SetConfig+0x15c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00b      	beq.n	8006df6 <TIM_Base_SetConfig+0xaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a32      	ldr	r2, [pc, #200]	@ (8006eac <TIM_Base_SetConfig+0x160>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d007      	beq.n	8006df6 <TIM_Base_SetConfig+0xaa>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a31      	ldr	r2, [pc, #196]	@ (8006eb0 <TIM_Base_SetConfig+0x164>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d003      	beq.n	8006df6 <TIM_Base_SetConfig+0xaa>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2c      	ldr	r2, [pc, #176]	@ (8006ea4 <TIM_Base_SetConfig+0x158>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d108      	bne.n	8006e08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a18      	ldr	r2, [pc, #96]	@ (8006e90 <TIM_Base_SetConfig+0x144>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d013      	beq.n	8006e5c <TIM_Base_SetConfig+0x110>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea0 <TIM_Base_SetConfig+0x154>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00f      	beq.n	8006e5c <TIM_Base_SetConfig+0x110>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea8 <TIM_Base_SetConfig+0x15c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00b      	beq.n	8006e5c <TIM_Base_SetConfig+0x110>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a19      	ldr	r2, [pc, #100]	@ (8006eac <TIM_Base_SetConfig+0x160>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_Base_SetConfig+0x110>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a18      	ldr	r2, [pc, #96]	@ (8006eb0 <TIM_Base_SetConfig+0x164>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_Base_SetConfig+0x110>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a13      	ldr	r2, [pc, #76]	@ (8006ea4 <TIM_Base_SetConfig+0x158>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d103      	bne.n	8006e64 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d105      	bne.n	8006e82 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f023 0201 	bic.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	611a      	str	r2, [r3, #16]
  }
}
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40000400 	.word	0x40000400
 8006e98:	40000800 	.word	0x40000800
 8006e9c:	40000c00 	.word	0x40000c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40015000 	.word	0x40015000
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40014400 	.word	0x40014400
 8006eb0:	40014800 	.word	0x40014800

08006eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	f023 0201 	bic.w	r2, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0303 	bic.w	r3, r3, #3
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f023 0302 	bic.w	r3, r3, #2
 8006f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a30      	ldr	r2, [pc, #192]	@ (8006fd0 <TIM_OC1_SetConfig+0x11c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <TIM_OC1_SetConfig+0x88>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a2f      	ldr	r2, [pc, #188]	@ (8006fd4 <TIM_OC1_SetConfig+0x120>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00f      	beq.n	8006f3c <TIM_OC1_SetConfig+0x88>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8006fd8 <TIM_OC1_SetConfig+0x124>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <TIM_OC1_SetConfig+0x88>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a2d      	ldr	r2, [pc, #180]	@ (8006fdc <TIM_OC1_SetConfig+0x128>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <TIM_OC1_SetConfig+0x88>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006fe0 <TIM_OC1_SetConfig+0x12c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_OC1_SetConfig+0x88>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a2b      	ldr	r2, [pc, #172]	@ (8006fe4 <TIM_OC1_SetConfig+0x130>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10c      	bne.n	8006f56 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f023 0308 	bic.w	r3, r3, #8
 8006f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f023 0304 	bic.w	r3, r3, #4
 8006f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd0 <TIM_OC1_SetConfig+0x11c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d013      	beq.n	8006f86 <TIM_OC1_SetConfig+0xd2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1c      	ldr	r2, [pc, #112]	@ (8006fd4 <TIM_OC1_SetConfig+0x120>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00f      	beq.n	8006f86 <TIM_OC1_SetConfig+0xd2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a1b      	ldr	r2, [pc, #108]	@ (8006fd8 <TIM_OC1_SetConfig+0x124>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00b      	beq.n	8006f86 <TIM_OC1_SetConfig+0xd2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1a      	ldr	r2, [pc, #104]	@ (8006fdc <TIM_OC1_SetConfig+0x128>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d007      	beq.n	8006f86 <TIM_OC1_SetConfig+0xd2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a19      	ldr	r2, [pc, #100]	@ (8006fe0 <TIM_OC1_SetConfig+0x12c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <TIM_OC1_SetConfig+0xd2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a18      	ldr	r2, [pc, #96]	@ (8006fe4 <TIM_OC1_SetConfig+0x130>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d111      	bne.n	8006faa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	621a      	str	r2, [r3, #32]
}
 8006fc4:	bf00      	nop
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40013400 	.word	0x40013400
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400
 8006fe0:	40014800 	.word	0x40014800
 8006fe4:	40015000 	.word	0x40015000

08006fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f023 0210 	bic.w	r2, r3, #16
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800701a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f023 0320 	bic.w	r3, r3, #32
 8007036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a2c      	ldr	r2, [pc, #176]	@ (80070f8 <TIM_OC2_SetConfig+0x110>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d007      	beq.n	800705c <TIM_OC2_SetConfig+0x74>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a2b      	ldr	r2, [pc, #172]	@ (80070fc <TIM_OC2_SetConfig+0x114>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_OC2_SetConfig+0x74>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a2a      	ldr	r2, [pc, #168]	@ (8007100 <TIM_OC2_SetConfig+0x118>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d10d      	bne.n	8007078 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	011b      	lsls	r3, r3, #4
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a1f      	ldr	r2, [pc, #124]	@ (80070f8 <TIM_OC2_SetConfig+0x110>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d013      	beq.n	80070a8 <TIM_OC2_SetConfig+0xc0>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a1e      	ldr	r2, [pc, #120]	@ (80070fc <TIM_OC2_SetConfig+0x114>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00f      	beq.n	80070a8 <TIM_OC2_SetConfig+0xc0>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a1e      	ldr	r2, [pc, #120]	@ (8007104 <TIM_OC2_SetConfig+0x11c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00b      	beq.n	80070a8 <TIM_OC2_SetConfig+0xc0>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1d      	ldr	r2, [pc, #116]	@ (8007108 <TIM_OC2_SetConfig+0x120>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d007      	beq.n	80070a8 <TIM_OC2_SetConfig+0xc0>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a1c      	ldr	r2, [pc, #112]	@ (800710c <TIM_OC2_SetConfig+0x124>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_OC2_SetConfig+0xc0>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a17      	ldr	r2, [pc, #92]	@ (8007100 <TIM_OC2_SetConfig+0x118>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d113      	bne.n	80070d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	621a      	str	r2, [r3, #32]
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40015000 	.word	0x40015000
 8007104:	40014000 	.word	0x40014000
 8007108:	40014400 	.word	0x40014400
 800710c:	40014800 	.word	0x40014800

08007110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800713e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800715c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a2b      	ldr	r2, [pc, #172]	@ (800721c <TIM_OC3_SetConfig+0x10c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d007      	beq.n	8007182 <TIM_OC3_SetConfig+0x72>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2a      	ldr	r2, [pc, #168]	@ (8007220 <TIM_OC3_SetConfig+0x110>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_OC3_SetConfig+0x72>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a29      	ldr	r2, [pc, #164]	@ (8007224 <TIM_OC3_SetConfig+0x114>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d10d      	bne.n	800719e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800719c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a1e      	ldr	r2, [pc, #120]	@ (800721c <TIM_OC3_SetConfig+0x10c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <TIM_OC3_SetConfig+0xbe>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007220 <TIM_OC3_SetConfig+0x110>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00f      	beq.n	80071ce <TIM_OC3_SetConfig+0xbe>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007228 <TIM_OC3_SetConfig+0x118>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00b      	beq.n	80071ce <TIM_OC3_SetConfig+0xbe>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a1c      	ldr	r2, [pc, #112]	@ (800722c <TIM_OC3_SetConfig+0x11c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d007      	beq.n	80071ce <TIM_OC3_SetConfig+0xbe>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007230 <TIM_OC3_SetConfig+0x120>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d003      	beq.n	80071ce <TIM_OC3_SetConfig+0xbe>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a16      	ldr	r2, [pc, #88]	@ (8007224 <TIM_OC3_SetConfig+0x114>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d113      	bne.n	80071f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	621a      	str	r2, [r3, #32]
}
 8007210:	bf00      	nop
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	40012c00 	.word	0x40012c00
 8007220:	40013400 	.word	0x40013400
 8007224:	40015000 	.word	0x40015000
 8007228:	40014000 	.word	0x40014000
 800722c:	40014400 	.word	0x40014400
 8007230:	40014800 	.word	0x40014800

08007234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800726e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	031b      	lsls	r3, r3, #12
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a2c      	ldr	r2, [pc, #176]	@ (8007344 <TIM_OC4_SetConfig+0x110>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d007      	beq.n	80072a8 <TIM_OC4_SetConfig+0x74>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a2b      	ldr	r2, [pc, #172]	@ (8007348 <TIM_OC4_SetConfig+0x114>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d003      	beq.n	80072a8 <TIM_OC4_SetConfig+0x74>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a2a      	ldr	r2, [pc, #168]	@ (800734c <TIM_OC4_SetConfig+0x118>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d10d      	bne.n	80072c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	031b      	lsls	r3, r3, #12
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007344 <TIM_OC4_SetConfig+0x110>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d013      	beq.n	80072f4 <TIM_OC4_SetConfig+0xc0>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007348 <TIM_OC4_SetConfig+0x114>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00f      	beq.n	80072f4 <TIM_OC4_SetConfig+0xc0>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007350 <TIM_OC4_SetConfig+0x11c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00b      	beq.n	80072f4 <TIM_OC4_SetConfig+0xc0>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a1d      	ldr	r2, [pc, #116]	@ (8007354 <TIM_OC4_SetConfig+0x120>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d007      	beq.n	80072f4 <TIM_OC4_SetConfig+0xc0>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007358 <TIM_OC4_SetConfig+0x124>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_OC4_SetConfig+0xc0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a17      	ldr	r2, [pc, #92]	@ (800734c <TIM_OC4_SetConfig+0x118>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d113      	bne.n	800731c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007302:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	019b      	lsls	r3, r3, #6
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	019b      	lsls	r3, r3, #6
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40012c00 	.word	0x40012c00
 8007348:	40013400 	.word	0x40013400
 800734c:	40015000 	.word	0x40015000
 8007350:	40014000 	.word	0x40014000
 8007354:	40014400 	.word	0x40014400
 8007358:	40014800 	.word	0x40014800

0800735c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800738a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800738e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80073a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	041b      	lsls	r3, r3, #16
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a19      	ldr	r2, [pc, #100]	@ (8007418 <TIM_OC5_SetConfig+0xbc>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d013      	beq.n	80073de <TIM_OC5_SetConfig+0x82>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a18      	ldr	r2, [pc, #96]	@ (800741c <TIM_OC5_SetConfig+0xc0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00f      	beq.n	80073de <TIM_OC5_SetConfig+0x82>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a17      	ldr	r2, [pc, #92]	@ (8007420 <TIM_OC5_SetConfig+0xc4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00b      	beq.n	80073de <TIM_OC5_SetConfig+0x82>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a16      	ldr	r2, [pc, #88]	@ (8007424 <TIM_OC5_SetConfig+0xc8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d007      	beq.n	80073de <TIM_OC5_SetConfig+0x82>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a15      	ldr	r2, [pc, #84]	@ (8007428 <TIM_OC5_SetConfig+0xcc>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d003      	beq.n	80073de <TIM_OC5_SetConfig+0x82>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a14      	ldr	r2, [pc, #80]	@ (800742c <TIM_OC5_SetConfig+0xd0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d109      	bne.n	80073f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	621a      	str	r2, [r3, #32]
}
 800740c:	bf00      	nop
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	40012c00 	.word	0x40012c00
 800741c:	40013400 	.word	0x40013400
 8007420:	40014000 	.word	0x40014000
 8007424:	40014400 	.word	0x40014400
 8007428:	40014800 	.word	0x40014800
 800742c:	40015000 	.word	0x40015000

08007430 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800745e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	051b      	lsls	r3, r3, #20
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a1a      	ldr	r2, [pc, #104]	@ (80074f0 <TIM_OC6_SetConfig+0xc0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <TIM_OC6_SetConfig+0x84>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a19      	ldr	r2, [pc, #100]	@ (80074f4 <TIM_OC6_SetConfig+0xc4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00f      	beq.n	80074b4 <TIM_OC6_SetConfig+0x84>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a18      	ldr	r2, [pc, #96]	@ (80074f8 <TIM_OC6_SetConfig+0xc8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00b      	beq.n	80074b4 <TIM_OC6_SetConfig+0x84>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a17      	ldr	r2, [pc, #92]	@ (80074fc <TIM_OC6_SetConfig+0xcc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d007      	beq.n	80074b4 <TIM_OC6_SetConfig+0x84>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a16      	ldr	r2, [pc, #88]	@ (8007500 <TIM_OC6_SetConfig+0xd0>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <TIM_OC6_SetConfig+0x84>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a15      	ldr	r2, [pc, #84]	@ (8007504 <TIM_OC6_SetConfig+0xd4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d109      	bne.n	80074c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	621a      	str	r2, [r3, #32]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40013400 	.word	0x40013400
 80074f8:	40014000 	.word	0x40014000
 80074fc:	40014400 	.word	0x40014400
 8007500:	40014800 	.word	0x40014800
 8007504:	40015000 	.word	0x40015000

08007508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f003 031f 	and.w	r3, r3, #31
 800751a:	2201      	movs	r2, #1
 800751c:	fa02 f303 	lsl.w	r3, r2, r3
 8007520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a1a      	ldr	r2, [r3, #32]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	43db      	mvns	r3, r3
 800752a:	401a      	ands	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a1a      	ldr	r2, [r3, #32]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f003 031f 	and.w	r3, r3, #31
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	fa01 f303 	lsl.w	r3, r1, r3
 8007540:	431a      	orrs	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	621a      	str	r2, [r3, #32]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
	...

08007554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007568:	2302      	movs	r3, #2
 800756a:	e074      	b.n	8007656 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a34      	ldr	r2, [pc, #208]	@ (8007664 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d009      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a33      	ldr	r2, [pc, #204]	@ (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a31      	ldr	r2, [pc, #196]	@ (800766c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d108      	bne.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80075c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a21      	ldr	r2, [pc, #132]	@ (8007664 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d022      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ec:	d01d      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d018      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d013      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a1c      	ldr	r2, [pc, #112]	@ (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00e      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a15      	ldr	r2, [pc, #84]	@ (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d009      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a18      	ldr	r2, [pc, #96]	@ (800767c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d004      	beq.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a11      	ldr	r2, [pc, #68]	@ (800766c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d10c      	bne.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	4313      	orrs	r3, r2
 800763a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40012c00 	.word	0x40012c00
 8007668:	40013400 	.word	0x40013400
 800766c:	40015000 	.word	0x40015000
 8007670:	40000400 	.word	0x40000400
 8007674:	40000800 	.word	0x40000800
 8007678:	40000c00 	.word	0x40000c00
 800767c:	40014000 	.word	0x40014000

08007680 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007698:	2302      	movs	r3, #2
 800769a:	e078      	b.n	800778e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	4313      	orrs	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1c      	ldr	r2, [pc, #112]	@ (800779c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d009      	beq.n	8007742 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1b      	ldr	r2, [pc, #108]	@ (80077a0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d004      	beq.n	8007742 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a19      	ldr	r2, [pc, #100]	@ (80077a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d11c      	bne.n	800777c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774c:	051b      	lsls	r3, r3, #20
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40012c00 	.word	0x40012c00
 80077a0:	40013400 	.word	0x40013400
 80077a4:	40015000 	.word	0x40015000

080077a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e042      	b.n	80078cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800784c:	2b00      	cmp	r3, #0
 800784e:	d106      	bne.n	800785e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7f9 ff4f 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2224      	movs	r2, #36	@ 0x24
 8007862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fb24 	bl	8007ecc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f825 	bl	80078d4 <UART_SetConfig>
 800788a:	4603      	mov	r3, r0
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e01b      	b.n	80078cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fba3 	bl	8008010 <UART_CheckIdleState>
 80078ca:	4603      	mov	r3, r0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078d8:	b08c      	sub	sp, #48	@ 0x30
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	431a      	orrs	r2, r3
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	4baa      	ldr	r3, [pc, #680]	@ (8007bac <UART_SetConfig+0x2d8>)
 8007904:	4013      	ands	r3, r2
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	6812      	ldr	r2, [r2, #0]
 800790a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800790c:	430b      	orrs	r3, r1
 800790e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a9f      	ldr	r2, [pc, #636]	@ (8007bb0 <UART_SetConfig+0x2dc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d004      	beq.n	8007940 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800793c:	4313      	orrs	r3, r2
 800793e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800794a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	6812      	ldr	r2, [r2, #0]
 8007952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007954:	430b      	orrs	r3, r1
 8007956:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795e:	f023 010f 	bic.w	r1, r3, #15
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a90      	ldr	r2, [pc, #576]	@ (8007bb4 <UART_SetConfig+0x2e0>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d125      	bne.n	80079c4 <UART_SetConfig+0xf0>
 8007978:	4b8f      	ldr	r3, [pc, #572]	@ (8007bb8 <UART_SetConfig+0x2e4>)
 800797a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b03      	cmp	r3, #3
 8007984:	d81a      	bhi.n	80079bc <UART_SetConfig+0xe8>
 8007986:	a201      	add	r2, pc, #4	@ (adr r2, 800798c <UART_SetConfig+0xb8>)
 8007988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798c:	0800799d 	.word	0x0800799d
 8007990:	080079ad 	.word	0x080079ad
 8007994:	080079a5 	.word	0x080079a5
 8007998:	080079b5 	.word	0x080079b5
 800799c:	2301      	movs	r3, #1
 800799e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a2:	e116      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 80079a4:	2302      	movs	r3, #2
 80079a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079aa:	e112      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 80079ac:	2304      	movs	r3, #4
 80079ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b2:	e10e      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 80079b4:	2308      	movs	r3, #8
 80079b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ba:	e10a      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 80079bc:	2310      	movs	r3, #16
 80079be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079c2:	e106      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a7c      	ldr	r2, [pc, #496]	@ (8007bbc <UART_SetConfig+0x2e8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d138      	bne.n	8007a40 <UART_SetConfig+0x16c>
 80079ce:	4b7a      	ldr	r3, [pc, #488]	@ (8007bb8 <UART_SetConfig+0x2e4>)
 80079d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d4:	f003 030c 	and.w	r3, r3, #12
 80079d8:	2b0c      	cmp	r3, #12
 80079da:	d82d      	bhi.n	8007a38 <UART_SetConfig+0x164>
 80079dc:	a201      	add	r2, pc, #4	@ (adr r2, 80079e4 <UART_SetConfig+0x110>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007a19 	.word	0x08007a19
 80079e8:	08007a39 	.word	0x08007a39
 80079ec:	08007a39 	.word	0x08007a39
 80079f0:	08007a39 	.word	0x08007a39
 80079f4:	08007a29 	.word	0x08007a29
 80079f8:	08007a39 	.word	0x08007a39
 80079fc:	08007a39 	.word	0x08007a39
 8007a00:	08007a39 	.word	0x08007a39
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	08007a39 	.word	0x08007a39
 8007a0c:	08007a39 	.word	0x08007a39
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a31 	.word	0x08007a31
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1e:	e0d8      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a20:	2302      	movs	r3, #2
 8007a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a26:	e0d4      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a28:	2304      	movs	r3, #4
 8007a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a2e:	e0d0      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a30:	2308      	movs	r3, #8
 8007a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a36:	e0cc      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a38:	2310      	movs	r3, #16
 8007a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a3e:	e0c8      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a5e      	ldr	r2, [pc, #376]	@ (8007bc0 <UART_SetConfig+0x2ec>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d125      	bne.n	8007a96 <UART_SetConfig+0x1c2>
 8007a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8007bb8 <UART_SetConfig+0x2e4>)
 8007a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a54:	2b30      	cmp	r3, #48	@ 0x30
 8007a56:	d016      	beq.n	8007a86 <UART_SetConfig+0x1b2>
 8007a58:	2b30      	cmp	r3, #48	@ 0x30
 8007a5a:	d818      	bhi.n	8007a8e <UART_SetConfig+0x1ba>
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	d00a      	beq.n	8007a76 <UART_SetConfig+0x1a2>
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	d814      	bhi.n	8007a8e <UART_SetConfig+0x1ba>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <UART_SetConfig+0x19a>
 8007a68:	2b10      	cmp	r3, #16
 8007a6a:	d008      	beq.n	8007a7e <UART_SetConfig+0x1aa>
 8007a6c:	e00f      	b.n	8007a8e <UART_SetConfig+0x1ba>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a74:	e0ad      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a76:	2302      	movs	r3, #2
 8007a78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a7c:	e0a9      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a7e:	2304      	movs	r3, #4
 8007a80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a84:	e0a5      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a86:	2308      	movs	r3, #8
 8007a88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a8c:	e0a1      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a8e:	2310      	movs	r3, #16
 8007a90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a94:	e09d      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a4a      	ldr	r2, [pc, #296]	@ (8007bc4 <UART_SetConfig+0x2f0>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d125      	bne.n	8007aec <UART_SetConfig+0x218>
 8007aa0:	4b45      	ldr	r3, [pc, #276]	@ (8007bb8 <UART_SetConfig+0x2e4>)
 8007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007aaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007aac:	d016      	beq.n	8007adc <UART_SetConfig+0x208>
 8007aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ab0:	d818      	bhi.n	8007ae4 <UART_SetConfig+0x210>
 8007ab2:	2b80      	cmp	r3, #128	@ 0x80
 8007ab4:	d00a      	beq.n	8007acc <UART_SetConfig+0x1f8>
 8007ab6:	2b80      	cmp	r3, #128	@ 0x80
 8007ab8:	d814      	bhi.n	8007ae4 <UART_SetConfig+0x210>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <UART_SetConfig+0x1f0>
 8007abe:	2b40      	cmp	r3, #64	@ 0x40
 8007ac0:	d008      	beq.n	8007ad4 <UART_SetConfig+0x200>
 8007ac2:	e00f      	b.n	8007ae4 <UART_SetConfig+0x210>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aca:	e082      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007acc:	2302      	movs	r3, #2
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad2:	e07e      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ada:	e07a      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007adc:	2308      	movs	r3, #8
 8007ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae2:	e076      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aea:	e072      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a35      	ldr	r2, [pc, #212]	@ (8007bc8 <UART_SetConfig+0x2f4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d12a      	bne.n	8007b4c <UART_SetConfig+0x278>
 8007af6:	4b30      	ldr	r3, [pc, #192]	@ (8007bb8 <UART_SetConfig+0x2e4>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007afc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b04:	d01a      	beq.n	8007b3c <UART_SetConfig+0x268>
 8007b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b0a:	d81b      	bhi.n	8007b44 <UART_SetConfig+0x270>
 8007b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b10:	d00c      	beq.n	8007b2c <UART_SetConfig+0x258>
 8007b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b16:	d815      	bhi.n	8007b44 <UART_SetConfig+0x270>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <UART_SetConfig+0x250>
 8007b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b20:	d008      	beq.n	8007b34 <UART_SetConfig+0x260>
 8007b22:	e00f      	b.n	8007b44 <UART_SetConfig+0x270>
 8007b24:	2300      	movs	r3, #0
 8007b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b2a:	e052      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b32:	e04e      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007b34:	2304      	movs	r3, #4
 8007b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3a:	e04a      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b42:	e046      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007b44:	2310      	movs	r3, #16
 8007b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4a:	e042      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a17      	ldr	r2, [pc, #92]	@ (8007bb0 <UART_SetConfig+0x2dc>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d13a      	bne.n	8007bcc <UART_SetConfig+0x2f8>
 8007b56:	4b18      	ldr	r3, [pc, #96]	@ (8007bb8 <UART_SetConfig+0x2e4>)
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b64:	d01a      	beq.n	8007b9c <UART_SetConfig+0x2c8>
 8007b66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b6a:	d81b      	bhi.n	8007ba4 <UART_SetConfig+0x2d0>
 8007b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b70:	d00c      	beq.n	8007b8c <UART_SetConfig+0x2b8>
 8007b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b76:	d815      	bhi.n	8007ba4 <UART_SetConfig+0x2d0>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <UART_SetConfig+0x2b0>
 8007b7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b80:	d008      	beq.n	8007b94 <UART_SetConfig+0x2c0>
 8007b82:	e00f      	b.n	8007ba4 <UART_SetConfig+0x2d0>
 8007b84:	2300      	movs	r3, #0
 8007b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8a:	e022      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b92:	e01e      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007b94:	2304      	movs	r3, #4
 8007b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9a:	e01a      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba2:	e016      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007ba4:	2310      	movs	r3, #16
 8007ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007baa:	e012      	b.n	8007bd2 <UART_SetConfig+0x2fe>
 8007bac:	cfff69f3 	.word	0xcfff69f3
 8007bb0:	40008000 	.word	0x40008000
 8007bb4:	40013800 	.word	0x40013800
 8007bb8:	40021000 	.word	0x40021000
 8007bbc:	40004400 	.word	0x40004400
 8007bc0:	40004800 	.word	0x40004800
 8007bc4:	40004c00 	.word	0x40004c00
 8007bc8:	40005000 	.word	0x40005000
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4aae      	ldr	r2, [pc, #696]	@ (8007e90 <UART_SetConfig+0x5bc>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	f040 8097 	bne.w	8007d0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007be2:	2b08      	cmp	r3, #8
 8007be4:	d823      	bhi.n	8007c2e <UART_SetConfig+0x35a>
 8007be6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bec <UART_SetConfig+0x318>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c2f 	.word	0x08007c2f
 8007bf4:	08007c19 	.word	0x08007c19
 8007bf8:	08007c2f 	.word	0x08007c2f
 8007bfc:	08007c1f 	.word	0x08007c1f
 8007c00:	08007c2f 	.word	0x08007c2f
 8007c04:	08007c2f 	.word	0x08007c2f
 8007c08:	08007c2f 	.word	0x08007c2f
 8007c0c:	08007c27 	.word	0x08007c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c10:	f7fd fff8 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8007c14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c16:	e010      	b.n	8007c3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c18:	4b9e      	ldr	r3, [pc, #632]	@ (8007e94 <UART_SetConfig+0x5c0>)
 8007c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c1c:	e00d      	b.n	8007c3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1e:	f7fd ff83 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8007c22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c24:	e009      	b.n	8007c3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c2c:	e005      	b.n	8007c3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8130 	beq.w	8007ea2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c46:	4a94      	ldr	r2, [pc, #592]	@ (8007e98 <UART_SetConfig+0x5c4>)
 8007c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	4413      	add	r3, r2
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d305      	bcc.n	8007c72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d903      	bls.n	8007c7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c78:	e113      	b.n	8007ea2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	60bb      	str	r3, [r7, #8]
 8007c80:	60fa      	str	r2, [r7, #12]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c86:	4a84      	ldr	r2, [pc, #528]	@ (8007e98 <UART_SetConfig+0x5c4>)
 8007c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2200      	movs	r2, #0
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c9c:	f7f8 fb10 	bl	80002c0 <__aeabi_uldivmod>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	f04f 0200 	mov.w	r2, #0
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	020b      	lsls	r3, r1, #8
 8007cb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cb6:	0202      	lsls	r2, r0, #8
 8007cb8:	6979      	ldr	r1, [r7, #20]
 8007cba:	6849      	ldr	r1, [r1, #4]
 8007cbc:	0849      	lsrs	r1, r1, #1
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	eb12 0804 	adds.w	r8, r2, r4
 8007cc8:	eb43 0905 	adc.w	r9, r3, r5
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	469a      	mov	sl, r3
 8007cd4:	4693      	mov	fp, r2
 8007cd6:	4652      	mov	r2, sl
 8007cd8:	465b      	mov	r3, fp
 8007cda:	4640      	mov	r0, r8
 8007cdc:	4649      	mov	r1, r9
 8007cde:	f7f8 faef 	bl	80002c0 <__aeabi_uldivmod>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cf0:	d308      	bcc.n	8007d04 <UART_SetConfig+0x430>
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cf8:	d204      	bcs.n	8007d04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6a3a      	ldr	r2, [r7, #32]
 8007d00:	60da      	str	r2, [r3, #12]
 8007d02:	e0ce      	b.n	8007ea2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d0a:	e0ca      	b.n	8007ea2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d14:	d166      	bne.n	8007de4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007d16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d1a:	2b08      	cmp	r3, #8
 8007d1c:	d827      	bhi.n	8007d6e <UART_SetConfig+0x49a>
 8007d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d24 <UART_SetConfig+0x450>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d51 	.word	0x08007d51
 8007d2c:	08007d59 	.word	0x08007d59
 8007d30:	08007d6f 	.word	0x08007d6f
 8007d34:	08007d5f 	.word	0x08007d5f
 8007d38:	08007d6f 	.word	0x08007d6f
 8007d3c:	08007d6f 	.word	0x08007d6f
 8007d40:	08007d6f 	.word	0x08007d6f
 8007d44:	08007d67 	.word	0x08007d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d48:	f7fd ff5c 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8007d4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d4e:	e014      	b.n	8007d7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d50:	f7fd ff6e 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 8007d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d56:	e010      	b.n	8007d7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d58:	4b4e      	ldr	r3, [pc, #312]	@ (8007e94 <UART_SetConfig+0x5c0>)
 8007d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d5c:	e00d      	b.n	8007d7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5e:	f7fd fee3 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8007d62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d64:	e009      	b.n	8007d7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d6c:	e005      	b.n	8007d7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 8090 	beq.w	8007ea2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	4a44      	ldr	r2, [pc, #272]	@ (8007e98 <UART_SetConfig+0x5c4>)
 8007d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d94:	005a      	lsls	r2, r3, #1
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	441a      	add	r2, r3
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	2b0f      	cmp	r3, #15
 8007dac:	d916      	bls.n	8007ddc <UART_SetConfig+0x508>
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db4:	d212      	bcs.n	8007ddc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f023 030f 	bic.w	r3, r3, #15
 8007dbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	085b      	lsrs	r3, r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	8bfb      	ldrh	r3, [r7, #30]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	8bfa      	ldrh	r2, [r7, #30]
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	e062      	b.n	8007ea2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007de2:	e05e      	b.n	8007ea2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007de4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d828      	bhi.n	8007e3e <UART_SetConfig+0x56a>
 8007dec:	a201      	add	r2, pc, #4	@ (adr r2, 8007df4 <UART_SetConfig+0x520>)
 8007dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df2:	bf00      	nop
 8007df4:	08007e19 	.word	0x08007e19
 8007df8:	08007e21 	.word	0x08007e21
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	08007e3f 	.word	0x08007e3f
 8007e04:	08007e2f 	.word	0x08007e2f
 8007e08:	08007e3f 	.word	0x08007e3f
 8007e0c:	08007e3f 	.word	0x08007e3f
 8007e10:	08007e3f 	.word	0x08007e3f
 8007e14:	08007e37 	.word	0x08007e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e18:	f7fd fef4 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8007e1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e1e:	e014      	b.n	8007e4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e20:	f7fd ff06 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 8007e24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e26:	e010      	b.n	8007e4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e28:	4b1a      	ldr	r3, [pc, #104]	@ (8007e94 <UART_SetConfig+0x5c0>)
 8007e2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e2c:	e00d      	b.n	8007e4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2e:	f7fd fe7b 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8007e32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e34:	e009      	b.n	8007e4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e3c:	e005      	b.n	8007e4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e48:	bf00      	nop
    }

    if (pclk != 0U)
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d028      	beq.n	8007ea2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e54:	4a10      	ldr	r2, [pc, #64]	@ (8007e98 <UART_SetConfig+0x5c4>)
 8007e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	441a      	add	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	2b0f      	cmp	r3, #15
 8007e78:	d910      	bls.n	8007e9c <UART_SetConfig+0x5c8>
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e80:	d20c      	bcs.n	8007e9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60da      	str	r2, [r3, #12]
 8007e8c:	e009      	b.n	8007ea2 <UART_SetConfig+0x5ce>
 8007e8e:	bf00      	nop
 8007e90:	40008000 	.word	0x40008000
 8007e94:	00f42400 	.word	0x00f42400
 8007e98:	080095b4 	.word	0x080095b4
      }
      else
      {
        ret = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ebe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3730      	adds	r7, #48	@ 0x30
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f60:	f003 0310 	and.w	r3, r3, #16
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01a      	beq.n	8007fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fca:	d10a      	bne.n	8007fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	605a      	str	r2, [r3, #4]
  }
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b098      	sub	sp, #96	@ 0x60
 8008014:	af02      	add	r7, sp, #8
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008020:	f7f9 fd76 	bl	8001b10 <HAL_GetTick>
 8008024:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b08      	cmp	r3, #8
 8008032:	d12f      	bne.n	8008094 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008034:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800803c:	2200      	movs	r2, #0
 800803e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f88e 	bl	8008164 <UART_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d022      	beq.n	8008094 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800805c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008062:	653b      	str	r3, [r7, #80]	@ 0x50
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800806c:	647b      	str	r3, [r7, #68]	@ 0x44
 800806e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008072:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008074:	e841 2300 	strex	r3, r2, [r1]
 8008078:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800807a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e6      	bne.n	800804e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2220      	movs	r2, #32
 8008084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e063      	b.n	800815c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d149      	bne.n	8008136 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080aa:	2200      	movs	r2, #0
 80080ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f857 	bl	8008164 <UART_WaitOnFlagUntilTimeout>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d03c      	beq.n	8008136 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	623b      	str	r3, [r7, #32]
   return(result);
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080da:	633b      	str	r3, [r7, #48]	@ 0x30
 80080dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e6      	bne.n	80080bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3308      	adds	r3, #8
 80080f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800810e:	61fa      	str	r2, [r7, #28]
 8008110:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	69b9      	ldr	r1, [r7, #24]
 8008114:	69fa      	ldr	r2, [r7, #28]
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	617b      	str	r3, [r7, #20]
   return(result);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e5      	bne.n	80080ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e012      	b.n	800815c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3758      	adds	r7, #88	@ 0x58
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	4613      	mov	r3, r2
 8008172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008174:	e04f      	b.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817c:	d04b      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800817e:	f7f9 fcc7 	bl	8001b10 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	429a      	cmp	r2, r3
 800818c:	d302      	bcc.n	8008194 <UART_WaitOnFlagUntilTimeout+0x30>
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e04e      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d037      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b80      	cmp	r3, #128	@ 0x80
 80081aa:	d034      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b40      	cmp	r3, #64	@ 0x40
 80081b0:	d031      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d110      	bne.n	80081e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2208      	movs	r2, #8
 80081c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f838 	bl	800823e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2208      	movs	r2, #8
 80081d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e029      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081f0:	d111      	bne.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f81e 	bl	800823e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e00f      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4013      	ands	r3, r2
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	bf0c      	ite	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	2300      	movne	r3, #0
 800822a:	b2db      	uxtb	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	429a      	cmp	r2, r3
 8008232:	d0a0      	beq.n	8008176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800823e:	b480      	push	{r7}
 8008240:	b095      	sub	sp, #84	@ 0x54
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800825a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	461a      	mov	r2, r3
 8008262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008264:	643b      	str	r3, [r7, #64]	@ 0x40
 8008266:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800826a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800826c:	e841 2300 	strex	r3, r2, [r1]
 8008270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1e6      	bne.n	8008246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3308      	adds	r3, #8
 800827e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	61fb      	str	r3, [r7, #28]
   return(result);
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800828e:	f023 0301 	bic.w	r3, r3, #1
 8008292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3308      	adds	r3, #8
 800829a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800829c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800829e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e3      	bne.n	8008278 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d118      	bne.n	80082ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f023 0310 	bic.w	r3, r3, #16
 80082cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6979      	ldr	r1, [r7, #20]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	613b      	str	r3, [r7, #16]
   return(result);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e6      	bne.n	80082b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082fe:	bf00      	nop
 8008300:	3754      	adds	r7, #84	@ 0x54
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_UARTEx_DisableFifoMode+0x16>
 800831c:	2302      	movs	r3, #2
 800831e:	e027      	b.n	8008370 <HAL_UARTEx_DisableFifoMode+0x66>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2224      	movs	r2, #36	@ 0x24
 800832c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0201 	bic.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800834e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2220      	movs	r2, #32
 8008362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008390:	2302      	movs	r3, #2
 8008392:	e02d      	b.n	80083f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2224      	movs	r2, #36	@ 0x24
 80083a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0201 	bic.w	r2, r2, #1
 80083ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f84f 	bl	8008474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800840c:	2302      	movs	r3, #2
 800840e:	e02d      	b.n	800846c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2224      	movs	r2, #36	@ 0x24
 800841c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0201 	bic.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f811 	bl	8008474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008480:	2b00      	cmp	r3, #0
 8008482:	d108      	bne.n	8008496 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008494:	e031      	b.n	80084fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008496:	2308      	movs	r3, #8
 8008498:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800849a:	2308      	movs	r3, #8
 800849c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	0e5b      	lsrs	r3, r3, #25
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	f003 0307 	and.w	r3, r3, #7
 80084ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	0f5b      	lsrs	r3, r3, #29
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	7b3a      	ldrb	r2, [r7, #12]
 80084c2:	4911      	ldr	r1, [pc, #68]	@ (8008508 <UARTEx_SetNbDataToProcess+0x94>)
 80084c4:	5c8a      	ldrb	r2, [r1, r2]
 80084c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084ca:	7b3a      	ldrb	r2, [r7, #12]
 80084cc:	490f      	ldr	r1, [pc, #60]	@ (800850c <UARTEx_SetNbDataToProcess+0x98>)
 80084ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	7b7a      	ldrb	r2, [r7, #13]
 80084e0:	4909      	ldr	r1, [pc, #36]	@ (8008508 <UARTEx_SetNbDataToProcess+0x94>)
 80084e2:	5c8a      	ldrb	r2, [r1, r2]
 80084e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084e8:	7b7a      	ldrb	r2, [r7, #13]
 80084ea:	4908      	ldr	r1, [pc, #32]	@ (800850c <UARTEx_SetNbDataToProcess+0x98>)
 80084ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80084fa:	bf00      	nop
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	080095cc 	.word	0x080095cc
 800850c:	080095d4 	.word	0x080095d4

08008510 <std>:
 8008510:	2300      	movs	r3, #0
 8008512:	b510      	push	{r4, lr}
 8008514:	4604      	mov	r4, r0
 8008516:	e9c0 3300 	strd	r3, r3, [r0]
 800851a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800851e:	6083      	str	r3, [r0, #8]
 8008520:	8181      	strh	r1, [r0, #12]
 8008522:	6643      	str	r3, [r0, #100]	@ 0x64
 8008524:	81c2      	strh	r2, [r0, #14]
 8008526:	6183      	str	r3, [r0, #24]
 8008528:	4619      	mov	r1, r3
 800852a:	2208      	movs	r2, #8
 800852c:	305c      	adds	r0, #92	@ 0x5c
 800852e:	f000 f9f9 	bl	8008924 <memset>
 8008532:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <std+0x58>)
 8008534:	6263      	str	r3, [r4, #36]	@ 0x24
 8008536:	4b0d      	ldr	r3, [pc, #52]	@ (800856c <std+0x5c>)
 8008538:	62a3      	str	r3, [r4, #40]	@ 0x28
 800853a:	4b0d      	ldr	r3, [pc, #52]	@ (8008570 <std+0x60>)
 800853c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800853e:	4b0d      	ldr	r3, [pc, #52]	@ (8008574 <std+0x64>)
 8008540:	6323      	str	r3, [r4, #48]	@ 0x30
 8008542:	4b0d      	ldr	r3, [pc, #52]	@ (8008578 <std+0x68>)
 8008544:	6224      	str	r4, [r4, #32]
 8008546:	429c      	cmp	r4, r3
 8008548:	d006      	beq.n	8008558 <std+0x48>
 800854a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800854e:	4294      	cmp	r4, r2
 8008550:	d002      	beq.n	8008558 <std+0x48>
 8008552:	33d0      	adds	r3, #208	@ 0xd0
 8008554:	429c      	cmp	r4, r3
 8008556:	d105      	bne.n	8008564 <std+0x54>
 8008558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800855c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008560:	f000 ba58 	b.w	8008a14 <__retarget_lock_init_recursive>
 8008564:	bd10      	pop	{r4, pc}
 8008566:	bf00      	nop
 8008568:	08008775 	.word	0x08008775
 800856c:	08008797 	.word	0x08008797
 8008570:	080087cf 	.word	0x080087cf
 8008574:	080087f3 	.word	0x080087f3
 8008578:	20000358 	.word	0x20000358

0800857c <stdio_exit_handler>:
 800857c:	4a02      	ldr	r2, [pc, #8]	@ (8008588 <stdio_exit_handler+0xc>)
 800857e:	4903      	ldr	r1, [pc, #12]	@ (800858c <stdio_exit_handler+0x10>)
 8008580:	4803      	ldr	r0, [pc, #12]	@ (8008590 <stdio_exit_handler+0x14>)
 8008582:	f000 b869 	b.w	8008658 <_fwalk_sglue>
 8008586:	bf00      	nop
 8008588:	20000014 	.word	0x20000014
 800858c:	080092b1 	.word	0x080092b1
 8008590:	20000024 	.word	0x20000024

08008594 <cleanup_stdio>:
 8008594:	6841      	ldr	r1, [r0, #4]
 8008596:	4b0c      	ldr	r3, [pc, #48]	@ (80085c8 <cleanup_stdio+0x34>)
 8008598:	4299      	cmp	r1, r3
 800859a:	b510      	push	{r4, lr}
 800859c:	4604      	mov	r4, r0
 800859e:	d001      	beq.n	80085a4 <cleanup_stdio+0x10>
 80085a0:	f000 fe86 	bl	80092b0 <_fflush_r>
 80085a4:	68a1      	ldr	r1, [r4, #8]
 80085a6:	4b09      	ldr	r3, [pc, #36]	@ (80085cc <cleanup_stdio+0x38>)
 80085a8:	4299      	cmp	r1, r3
 80085aa:	d002      	beq.n	80085b2 <cleanup_stdio+0x1e>
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 fe7f 	bl	80092b0 <_fflush_r>
 80085b2:	68e1      	ldr	r1, [r4, #12]
 80085b4:	4b06      	ldr	r3, [pc, #24]	@ (80085d0 <cleanup_stdio+0x3c>)
 80085b6:	4299      	cmp	r1, r3
 80085b8:	d004      	beq.n	80085c4 <cleanup_stdio+0x30>
 80085ba:	4620      	mov	r0, r4
 80085bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c0:	f000 be76 	b.w	80092b0 <_fflush_r>
 80085c4:	bd10      	pop	{r4, pc}
 80085c6:	bf00      	nop
 80085c8:	20000358 	.word	0x20000358
 80085cc:	200003c0 	.word	0x200003c0
 80085d0:	20000428 	.word	0x20000428

080085d4 <global_stdio_init.part.0>:
 80085d4:	b510      	push	{r4, lr}
 80085d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008604 <global_stdio_init.part.0+0x30>)
 80085d8:	4c0b      	ldr	r4, [pc, #44]	@ (8008608 <global_stdio_init.part.0+0x34>)
 80085da:	4a0c      	ldr	r2, [pc, #48]	@ (800860c <global_stdio_init.part.0+0x38>)
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	4620      	mov	r0, r4
 80085e0:	2200      	movs	r2, #0
 80085e2:	2104      	movs	r1, #4
 80085e4:	f7ff ff94 	bl	8008510 <std>
 80085e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085ec:	2201      	movs	r2, #1
 80085ee:	2109      	movs	r1, #9
 80085f0:	f7ff ff8e 	bl	8008510 <std>
 80085f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085f8:	2202      	movs	r2, #2
 80085fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085fe:	2112      	movs	r1, #18
 8008600:	f7ff bf86 	b.w	8008510 <std>
 8008604:	20000490 	.word	0x20000490
 8008608:	20000358 	.word	0x20000358
 800860c:	0800857d 	.word	0x0800857d

08008610 <__sfp_lock_acquire>:
 8008610:	4801      	ldr	r0, [pc, #4]	@ (8008618 <__sfp_lock_acquire+0x8>)
 8008612:	f000 ba00 	b.w	8008a16 <__retarget_lock_acquire_recursive>
 8008616:	bf00      	nop
 8008618:	20000499 	.word	0x20000499

0800861c <__sfp_lock_release>:
 800861c:	4801      	ldr	r0, [pc, #4]	@ (8008624 <__sfp_lock_release+0x8>)
 800861e:	f000 b9fb 	b.w	8008a18 <__retarget_lock_release_recursive>
 8008622:	bf00      	nop
 8008624:	20000499 	.word	0x20000499

08008628 <__sinit>:
 8008628:	b510      	push	{r4, lr}
 800862a:	4604      	mov	r4, r0
 800862c:	f7ff fff0 	bl	8008610 <__sfp_lock_acquire>
 8008630:	6a23      	ldr	r3, [r4, #32]
 8008632:	b11b      	cbz	r3, 800863c <__sinit+0x14>
 8008634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008638:	f7ff bff0 	b.w	800861c <__sfp_lock_release>
 800863c:	4b04      	ldr	r3, [pc, #16]	@ (8008650 <__sinit+0x28>)
 800863e:	6223      	str	r3, [r4, #32]
 8008640:	4b04      	ldr	r3, [pc, #16]	@ (8008654 <__sinit+0x2c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f5      	bne.n	8008634 <__sinit+0xc>
 8008648:	f7ff ffc4 	bl	80085d4 <global_stdio_init.part.0>
 800864c:	e7f2      	b.n	8008634 <__sinit+0xc>
 800864e:	bf00      	nop
 8008650:	08008595 	.word	0x08008595
 8008654:	20000490 	.word	0x20000490

08008658 <_fwalk_sglue>:
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4607      	mov	r7, r0
 800865e:	4688      	mov	r8, r1
 8008660:	4614      	mov	r4, r2
 8008662:	2600      	movs	r6, #0
 8008664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008668:	f1b9 0901 	subs.w	r9, r9, #1
 800866c:	d505      	bpl.n	800867a <_fwalk_sglue+0x22>
 800866e:	6824      	ldr	r4, [r4, #0]
 8008670:	2c00      	cmp	r4, #0
 8008672:	d1f7      	bne.n	8008664 <_fwalk_sglue+0xc>
 8008674:	4630      	mov	r0, r6
 8008676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800867a:	89ab      	ldrh	r3, [r5, #12]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d907      	bls.n	8008690 <_fwalk_sglue+0x38>
 8008680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008684:	3301      	adds	r3, #1
 8008686:	d003      	beq.n	8008690 <_fwalk_sglue+0x38>
 8008688:	4629      	mov	r1, r5
 800868a:	4638      	mov	r0, r7
 800868c:	47c0      	blx	r8
 800868e:	4306      	orrs	r6, r0
 8008690:	3568      	adds	r5, #104	@ 0x68
 8008692:	e7e9      	b.n	8008668 <_fwalk_sglue+0x10>

08008694 <iprintf>:
 8008694:	b40f      	push	{r0, r1, r2, r3}
 8008696:	b507      	push	{r0, r1, r2, lr}
 8008698:	4906      	ldr	r1, [pc, #24]	@ (80086b4 <iprintf+0x20>)
 800869a:	ab04      	add	r3, sp, #16
 800869c:	6808      	ldr	r0, [r1, #0]
 800869e:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a2:	6881      	ldr	r1, [r0, #8]
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	f000 fadb 	bl	8008c60 <_vfiprintf_r>
 80086aa:	b003      	add	sp, #12
 80086ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80086b0:	b004      	add	sp, #16
 80086b2:	4770      	bx	lr
 80086b4:	20000020 	.word	0x20000020

080086b8 <_puts_r>:
 80086b8:	6a03      	ldr	r3, [r0, #32]
 80086ba:	b570      	push	{r4, r5, r6, lr}
 80086bc:	6884      	ldr	r4, [r0, #8]
 80086be:	4605      	mov	r5, r0
 80086c0:	460e      	mov	r6, r1
 80086c2:	b90b      	cbnz	r3, 80086c8 <_puts_r+0x10>
 80086c4:	f7ff ffb0 	bl	8008628 <__sinit>
 80086c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086ca:	07db      	lsls	r3, r3, #31
 80086cc:	d405      	bmi.n	80086da <_puts_r+0x22>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	0598      	lsls	r0, r3, #22
 80086d2:	d402      	bmi.n	80086da <_puts_r+0x22>
 80086d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086d6:	f000 f99e 	bl	8008a16 <__retarget_lock_acquire_recursive>
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	0719      	lsls	r1, r3, #28
 80086de:	d502      	bpl.n	80086e6 <_puts_r+0x2e>
 80086e0:	6923      	ldr	r3, [r4, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d135      	bne.n	8008752 <_puts_r+0x9a>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4628      	mov	r0, r5
 80086ea:	f000 f8c5 	bl	8008878 <__swsetup_r>
 80086ee:	b380      	cbz	r0, 8008752 <_puts_r+0x9a>
 80086f0:	f04f 35ff 	mov.w	r5, #4294967295
 80086f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086f6:	07da      	lsls	r2, r3, #31
 80086f8:	d405      	bmi.n	8008706 <_puts_r+0x4e>
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	059b      	lsls	r3, r3, #22
 80086fe:	d402      	bmi.n	8008706 <_puts_r+0x4e>
 8008700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008702:	f000 f989 	bl	8008a18 <__retarget_lock_release_recursive>
 8008706:	4628      	mov	r0, r5
 8008708:	bd70      	pop	{r4, r5, r6, pc}
 800870a:	2b00      	cmp	r3, #0
 800870c:	da04      	bge.n	8008718 <_puts_r+0x60>
 800870e:	69a2      	ldr	r2, [r4, #24]
 8008710:	429a      	cmp	r2, r3
 8008712:	dc17      	bgt.n	8008744 <_puts_r+0x8c>
 8008714:	290a      	cmp	r1, #10
 8008716:	d015      	beq.n	8008744 <_puts_r+0x8c>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	6022      	str	r2, [r4, #0]
 800871e:	7019      	strb	r1, [r3, #0]
 8008720:	68a3      	ldr	r3, [r4, #8]
 8008722:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008726:	3b01      	subs	r3, #1
 8008728:	60a3      	str	r3, [r4, #8]
 800872a:	2900      	cmp	r1, #0
 800872c:	d1ed      	bne.n	800870a <_puts_r+0x52>
 800872e:	2b00      	cmp	r3, #0
 8008730:	da11      	bge.n	8008756 <_puts_r+0x9e>
 8008732:	4622      	mov	r2, r4
 8008734:	210a      	movs	r1, #10
 8008736:	4628      	mov	r0, r5
 8008738:	f000 f85f 	bl	80087fa <__swbuf_r>
 800873c:	3001      	adds	r0, #1
 800873e:	d0d7      	beq.n	80086f0 <_puts_r+0x38>
 8008740:	250a      	movs	r5, #10
 8008742:	e7d7      	b.n	80086f4 <_puts_r+0x3c>
 8008744:	4622      	mov	r2, r4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f857 	bl	80087fa <__swbuf_r>
 800874c:	3001      	adds	r0, #1
 800874e:	d1e7      	bne.n	8008720 <_puts_r+0x68>
 8008750:	e7ce      	b.n	80086f0 <_puts_r+0x38>
 8008752:	3e01      	subs	r6, #1
 8008754:	e7e4      	b.n	8008720 <_puts_r+0x68>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	6022      	str	r2, [r4, #0]
 800875c:	220a      	movs	r2, #10
 800875e:	701a      	strb	r2, [r3, #0]
 8008760:	e7ee      	b.n	8008740 <_puts_r+0x88>
	...

08008764 <puts>:
 8008764:	4b02      	ldr	r3, [pc, #8]	@ (8008770 <puts+0xc>)
 8008766:	4601      	mov	r1, r0
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	f7ff bfa5 	b.w	80086b8 <_puts_r>
 800876e:	bf00      	nop
 8008770:	20000020 	.word	0x20000020

08008774 <__sread>:
 8008774:	b510      	push	{r4, lr}
 8008776:	460c      	mov	r4, r1
 8008778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877c:	f000 f8fc 	bl	8008978 <_read_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	bfab      	itete	ge
 8008784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008786:	89a3      	ldrhlt	r3, [r4, #12]
 8008788:	181b      	addge	r3, r3, r0
 800878a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800878e:	bfac      	ite	ge
 8008790:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008792:	81a3      	strhlt	r3, [r4, #12]
 8008794:	bd10      	pop	{r4, pc}

08008796 <__swrite>:
 8008796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879a:	461f      	mov	r7, r3
 800879c:	898b      	ldrh	r3, [r1, #12]
 800879e:	05db      	lsls	r3, r3, #23
 80087a0:	4605      	mov	r5, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	4616      	mov	r6, r2
 80087a6:	d505      	bpl.n	80087b4 <__swrite+0x1e>
 80087a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ac:	2302      	movs	r3, #2
 80087ae:	2200      	movs	r2, #0
 80087b0:	f000 f8d0 	bl	8008954 <_lseek_r>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	4632      	mov	r2, r6
 80087c2:	463b      	mov	r3, r7
 80087c4:	4628      	mov	r0, r5
 80087c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ca:	f000 b8e7 	b.w	800899c <_write_r>

080087ce <__sseek>:
 80087ce:	b510      	push	{r4, lr}
 80087d0:	460c      	mov	r4, r1
 80087d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d6:	f000 f8bd 	bl	8008954 <_lseek_r>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	bf15      	itete	ne
 80087e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087ea:	81a3      	strheq	r3, [r4, #12]
 80087ec:	bf18      	it	ne
 80087ee:	81a3      	strhne	r3, [r4, #12]
 80087f0:	bd10      	pop	{r4, pc}

080087f2 <__sclose>:
 80087f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f6:	f000 b89d 	b.w	8008934 <_close_r>

080087fa <__swbuf_r>:
 80087fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fc:	460e      	mov	r6, r1
 80087fe:	4614      	mov	r4, r2
 8008800:	4605      	mov	r5, r0
 8008802:	b118      	cbz	r0, 800880c <__swbuf_r+0x12>
 8008804:	6a03      	ldr	r3, [r0, #32]
 8008806:	b90b      	cbnz	r3, 800880c <__swbuf_r+0x12>
 8008808:	f7ff ff0e 	bl	8008628 <__sinit>
 800880c:	69a3      	ldr	r3, [r4, #24]
 800880e:	60a3      	str	r3, [r4, #8]
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	071a      	lsls	r2, r3, #28
 8008814:	d501      	bpl.n	800881a <__swbuf_r+0x20>
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	b943      	cbnz	r3, 800882c <__swbuf_r+0x32>
 800881a:	4621      	mov	r1, r4
 800881c:	4628      	mov	r0, r5
 800881e:	f000 f82b 	bl	8008878 <__swsetup_r>
 8008822:	b118      	cbz	r0, 800882c <__swbuf_r+0x32>
 8008824:	f04f 37ff 	mov.w	r7, #4294967295
 8008828:	4638      	mov	r0, r7
 800882a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	6922      	ldr	r2, [r4, #16]
 8008830:	1a98      	subs	r0, r3, r2
 8008832:	6963      	ldr	r3, [r4, #20]
 8008834:	b2f6      	uxtb	r6, r6
 8008836:	4283      	cmp	r3, r0
 8008838:	4637      	mov	r7, r6
 800883a:	dc05      	bgt.n	8008848 <__swbuf_r+0x4e>
 800883c:	4621      	mov	r1, r4
 800883e:	4628      	mov	r0, r5
 8008840:	f000 fd36 	bl	80092b0 <_fflush_r>
 8008844:	2800      	cmp	r0, #0
 8008846:	d1ed      	bne.n	8008824 <__swbuf_r+0x2a>
 8008848:	68a3      	ldr	r3, [r4, #8]
 800884a:	3b01      	subs	r3, #1
 800884c:	60a3      	str	r3, [r4, #8]
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	6022      	str	r2, [r4, #0]
 8008854:	701e      	strb	r6, [r3, #0]
 8008856:	6962      	ldr	r2, [r4, #20]
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	429a      	cmp	r2, r3
 800885c:	d004      	beq.n	8008868 <__swbuf_r+0x6e>
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	07db      	lsls	r3, r3, #31
 8008862:	d5e1      	bpl.n	8008828 <__swbuf_r+0x2e>
 8008864:	2e0a      	cmp	r6, #10
 8008866:	d1df      	bne.n	8008828 <__swbuf_r+0x2e>
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 fd20 	bl	80092b0 <_fflush_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	d0d9      	beq.n	8008828 <__swbuf_r+0x2e>
 8008874:	e7d6      	b.n	8008824 <__swbuf_r+0x2a>
	...

08008878 <__swsetup_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4b29      	ldr	r3, [pc, #164]	@ (8008920 <__swsetup_r+0xa8>)
 800887c:	4605      	mov	r5, r0
 800887e:	6818      	ldr	r0, [r3, #0]
 8008880:	460c      	mov	r4, r1
 8008882:	b118      	cbz	r0, 800888c <__swsetup_r+0x14>
 8008884:	6a03      	ldr	r3, [r0, #32]
 8008886:	b90b      	cbnz	r3, 800888c <__swsetup_r+0x14>
 8008888:	f7ff fece 	bl	8008628 <__sinit>
 800888c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008890:	0719      	lsls	r1, r3, #28
 8008892:	d422      	bmi.n	80088da <__swsetup_r+0x62>
 8008894:	06da      	lsls	r2, r3, #27
 8008896:	d407      	bmi.n	80088a8 <__swsetup_r+0x30>
 8008898:	2209      	movs	r2, #9
 800889a:	602a      	str	r2, [r5, #0]
 800889c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	e033      	b.n	8008910 <__swsetup_r+0x98>
 80088a8:	0758      	lsls	r0, r3, #29
 80088aa:	d512      	bpl.n	80088d2 <__swsetup_r+0x5a>
 80088ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088ae:	b141      	cbz	r1, 80088c2 <__swsetup_r+0x4a>
 80088b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088b4:	4299      	cmp	r1, r3
 80088b6:	d002      	beq.n	80088be <__swsetup_r+0x46>
 80088b8:	4628      	mov	r0, r5
 80088ba:	f000 f8af 	bl	8008a1c <_free_r>
 80088be:	2300      	movs	r3, #0
 80088c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	2300      	movs	r3, #0
 80088cc:	6063      	str	r3, [r4, #4]
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f043 0308 	orr.w	r3, r3, #8
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	b94b      	cbnz	r3, 80088f2 <__swsetup_r+0x7a>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088e8:	d003      	beq.n	80088f2 <__swsetup_r+0x7a>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	f000 fd2d 	bl	800934c <__smakebuf_r>
 80088f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f6:	f013 0201 	ands.w	r2, r3, #1
 80088fa:	d00a      	beq.n	8008912 <__swsetup_r+0x9a>
 80088fc:	2200      	movs	r2, #0
 80088fe:	60a2      	str	r2, [r4, #8]
 8008900:	6962      	ldr	r2, [r4, #20]
 8008902:	4252      	negs	r2, r2
 8008904:	61a2      	str	r2, [r4, #24]
 8008906:	6922      	ldr	r2, [r4, #16]
 8008908:	b942      	cbnz	r2, 800891c <__swsetup_r+0xa4>
 800890a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800890e:	d1c5      	bne.n	800889c <__swsetup_r+0x24>
 8008910:	bd38      	pop	{r3, r4, r5, pc}
 8008912:	0799      	lsls	r1, r3, #30
 8008914:	bf58      	it	pl
 8008916:	6962      	ldrpl	r2, [r4, #20]
 8008918:	60a2      	str	r2, [r4, #8]
 800891a:	e7f4      	b.n	8008906 <__swsetup_r+0x8e>
 800891c:	2000      	movs	r0, #0
 800891e:	e7f7      	b.n	8008910 <__swsetup_r+0x98>
 8008920:	20000020 	.word	0x20000020

08008924 <memset>:
 8008924:	4402      	add	r2, r0
 8008926:	4603      	mov	r3, r0
 8008928:	4293      	cmp	r3, r2
 800892a:	d100      	bne.n	800892e <memset+0xa>
 800892c:	4770      	bx	lr
 800892e:	f803 1b01 	strb.w	r1, [r3], #1
 8008932:	e7f9      	b.n	8008928 <memset+0x4>

08008934 <_close_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d06      	ldr	r5, [pc, #24]	@ (8008950 <_close_r+0x1c>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	f7f8 ffdb 	bl	80018fa <_close>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_close_r+0x1a>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_close_r+0x1a>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	20000494 	.word	0x20000494

08008954 <_lseek_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	@ (8008974 <_lseek_r+0x20>)
 8008958:	4604      	mov	r4, r0
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	2200      	movs	r2, #0
 8008960:	602a      	str	r2, [r5, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f7f8 fff0 	bl	8001948 <_lseek>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_lseek_r+0x1e>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_lseek_r+0x1e>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	20000494 	.word	0x20000494

08008978 <_read_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	@ (8008998 <_read_r+0x20>)
 800897c:	4604      	mov	r4, r0
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	2200      	movs	r2, #0
 8008984:	602a      	str	r2, [r5, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	f7f8 ff7e 	bl	8001888 <_read>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_read_r+0x1e>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_read_r+0x1e>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	20000494 	.word	0x20000494

0800899c <_write_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d07      	ldr	r5, [pc, #28]	@ (80089bc <_write_r+0x20>)
 80089a0:	4604      	mov	r4, r0
 80089a2:	4608      	mov	r0, r1
 80089a4:	4611      	mov	r1, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	602a      	str	r2, [r5, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f7f8 ff89 	bl	80018c2 <_write>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d102      	bne.n	80089ba <_write_r+0x1e>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	b103      	cbz	r3, 80089ba <_write_r+0x1e>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	20000494 	.word	0x20000494

080089c0 <__errno>:
 80089c0:	4b01      	ldr	r3, [pc, #4]	@ (80089c8 <__errno+0x8>)
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	20000020 	.word	0x20000020

080089cc <__libc_init_array>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	4d0d      	ldr	r5, [pc, #52]	@ (8008a04 <__libc_init_array+0x38>)
 80089d0:	4c0d      	ldr	r4, [pc, #52]	@ (8008a08 <__libc_init_array+0x3c>)
 80089d2:	1b64      	subs	r4, r4, r5
 80089d4:	10a4      	asrs	r4, r4, #2
 80089d6:	2600      	movs	r6, #0
 80089d8:	42a6      	cmp	r6, r4
 80089da:	d109      	bne.n	80089f0 <__libc_init_array+0x24>
 80089dc:	4d0b      	ldr	r5, [pc, #44]	@ (8008a0c <__libc_init_array+0x40>)
 80089de:	4c0c      	ldr	r4, [pc, #48]	@ (8008a10 <__libc_init_array+0x44>)
 80089e0:	f000 fd22 	bl	8009428 <_init>
 80089e4:	1b64      	subs	r4, r4, r5
 80089e6:	10a4      	asrs	r4, r4, #2
 80089e8:	2600      	movs	r6, #0
 80089ea:	42a6      	cmp	r6, r4
 80089ec:	d105      	bne.n	80089fa <__libc_init_array+0x2e>
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f4:	4798      	blx	r3
 80089f6:	3601      	adds	r6, #1
 80089f8:	e7ee      	b.n	80089d8 <__libc_init_array+0xc>
 80089fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fe:	4798      	blx	r3
 8008a00:	3601      	adds	r6, #1
 8008a02:	e7f2      	b.n	80089ea <__libc_init_array+0x1e>
 8008a04:	08009618 	.word	0x08009618
 8008a08:	08009618 	.word	0x08009618
 8008a0c:	08009618 	.word	0x08009618
 8008a10:	0800961c 	.word	0x0800961c

08008a14 <__retarget_lock_init_recursive>:
 8008a14:	4770      	bx	lr

08008a16 <__retarget_lock_acquire_recursive>:
 8008a16:	4770      	bx	lr

08008a18 <__retarget_lock_release_recursive>:
 8008a18:	4770      	bx	lr
	...

08008a1c <_free_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4605      	mov	r5, r0
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d041      	beq.n	8008aa8 <_free_r+0x8c>
 8008a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a28:	1f0c      	subs	r4, r1, #4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	bfb8      	it	lt
 8008a2e:	18e4      	addlt	r4, r4, r3
 8008a30:	f000 f8e0 	bl	8008bf4 <__malloc_lock>
 8008a34:	4a1d      	ldr	r2, [pc, #116]	@ (8008aac <_free_r+0x90>)
 8008a36:	6813      	ldr	r3, [r2, #0]
 8008a38:	b933      	cbnz	r3, 8008a48 <_free_r+0x2c>
 8008a3a:	6063      	str	r3, [r4, #4]
 8008a3c:	6014      	str	r4, [r2, #0]
 8008a3e:	4628      	mov	r0, r5
 8008a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a44:	f000 b8dc 	b.w	8008c00 <__malloc_unlock>
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	d908      	bls.n	8008a5e <_free_r+0x42>
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	1821      	adds	r1, r4, r0
 8008a50:	428b      	cmp	r3, r1
 8008a52:	bf01      	itttt	eq
 8008a54:	6819      	ldreq	r1, [r3, #0]
 8008a56:	685b      	ldreq	r3, [r3, #4]
 8008a58:	1809      	addeq	r1, r1, r0
 8008a5a:	6021      	streq	r1, [r4, #0]
 8008a5c:	e7ed      	b.n	8008a3a <_free_r+0x1e>
 8008a5e:	461a      	mov	r2, r3
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	b10b      	cbz	r3, 8008a68 <_free_r+0x4c>
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	d9fa      	bls.n	8008a5e <_free_r+0x42>
 8008a68:	6811      	ldr	r1, [r2, #0]
 8008a6a:	1850      	adds	r0, r2, r1
 8008a6c:	42a0      	cmp	r0, r4
 8008a6e:	d10b      	bne.n	8008a88 <_free_r+0x6c>
 8008a70:	6820      	ldr	r0, [r4, #0]
 8008a72:	4401      	add	r1, r0
 8008a74:	1850      	adds	r0, r2, r1
 8008a76:	4283      	cmp	r3, r0
 8008a78:	6011      	str	r1, [r2, #0]
 8008a7a:	d1e0      	bne.n	8008a3e <_free_r+0x22>
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	6053      	str	r3, [r2, #4]
 8008a82:	4408      	add	r0, r1
 8008a84:	6010      	str	r0, [r2, #0]
 8008a86:	e7da      	b.n	8008a3e <_free_r+0x22>
 8008a88:	d902      	bls.n	8008a90 <_free_r+0x74>
 8008a8a:	230c      	movs	r3, #12
 8008a8c:	602b      	str	r3, [r5, #0]
 8008a8e:	e7d6      	b.n	8008a3e <_free_r+0x22>
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	1821      	adds	r1, r4, r0
 8008a94:	428b      	cmp	r3, r1
 8008a96:	bf04      	itt	eq
 8008a98:	6819      	ldreq	r1, [r3, #0]
 8008a9a:	685b      	ldreq	r3, [r3, #4]
 8008a9c:	6063      	str	r3, [r4, #4]
 8008a9e:	bf04      	itt	eq
 8008aa0:	1809      	addeq	r1, r1, r0
 8008aa2:	6021      	streq	r1, [r4, #0]
 8008aa4:	6054      	str	r4, [r2, #4]
 8008aa6:	e7ca      	b.n	8008a3e <_free_r+0x22>
 8008aa8:	bd38      	pop	{r3, r4, r5, pc}
 8008aaa:	bf00      	nop
 8008aac:	200004a0 	.word	0x200004a0

08008ab0 <sbrk_aligned>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8008af0 <sbrk_aligned+0x40>)
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	6831      	ldr	r1, [r6, #0]
 8008ab8:	4605      	mov	r5, r0
 8008aba:	b911      	cbnz	r1, 8008ac2 <sbrk_aligned+0x12>
 8008abc:	f000 fca4 	bl	8009408 <_sbrk_r>
 8008ac0:	6030      	str	r0, [r6, #0]
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 fc9f 	bl	8009408 <_sbrk_r>
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	d103      	bne.n	8008ad6 <sbrk_aligned+0x26>
 8008ace:	f04f 34ff 	mov.w	r4, #4294967295
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	bd70      	pop	{r4, r5, r6, pc}
 8008ad6:	1cc4      	adds	r4, r0, #3
 8008ad8:	f024 0403 	bic.w	r4, r4, #3
 8008adc:	42a0      	cmp	r0, r4
 8008ade:	d0f8      	beq.n	8008ad2 <sbrk_aligned+0x22>
 8008ae0:	1a21      	subs	r1, r4, r0
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f000 fc90 	bl	8009408 <_sbrk_r>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d1f2      	bne.n	8008ad2 <sbrk_aligned+0x22>
 8008aec:	e7ef      	b.n	8008ace <sbrk_aligned+0x1e>
 8008aee:	bf00      	nop
 8008af0:	2000049c 	.word	0x2000049c

08008af4 <_malloc_r>:
 8008af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af8:	1ccd      	adds	r5, r1, #3
 8008afa:	f025 0503 	bic.w	r5, r5, #3
 8008afe:	3508      	adds	r5, #8
 8008b00:	2d0c      	cmp	r5, #12
 8008b02:	bf38      	it	cc
 8008b04:	250c      	movcc	r5, #12
 8008b06:	2d00      	cmp	r5, #0
 8008b08:	4606      	mov	r6, r0
 8008b0a:	db01      	blt.n	8008b10 <_malloc_r+0x1c>
 8008b0c:	42a9      	cmp	r1, r5
 8008b0e:	d904      	bls.n	8008b1a <_malloc_r+0x26>
 8008b10:	230c      	movs	r3, #12
 8008b12:	6033      	str	r3, [r6, #0]
 8008b14:	2000      	movs	r0, #0
 8008b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bf0 <_malloc_r+0xfc>
 8008b1e:	f000 f869 	bl	8008bf4 <__malloc_lock>
 8008b22:	f8d8 3000 	ldr.w	r3, [r8]
 8008b26:	461c      	mov	r4, r3
 8008b28:	bb44      	cbnz	r4, 8008b7c <_malloc_r+0x88>
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7ff ffbf 	bl	8008ab0 <sbrk_aligned>
 8008b32:	1c43      	adds	r3, r0, #1
 8008b34:	4604      	mov	r4, r0
 8008b36:	d158      	bne.n	8008bea <_malloc_r+0xf6>
 8008b38:	f8d8 4000 	ldr.w	r4, [r8]
 8008b3c:	4627      	mov	r7, r4
 8008b3e:	2f00      	cmp	r7, #0
 8008b40:	d143      	bne.n	8008bca <_malloc_r+0xd6>
 8008b42:	2c00      	cmp	r4, #0
 8008b44:	d04b      	beq.n	8008bde <_malloc_r+0xea>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	4639      	mov	r1, r7
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	eb04 0903 	add.w	r9, r4, r3
 8008b50:	f000 fc5a 	bl	8009408 <_sbrk_r>
 8008b54:	4581      	cmp	r9, r0
 8008b56:	d142      	bne.n	8008bde <_malloc_r+0xea>
 8008b58:	6821      	ldr	r1, [r4, #0]
 8008b5a:	1a6d      	subs	r5, r5, r1
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff ffa6 	bl	8008ab0 <sbrk_aligned>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d03a      	beq.n	8008bde <_malloc_r+0xea>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	442b      	add	r3, r5
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	bb62      	cbnz	r2, 8008bd0 <_malloc_r+0xdc>
 8008b76:	f8c8 7000 	str.w	r7, [r8]
 8008b7a:	e00f      	b.n	8008b9c <_malloc_r+0xa8>
 8008b7c:	6822      	ldr	r2, [r4, #0]
 8008b7e:	1b52      	subs	r2, r2, r5
 8008b80:	d420      	bmi.n	8008bc4 <_malloc_r+0xd0>
 8008b82:	2a0b      	cmp	r2, #11
 8008b84:	d917      	bls.n	8008bb6 <_malloc_r+0xc2>
 8008b86:	1961      	adds	r1, r4, r5
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	6025      	str	r5, [r4, #0]
 8008b8c:	bf18      	it	ne
 8008b8e:	6059      	strne	r1, [r3, #4]
 8008b90:	6863      	ldr	r3, [r4, #4]
 8008b92:	bf08      	it	eq
 8008b94:	f8c8 1000 	streq.w	r1, [r8]
 8008b98:	5162      	str	r2, [r4, r5]
 8008b9a:	604b      	str	r3, [r1, #4]
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f000 f82f 	bl	8008c00 <__malloc_unlock>
 8008ba2:	f104 000b 	add.w	r0, r4, #11
 8008ba6:	1d23      	adds	r3, r4, #4
 8008ba8:	f020 0007 	bic.w	r0, r0, #7
 8008bac:	1ac2      	subs	r2, r0, r3
 8008bae:	bf1c      	itt	ne
 8008bb0:	1a1b      	subne	r3, r3, r0
 8008bb2:	50a3      	strne	r3, [r4, r2]
 8008bb4:	e7af      	b.n	8008b16 <_malloc_r+0x22>
 8008bb6:	6862      	ldr	r2, [r4, #4]
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	bf0c      	ite	eq
 8008bbc:	f8c8 2000 	streq.w	r2, [r8]
 8008bc0:	605a      	strne	r2, [r3, #4]
 8008bc2:	e7eb      	b.n	8008b9c <_malloc_r+0xa8>
 8008bc4:	4623      	mov	r3, r4
 8008bc6:	6864      	ldr	r4, [r4, #4]
 8008bc8:	e7ae      	b.n	8008b28 <_malloc_r+0x34>
 8008bca:	463c      	mov	r4, r7
 8008bcc:	687f      	ldr	r7, [r7, #4]
 8008bce:	e7b6      	b.n	8008b3e <_malloc_r+0x4a>
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	d1fb      	bne.n	8008bd0 <_malloc_r+0xdc>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	6053      	str	r3, [r2, #4]
 8008bdc:	e7de      	b.n	8008b9c <_malloc_r+0xa8>
 8008bde:	230c      	movs	r3, #12
 8008be0:	6033      	str	r3, [r6, #0]
 8008be2:	4630      	mov	r0, r6
 8008be4:	f000 f80c 	bl	8008c00 <__malloc_unlock>
 8008be8:	e794      	b.n	8008b14 <_malloc_r+0x20>
 8008bea:	6005      	str	r5, [r0, #0]
 8008bec:	e7d6      	b.n	8008b9c <_malloc_r+0xa8>
 8008bee:	bf00      	nop
 8008bf0:	200004a0 	.word	0x200004a0

08008bf4 <__malloc_lock>:
 8008bf4:	4801      	ldr	r0, [pc, #4]	@ (8008bfc <__malloc_lock+0x8>)
 8008bf6:	f7ff bf0e 	b.w	8008a16 <__retarget_lock_acquire_recursive>
 8008bfa:	bf00      	nop
 8008bfc:	20000498 	.word	0x20000498

08008c00 <__malloc_unlock>:
 8008c00:	4801      	ldr	r0, [pc, #4]	@ (8008c08 <__malloc_unlock+0x8>)
 8008c02:	f7ff bf09 	b.w	8008a18 <__retarget_lock_release_recursive>
 8008c06:	bf00      	nop
 8008c08:	20000498 	.word	0x20000498

08008c0c <__sfputc_r>:
 8008c0c:	6893      	ldr	r3, [r2, #8]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	b410      	push	{r4}
 8008c14:	6093      	str	r3, [r2, #8]
 8008c16:	da08      	bge.n	8008c2a <__sfputc_r+0x1e>
 8008c18:	6994      	ldr	r4, [r2, #24]
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	db01      	blt.n	8008c22 <__sfputc_r+0x16>
 8008c1e:	290a      	cmp	r1, #10
 8008c20:	d103      	bne.n	8008c2a <__sfputc_r+0x1e>
 8008c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c26:	f7ff bde8 	b.w	80087fa <__swbuf_r>
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	1c58      	adds	r0, r3, #1
 8008c2e:	6010      	str	r0, [r2, #0]
 8008c30:	7019      	strb	r1, [r3, #0]
 8008c32:	4608      	mov	r0, r1
 8008c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <__sfputs_r>:
 8008c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	460f      	mov	r7, r1
 8008c40:	4614      	mov	r4, r2
 8008c42:	18d5      	adds	r5, r2, r3
 8008c44:	42ac      	cmp	r4, r5
 8008c46:	d101      	bne.n	8008c4c <__sfputs_r+0x12>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e007      	b.n	8008c5c <__sfputs_r+0x22>
 8008c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c50:	463a      	mov	r2, r7
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ffda 	bl	8008c0c <__sfputc_r>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d1f3      	bne.n	8008c44 <__sfputs_r+0xa>
 8008c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c60 <_vfiprintf_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	460d      	mov	r5, r1
 8008c66:	b09d      	sub	sp, #116	@ 0x74
 8008c68:	4614      	mov	r4, r2
 8008c6a:	4698      	mov	r8, r3
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	b118      	cbz	r0, 8008c78 <_vfiprintf_r+0x18>
 8008c70:	6a03      	ldr	r3, [r0, #32]
 8008c72:	b90b      	cbnz	r3, 8008c78 <_vfiprintf_r+0x18>
 8008c74:	f7ff fcd8 	bl	8008628 <__sinit>
 8008c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c7a:	07d9      	lsls	r1, r3, #31
 8008c7c:	d405      	bmi.n	8008c8a <_vfiprintf_r+0x2a>
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	059a      	lsls	r2, r3, #22
 8008c82:	d402      	bmi.n	8008c8a <_vfiprintf_r+0x2a>
 8008c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c86:	f7ff fec6 	bl	8008a16 <__retarget_lock_acquire_recursive>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	071b      	lsls	r3, r3, #28
 8008c8e:	d501      	bpl.n	8008c94 <_vfiprintf_r+0x34>
 8008c90:	692b      	ldr	r3, [r5, #16]
 8008c92:	b99b      	cbnz	r3, 8008cbc <_vfiprintf_r+0x5c>
 8008c94:	4629      	mov	r1, r5
 8008c96:	4630      	mov	r0, r6
 8008c98:	f7ff fdee 	bl	8008878 <__swsetup_r>
 8008c9c:	b170      	cbz	r0, 8008cbc <_vfiprintf_r+0x5c>
 8008c9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ca0:	07dc      	lsls	r4, r3, #31
 8008ca2:	d504      	bpl.n	8008cae <_vfiprintf_r+0x4e>
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	b01d      	add	sp, #116	@ 0x74
 8008caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cae:	89ab      	ldrh	r3, [r5, #12]
 8008cb0:	0598      	lsls	r0, r3, #22
 8008cb2:	d4f7      	bmi.n	8008ca4 <_vfiprintf_r+0x44>
 8008cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cb6:	f7ff feaf 	bl	8008a18 <__retarget_lock_release_recursive>
 8008cba:	e7f3      	b.n	8008ca4 <_vfiprintf_r+0x44>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc0:	2320      	movs	r3, #32
 8008cc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cca:	2330      	movs	r3, #48	@ 0x30
 8008ccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e7c <_vfiprintf_r+0x21c>
 8008cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cd4:	f04f 0901 	mov.w	r9, #1
 8008cd8:	4623      	mov	r3, r4
 8008cda:	469a      	mov	sl, r3
 8008cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce0:	b10a      	cbz	r2, 8008ce6 <_vfiprintf_r+0x86>
 8008ce2:	2a25      	cmp	r2, #37	@ 0x25
 8008ce4:	d1f9      	bne.n	8008cda <_vfiprintf_r+0x7a>
 8008ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cea:	d00b      	beq.n	8008d04 <_vfiprintf_r+0xa4>
 8008cec:	465b      	mov	r3, fp
 8008cee:	4622      	mov	r2, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7ff ffa1 	bl	8008c3a <__sfputs_r>
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	f000 80a7 	beq.w	8008e4c <_vfiprintf_r+0x1ec>
 8008cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d00:	445a      	add	r2, fp
 8008d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d04:	f89a 3000 	ldrb.w	r3, [sl]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 809f 	beq.w	8008e4c <_vfiprintf_r+0x1ec>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f04f 32ff 	mov.w	r2, #4294967295
 8008d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d18:	f10a 0a01 	add.w	sl, sl, #1
 8008d1c:	9304      	str	r3, [sp, #16]
 8008d1e:	9307      	str	r3, [sp, #28]
 8008d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d26:	4654      	mov	r4, sl
 8008d28:	2205      	movs	r2, #5
 8008d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2e:	4853      	ldr	r0, [pc, #332]	@ (8008e7c <_vfiprintf_r+0x21c>)
 8008d30:	f7f7 fa76 	bl	8000220 <memchr>
 8008d34:	9a04      	ldr	r2, [sp, #16]
 8008d36:	b9d8      	cbnz	r0, 8008d70 <_vfiprintf_r+0x110>
 8008d38:	06d1      	lsls	r1, r2, #27
 8008d3a:	bf44      	itt	mi
 8008d3c:	2320      	movmi	r3, #32
 8008d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d42:	0713      	lsls	r3, r2, #28
 8008d44:	bf44      	itt	mi
 8008d46:	232b      	movmi	r3, #43	@ 0x2b
 8008d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d52:	d015      	beq.n	8008d80 <_vfiprintf_r+0x120>
 8008d54:	9a07      	ldr	r2, [sp, #28]
 8008d56:	4654      	mov	r4, sl
 8008d58:	2000      	movs	r0, #0
 8008d5a:	f04f 0c0a 	mov.w	ip, #10
 8008d5e:	4621      	mov	r1, r4
 8008d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d64:	3b30      	subs	r3, #48	@ 0x30
 8008d66:	2b09      	cmp	r3, #9
 8008d68:	d94b      	bls.n	8008e02 <_vfiprintf_r+0x1a2>
 8008d6a:	b1b0      	cbz	r0, 8008d9a <_vfiprintf_r+0x13a>
 8008d6c:	9207      	str	r2, [sp, #28]
 8008d6e:	e014      	b.n	8008d9a <_vfiprintf_r+0x13a>
 8008d70:	eba0 0308 	sub.w	r3, r0, r8
 8008d74:	fa09 f303 	lsl.w	r3, r9, r3
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	46a2      	mov	sl, r4
 8008d7e:	e7d2      	b.n	8008d26 <_vfiprintf_r+0xc6>
 8008d80:	9b03      	ldr	r3, [sp, #12]
 8008d82:	1d19      	adds	r1, r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	9103      	str	r1, [sp, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bfbb      	ittet	lt
 8008d8c:	425b      	neglt	r3, r3
 8008d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d92:	9307      	strge	r3, [sp, #28]
 8008d94:	9307      	strlt	r3, [sp, #28]
 8008d96:	bfb8      	it	lt
 8008d98:	9204      	strlt	r2, [sp, #16]
 8008d9a:	7823      	ldrb	r3, [r4, #0]
 8008d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d9e:	d10a      	bne.n	8008db6 <_vfiprintf_r+0x156>
 8008da0:	7863      	ldrb	r3, [r4, #1]
 8008da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008da4:	d132      	bne.n	8008e0c <_vfiprintf_r+0x1ac>
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	1d1a      	adds	r2, r3, #4
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	9203      	str	r2, [sp, #12]
 8008dae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008db2:	3402      	adds	r4, #2
 8008db4:	9305      	str	r3, [sp, #20]
 8008db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e8c <_vfiprintf_r+0x22c>
 8008dba:	7821      	ldrb	r1, [r4, #0]
 8008dbc:	2203      	movs	r2, #3
 8008dbe:	4650      	mov	r0, sl
 8008dc0:	f7f7 fa2e 	bl	8000220 <memchr>
 8008dc4:	b138      	cbz	r0, 8008dd6 <_vfiprintf_r+0x176>
 8008dc6:	9b04      	ldr	r3, [sp, #16]
 8008dc8:	eba0 000a 	sub.w	r0, r0, sl
 8008dcc:	2240      	movs	r2, #64	@ 0x40
 8008dce:	4082      	lsls	r2, r0
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	3401      	adds	r4, #1
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dda:	4829      	ldr	r0, [pc, #164]	@ (8008e80 <_vfiprintf_r+0x220>)
 8008ddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008de0:	2206      	movs	r2, #6
 8008de2:	f7f7 fa1d 	bl	8000220 <memchr>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d03f      	beq.n	8008e6a <_vfiprintf_r+0x20a>
 8008dea:	4b26      	ldr	r3, [pc, #152]	@ (8008e84 <_vfiprintf_r+0x224>)
 8008dec:	bb1b      	cbnz	r3, 8008e36 <_vfiprintf_r+0x1d6>
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	3307      	adds	r3, #7
 8008df2:	f023 0307 	bic.w	r3, r3, #7
 8008df6:	3308      	adds	r3, #8
 8008df8:	9303      	str	r3, [sp, #12]
 8008dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dfc:	443b      	add	r3, r7
 8008dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e00:	e76a      	b.n	8008cd8 <_vfiprintf_r+0x78>
 8008e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e06:	460c      	mov	r4, r1
 8008e08:	2001      	movs	r0, #1
 8008e0a:	e7a8      	b.n	8008d5e <_vfiprintf_r+0xfe>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	3401      	adds	r4, #1
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	4619      	mov	r1, r3
 8008e14:	f04f 0c0a 	mov.w	ip, #10
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e1e:	3a30      	subs	r2, #48	@ 0x30
 8008e20:	2a09      	cmp	r2, #9
 8008e22:	d903      	bls.n	8008e2c <_vfiprintf_r+0x1cc>
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0c6      	beq.n	8008db6 <_vfiprintf_r+0x156>
 8008e28:	9105      	str	r1, [sp, #20]
 8008e2a:	e7c4      	b.n	8008db6 <_vfiprintf_r+0x156>
 8008e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e30:	4604      	mov	r4, r0
 8008e32:	2301      	movs	r3, #1
 8008e34:	e7f0      	b.n	8008e18 <_vfiprintf_r+0x1b8>
 8008e36:	ab03      	add	r3, sp, #12
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	4b12      	ldr	r3, [pc, #72]	@ (8008e88 <_vfiprintf_r+0x228>)
 8008e3e:	a904      	add	r1, sp, #16
 8008e40:	4630      	mov	r0, r6
 8008e42:	f3af 8000 	nop.w
 8008e46:	4607      	mov	r7, r0
 8008e48:	1c78      	adds	r0, r7, #1
 8008e4a:	d1d6      	bne.n	8008dfa <_vfiprintf_r+0x19a>
 8008e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e4e:	07d9      	lsls	r1, r3, #31
 8008e50:	d405      	bmi.n	8008e5e <_vfiprintf_r+0x1fe>
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	059a      	lsls	r2, r3, #22
 8008e56:	d402      	bmi.n	8008e5e <_vfiprintf_r+0x1fe>
 8008e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e5a:	f7ff fddd 	bl	8008a18 <__retarget_lock_release_recursive>
 8008e5e:	89ab      	ldrh	r3, [r5, #12]
 8008e60:	065b      	lsls	r3, r3, #25
 8008e62:	f53f af1f 	bmi.w	8008ca4 <_vfiprintf_r+0x44>
 8008e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e68:	e71e      	b.n	8008ca8 <_vfiprintf_r+0x48>
 8008e6a:	ab03      	add	r3, sp, #12
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	462a      	mov	r2, r5
 8008e70:	4b05      	ldr	r3, [pc, #20]	@ (8008e88 <_vfiprintf_r+0x228>)
 8008e72:	a904      	add	r1, sp, #16
 8008e74:	4630      	mov	r0, r6
 8008e76:	f000 f879 	bl	8008f6c <_printf_i>
 8008e7a:	e7e4      	b.n	8008e46 <_vfiprintf_r+0x1e6>
 8008e7c:	080095dc 	.word	0x080095dc
 8008e80:	080095e6 	.word	0x080095e6
 8008e84:	00000000 	.word	0x00000000
 8008e88:	08008c3b 	.word	0x08008c3b
 8008e8c:	080095e2 	.word	0x080095e2

08008e90 <_printf_common>:
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	4616      	mov	r6, r2
 8008e96:	4698      	mov	r8, r3
 8008e98:	688a      	ldr	r2, [r1, #8]
 8008e9a:	690b      	ldr	r3, [r1, #16]
 8008e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	bfb8      	it	lt
 8008ea4:	4613      	movlt	r3, r2
 8008ea6:	6033      	str	r3, [r6, #0]
 8008ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008eac:	4607      	mov	r7, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	b10a      	cbz	r2, 8008eb6 <_printf_common+0x26>
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	6033      	str	r3, [r6, #0]
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	0699      	lsls	r1, r3, #26
 8008eba:	bf42      	ittt	mi
 8008ebc:	6833      	ldrmi	r3, [r6, #0]
 8008ebe:	3302      	addmi	r3, #2
 8008ec0:	6033      	strmi	r3, [r6, #0]
 8008ec2:	6825      	ldr	r5, [r4, #0]
 8008ec4:	f015 0506 	ands.w	r5, r5, #6
 8008ec8:	d106      	bne.n	8008ed8 <_printf_common+0x48>
 8008eca:	f104 0a19 	add.w	sl, r4, #25
 8008ece:	68e3      	ldr	r3, [r4, #12]
 8008ed0:	6832      	ldr	r2, [r6, #0]
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	42ab      	cmp	r3, r5
 8008ed6:	dc26      	bgt.n	8008f26 <_printf_common+0x96>
 8008ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008edc:	6822      	ldr	r2, [r4, #0]
 8008ede:	3b00      	subs	r3, #0
 8008ee0:	bf18      	it	ne
 8008ee2:	2301      	movne	r3, #1
 8008ee4:	0692      	lsls	r2, r2, #26
 8008ee6:	d42b      	bmi.n	8008f40 <_printf_common+0xb0>
 8008ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008eec:	4641      	mov	r1, r8
 8008eee:	4638      	mov	r0, r7
 8008ef0:	47c8      	blx	r9
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	d01e      	beq.n	8008f34 <_printf_common+0xa4>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	6922      	ldr	r2, [r4, #16]
 8008efa:	f003 0306 	and.w	r3, r3, #6
 8008efe:	2b04      	cmp	r3, #4
 8008f00:	bf02      	ittt	eq
 8008f02:	68e5      	ldreq	r5, [r4, #12]
 8008f04:	6833      	ldreq	r3, [r6, #0]
 8008f06:	1aed      	subeq	r5, r5, r3
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	bf0c      	ite	eq
 8008f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f10:	2500      	movne	r5, #0
 8008f12:	4293      	cmp	r3, r2
 8008f14:	bfc4      	itt	gt
 8008f16:	1a9b      	subgt	r3, r3, r2
 8008f18:	18ed      	addgt	r5, r5, r3
 8008f1a:	2600      	movs	r6, #0
 8008f1c:	341a      	adds	r4, #26
 8008f1e:	42b5      	cmp	r5, r6
 8008f20:	d11a      	bne.n	8008f58 <_printf_common+0xc8>
 8008f22:	2000      	movs	r0, #0
 8008f24:	e008      	b.n	8008f38 <_printf_common+0xa8>
 8008f26:	2301      	movs	r3, #1
 8008f28:	4652      	mov	r2, sl
 8008f2a:	4641      	mov	r1, r8
 8008f2c:	4638      	mov	r0, r7
 8008f2e:	47c8      	blx	r9
 8008f30:	3001      	adds	r0, #1
 8008f32:	d103      	bne.n	8008f3c <_printf_common+0xac>
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	e7c6      	b.n	8008ece <_printf_common+0x3e>
 8008f40:	18e1      	adds	r1, r4, r3
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	2030      	movs	r0, #48	@ 0x30
 8008f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f4a:	4422      	add	r2, r4
 8008f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f54:	3302      	adds	r3, #2
 8008f56:	e7c7      	b.n	8008ee8 <_printf_common+0x58>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	4641      	mov	r1, r8
 8008f5e:	4638      	mov	r0, r7
 8008f60:	47c8      	blx	r9
 8008f62:	3001      	adds	r0, #1
 8008f64:	d0e6      	beq.n	8008f34 <_printf_common+0xa4>
 8008f66:	3601      	adds	r6, #1
 8008f68:	e7d9      	b.n	8008f1e <_printf_common+0x8e>
	...

08008f6c <_printf_i>:
 8008f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	7e0f      	ldrb	r7, [r1, #24]
 8008f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f74:	2f78      	cmp	r7, #120	@ 0x78
 8008f76:	4691      	mov	r9, r2
 8008f78:	4680      	mov	r8, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	469a      	mov	sl, r3
 8008f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f82:	d807      	bhi.n	8008f94 <_printf_i+0x28>
 8008f84:	2f62      	cmp	r7, #98	@ 0x62
 8008f86:	d80a      	bhi.n	8008f9e <_printf_i+0x32>
 8008f88:	2f00      	cmp	r7, #0
 8008f8a:	f000 80d1 	beq.w	8009130 <_printf_i+0x1c4>
 8008f8e:	2f58      	cmp	r7, #88	@ 0x58
 8008f90:	f000 80b8 	beq.w	8009104 <_printf_i+0x198>
 8008f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f9c:	e03a      	b.n	8009014 <_printf_i+0xa8>
 8008f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fa2:	2b15      	cmp	r3, #21
 8008fa4:	d8f6      	bhi.n	8008f94 <_printf_i+0x28>
 8008fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8008fac <_printf_i+0x40>)
 8008fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fac:	08009005 	.word	0x08009005
 8008fb0:	08009019 	.word	0x08009019
 8008fb4:	08008f95 	.word	0x08008f95
 8008fb8:	08008f95 	.word	0x08008f95
 8008fbc:	08008f95 	.word	0x08008f95
 8008fc0:	08008f95 	.word	0x08008f95
 8008fc4:	08009019 	.word	0x08009019
 8008fc8:	08008f95 	.word	0x08008f95
 8008fcc:	08008f95 	.word	0x08008f95
 8008fd0:	08008f95 	.word	0x08008f95
 8008fd4:	08008f95 	.word	0x08008f95
 8008fd8:	08009117 	.word	0x08009117
 8008fdc:	08009043 	.word	0x08009043
 8008fe0:	080090d1 	.word	0x080090d1
 8008fe4:	08008f95 	.word	0x08008f95
 8008fe8:	08008f95 	.word	0x08008f95
 8008fec:	08009139 	.word	0x08009139
 8008ff0:	08008f95 	.word	0x08008f95
 8008ff4:	08009043 	.word	0x08009043
 8008ff8:	08008f95 	.word	0x08008f95
 8008ffc:	08008f95 	.word	0x08008f95
 8009000:	080090d9 	.word	0x080090d9
 8009004:	6833      	ldr	r3, [r6, #0]
 8009006:	1d1a      	adds	r2, r3, #4
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6032      	str	r2, [r6, #0]
 800900c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009014:	2301      	movs	r3, #1
 8009016:	e09c      	b.n	8009152 <_printf_i+0x1e6>
 8009018:	6833      	ldr	r3, [r6, #0]
 800901a:	6820      	ldr	r0, [r4, #0]
 800901c:	1d19      	adds	r1, r3, #4
 800901e:	6031      	str	r1, [r6, #0]
 8009020:	0606      	lsls	r6, r0, #24
 8009022:	d501      	bpl.n	8009028 <_printf_i+0xbc>
 8009024:	681d      	ldr	r5, [r3, #0]
 8009026:	e003      	b.n	8009030 <_printf_i+0xc4>
 8009028:	0645      	lsls	r5, r0, #25
 800902a:	d5fb      	bpl.n	8009024 <_printf_i+0xb8>
 800902c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009030:	2d00      	cmp	r5, #0
 8009032:	da03      	bge.n	800903c <_printf_i+0xd0>
 8009034:	232d      	movs	r3, #45	@ 0x2d
 8009036:	426d      	negs	r5, r5
 8009038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800903c:	4858      	ldr	r0, [pc, #352]	@ (80091a0 <_printf_i+0x234>)
 800903e:	230a      	movs	r3, #10
 8009040:	e011      	b.n	8009066 <_printf_i+0xfa>
 8009042:	6821      	ldr	r1, [r4, #0]
 8009044:	6833      	ldr	r3, [r6, #0]
 8009046:	0608      	lsls	r0, r1, #24
 8009048:	f853 5b04 	ldr.w	r5, [r3], #4
 800904c:	d402      	bmi.n	8009054 <_printf_i+0xe8>
 800904e:	0649      	lsls	r1, r1, #25
 8009050:	bf48      	it	mi
 8009052:	b2ad      	uxthmi	r5, r5
 8009054:	2f6f      	cmp	r7, #111	@ 0x6f
 8009056:	4852      	ldr	r0, [pc, #328]	@ (80091a0 <_printf_i+0x234>)
 8009058:	6033      	str	r3, [r6, #0]
 800905a:	bf14      	ite	ne
 800905c:	230a      	movne	r3, #10
 800905e:	2308      	moveq	r3, #8
 8009060:	2100      	movs	r1, #0
 8009062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009066:	6866      	ldr	r6, [r4, #4]
 8009068:	60a6      	str	r6, [r4, #8]
 800906a:	2e00      	cmp	r6, #0
 800906c:	db05      	blt.n	800907a <_printf_i+0x10e>
 800906e:	6821      	ldr	r1, [r4, #0]
 8009070:	432e      	orrs	r6, r5
 8009072:	f021 0104 	bic.w	r1, r1, #4
 8009076:	6021      	str	r1, [r4, #0]
 8009078:	d04b      	beq.n	8009112 <_printf_i+0x1a6>
 800907a:	4616      	mov	r6, r2
 800907c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009080:	fb03 5711 	mls	r7, r3, r1, r5
 8009084:	5dc7      	ldrb	r7, [r0, r7]
 8009086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800908a:	462f      	mov	r7, r5
 800908c:	42bb      	cmp	r3, r7
 800908e:	460d      	mov	r5, r1
 8009090:	d9f4      	bls.n	800907c <_printf_i+0x110>
 8009092:	2b08      	cmp	r3, #8
 8009094:	d10b      	bne.n	80090ae <_printf_i+0x142>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	07df      	lsls	r7, r3, #31
 800909a:	d508      	bpl.n	80090ae <_printf_i+0x142>
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	6861      	ldr	r1, [r4, #4]
 80090a0:	4299      	cmp	r1, r3
 80090a2:	bfde      	ittt	le
 80090a4:	2330      	movle	r3, #48	@ 0x30
 80090a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090ae:	1b92      	subs	r2, r2, r6
 80090b0:	6122      	str	r2, [r4, #16]
 80090b2:	f8cd a000 	str.w	sl, [sp]
 80090b6:	464b      	mov	r3, r9
 80090b8:	aa03      	add	r2, sp, #12
 80090ba:	4621      	mov	r1, r4
 80090bc:	4640      	mov	r0, r8
 80090be:	f7ff fee7 	bl	8008e90 <_printf_common>
 80090c2:	3001      	adds	r0, #1
 80090c4:	d14a      	bne.n	800915c <_printf_i+0x1f0>
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	b004      	add	sp, #16
 80090cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	f043 0320 	orr.w	r3, r3, #32
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	4832      	ldr	r0, [pc, #200]	@ (80091a4 <_printf_i+0x238>)
 80090da:	2778      	movs	r7, #120	@ 0x78
 80090dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	6831      	ldr	r1, [r6, #0]
 80090e4:	061f      	lsls	r7, r3, #24
 80090e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80090ea:	d402      	bmi.n	80090f2 <_printf_i+0x186>
 80090ec:	065f      	lsls	r7, r3, #25
 80090ee:	bf48      	it	mi
 80090f0:	b2ad      	uxthmi	r5, r5
 80090f2:	6031      	str	r1, [r6, #0]
 80090f4:	07d9      	lsls	r1, r3, #31
 80090f6:	bf44      	itt	mi
 80090f8:	f043 0320 	orrmi.w	r3, r3, #32
 80090fc:	6023      	strmi	r3, [r4, #0]
 80090fe:	b11d      	cbz	r5, 8009108 <_printf_i+0x19c>
 8009100:	2310      	movs	r3, #16
 8009102:	e7ad      	b.n	8009060 <_printf_i+0xf4>
 8009104:	4826      	ldr	r0, [pc, #152]	@ (80091a0 <_printf_i+0x234>)
 8009106:	e7e9      	b.n	80090dc <_printf_i+0x170>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	f023 0320 	bic.w	r3, r3, #32
 800910e:	6023      	str	r3, [r4, #0]
 8009110:	e7f6      	b.n	8009100 <_printf_i+0x194>
 8009112:	4616      	mov	r6, r2
 8009114:	e7bd      	b.n	8009092 <_printf_i+0x126>
 8009116:	6833      	ldr	r3, [r6, #0]
 8009118:	6825      	ldr	r5, [r4, #0]
 800911a:	6961      	ldr	r1, [r4, #20]
 800911c:	1d18      	adds	r0, r3, #4
 800911e:	6030      	str	r0, [r6, #0]
 8009120:	062e      	lsls	r6, r5, #24
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	d501      	bpl.n	800912a <_printf_i+0x1be>
 8009126:	6019      	str	r1, [r3, #0]
 8009128:	e002      	b.n	8009130 <_printf_i+0x1c4>
 800912a:	0668      	lsls	r0, r5, #25
 800912c:	d5fb      	bpl.n	8009126 <_printf_i+0x1ba>
 800912e:	8019      	strh	r1, [r3, #0]
 8009130:	2300      	movs	r3, #0
 8009132:	6123      	str	r3, [r4, #16]
 8009134:	4616      	mov	r6, r2
 8009136:	e7bc      	b.n	80090b2 <_printf_i+0x146>
 8009138:	6833      	ldr	r3, [r6, #0]
 800913a:	1d1a      	adds	r2, r3, #4
 800913c:	6032      	str	r2, [r6, #0]
 800913e:	681e      	ldr	r6, [r3, #0]
 8009140:	6862      	ldr	r2, [r4, #4]
 8009142:	2100      	movs	r1, #0
 8009144:	4630      	mov	r0, r6
 8009146:	f7f7 f86b 	bl	8000220 <memchr>
 800914a:	b108      	cbz	r0, 8009150 <_printf_i+0x1e4>
 800914c:	1b80      	subs	r0, r0, r6
 800914e:	6060      	str	r0, [r4, #4]
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	6123      	str	r3, [r4, #16]
 8009154:	2300      	movs	r3, #0
 8009156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800915a:	e7aa      	b.n	80090b2 <_printf_i+0x146>
 800915c:	6923      	ldr	r3, [r4, #16]
 800915e:	4632      	mov	r2, r6
 8009160:	4649      	mov	r1, r9
 8009162:	4640      	mov	r0, r8
 8009164:	47d0      	blx	sl
 8009166:	3001      	adds	r0, #1
 8009168:	d0ad      	beq.n	80090c6 <_printf_i+0x15a>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	079b      	lsls	r3, r3, #30
 800916e:	d413      	bmi.n	8009198 <_printf_i+0x22c>
 8009170:	68e0      	ldr	r0, [r4, #12]
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	4298      	cmp	r0, r3
 8009176:	bfb8      	it	lt
 8009178:	4618      	movlt	r0, r3
 800917a:	e7a6      	b.n	80090ca <_printf_i+0x15e>
 800917c:	2301      	movs	r3, #1
 800917e:	4632      	mov	r2, r6
 8009180:	4649      	mov	r1, r9
 8009182:	4640      	mov	r0, r8
 8009184:	47d0      	blx	sl
 8009186:	3001      	adds	r0, #1
 8009188:	d09d      	beq.n	80090c6 <_printf_i+0x15a>
 800918a:	3501      	adds	r5, #1
 800918c:	68e3      	ldr	r3, [r4, #12]
 800918e:	9903      	ldr	r1, [sp, #12]
 8009190:	1a5b      	subs	r3, r3, r1
 8009192:	42ab      	cmp	r3, r5
 8009194:	dcf2      	bgt.n	800917c <_printf_i+0x210>
 8009196:	e7eb      	b.n	8009170 <_printf_i+0x204>
 8009198:	2500      	movs	r5, #0
 800919a:	f104 0619 	add.w	r6, r4, #25
 800919e:	e7f5      	b.n	800918c <_printf_i+0x220>
 80091a0:	080095ed 	.word	0x080095ed
 80091a4:	080095fe 	.word	0x080095fe

080091a8 <__sflush_r>:
 80091a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b0:	0716      	lsls	r6, r2, #28
 80091b2:	4605      	mov	r5, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	d454      	bmi.n	8009262 <__sflush_r+0xba>
 80091b8:	684b      	ldr	r3, [r1, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dc02      	bgt.n	80091c4 <__sflush_r+0x1c>
 80091be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dd48      	ble.n	8009256 <__sflush_r+0xae>
 80091c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	d045      	beq.n	8009256 <__sflush_r+0xae>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091d0:	682f      	ldr	r7, [r5, #0]
 80091d2:	6a21      	ldr	r1, [r4, #32]
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	d030      	beq.n	800923a <__sflush_r+0x92>
 80091d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	0759      	lsls	r1, r3, #29
 80091de:	d505      	bpl.n	80091ec <__sflush_r+0x44>
 80091e0:	6863      	ldr	r3, [r4, #4]
 80091e2:	1ad2      	subs	r2, r2, r3
 80091e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091e6:	b10b      	cbz	r3, 80091ec <__sflush_r+0x44>
 80091e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	2300      	movs	r3, #0
 80091ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091f0:	6a21      	ldr	r1, [r4, #32]
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b0      	blx	r6
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	d106      	bne.n	800920a <__sflush_r+0x62>
 80091fc:	6829      	ldr	r1, [r5, #0]
 80091fe:	291d      	cmp	r1, #29
 8009200:	d82b      	bhi.n	800925a <__sflush_r+0xb2>
 8009202:	4a2a      	ldr	r2, [pc, #168]	@ (80092ac <__sflush_r+0x104>)
 8009204:	40ca      	lsrs	r2, r1
 8009206:	07d6      	lsls	r6, r2, #31
 8009208:	d527      	bpl.n	800925a <__sflush_r+0xb2>
 800920a:	2200      	movs	r2, #0
 800920c:	6062      	str	r2, [r4, #4]
 800920e:	04d9      	lsls	r1, r3, #19
 8009210:	6922      	ldr	r2, [r4, #16]
 8009212:	6022      	str	r2, [r4, #0]
 8009214:	d504      	bpl.n	8009220 <__sflush_r+0x78>
 8009216:	1c42      	adds	r2, r0, #1
 8009218:	d101      	bne.n	800921e <__sflush_r+0x76>
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	b903      	cbnz	r3, 8009220 <__sflush_r+0x78>
 800921e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009222:	602f      	str	r7, [r5, #0]
 8009224:	b1b9      	cbz	r1, 8009256 <__sflush_r+0xae>
 8009226:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800922a:	4299      	cmp	r1, r3
 800922c:	d002      	beq.n	8009234 <__sflush_r+0x8c>
 800922e:	4628      	mov	r0, r5
 8009230:	f7ff fbf4 	bl	8008a1c <_free_r>
 8009234:	2300      	movs	r3, #0
 8009236:	6363      	str	r3, [r4, #52]	@ 0x34
 8009238:	e00d      	b.n	8009256 <__sflush_r+0xae>
 800923a:	2301      	movs	r3, #1
 800923c:	4628      	mov	r0, r5
 800923e:	47b0      	blx	r6
 8009240:	4602      	mov	r2, r0
 8009242:	1c50      	adds	r0, r2, #1
 8009244:	d1c9      	bne.n	80091da <__sflush_r+0x32>
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0c6      	beq.n	80091da <__sflush_r+0x32>
 800924c:	2b1d      	cmp	r3, #29
 800924e:	d001      	beq.n	8009254 <__sflush_r+0xac>
 8009250:	2b16      	cmp	r3, #22
 8009252:	d11e      	bne.n	8009292 <__sflush_r+0xea>
 8009254:	602f      	str	r7, [r5, #0]
 8009256:	2000      	movs	r0, #0
 8009258:	e022      	b.n	80092a0 <__sflush_r+0xf8>
 800925a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800925e:	b21b      	sxth	r3, r3
 8009260:	e01b      	b.n	800929a <__sflush_r+0xf2>
 8009262:	690f      	ldr	r7, [r1, #16]
 8009264:	2f00      	cmp	r7, #0
 8009266:	d0f6      	beq.n	8009256 <__sflush_r+0xae>
 8009268:	0793      	lsls	r3, r2, #30
 800926a:	680e      	ldr	r6, [r1, #0]
 800926c:	bf08      	it	eq
 800926e:	694b      	ldreq	r3, [r1, #20]
 8009270:	600f      	str	r7, [r1, #0]
 8009272:	bf18      	it	ne
 8009274:	2300      	movne	r3, #0
 8009276:	eba6 0807 	sub.w	r8, r6, r7
 800927a:	608b      	str	r3, [r1, #8]
 800927c:	f1b8 0f00 	cmp.w	r8, #0
 8009280:	dde9      	ble.n	8009256 <__sflush_r+0xae>
 8009282:	6a21      	ldr	r1, [r4, #32]
 8009284:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009286:	4643      	mov	r3, r8
 8009288:	463a      	mov	r2, r7
 800928a:	4628      	mov	r0, r5
 800928c:	47b0      	blx	r6
 800928e:	2800      	cmp	r0, #0
 8009290:	dc08      	bgt.n	80092a4 <__sflush_r+0xfc>
 8009292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	f04f 30ff 	mov.w	r0, #4294967295
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a4:	4407      	add	r7, r0
 80092a6:	eba8 0800 	sub.w	r8, r8, r0
 80092aa:	e7e7      	b.n	800927c <__sflush_r+0xd4>
 80092ac:	20400001 	.word	0x20400001

080092b0 <_fflush_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	690b      	ldr	r3, [r1, #16]
 80092b4:	4605      	mov	r5, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	b913      	cbnz	r3, 80092c0 <_fflush_r+0x10>
 80092ba:	2500      	movs	r5, #0
 80092bc:	4628      	mov	r0, r5
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	b118      	cbz	r0, 80092ca <_fflush_r+0x1a>
 80092c2:	6a03      	ldr	r3, [r0, #32]
 80092c4:	b90b      	cbnz	r3, 80092ca <_fflush_r+0x1a>
 80092c6:	f7ff f9af 	bl	8008628 <__sinit>
 80092ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0f3      	beq.n	80092ba <_fflush_r+0xa>
 80092d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092d4:	07d0      	lsls	r0, r2, #31
 80092d6:	d404      	bmi.n	80092e2 <_fflush_r+0x32>
 80092d8:	0599      	lsls	r1, r3, #22
 80092da:	d402      	bmi.n	80092e2 <_fflush_r+0x32>
 80092dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092de:	f7ff fb9a 	bl	8008a16 <__retarget_lock_acquire_recursive>
 80092e2:	4628      	mov	r0, r5
 80092e4:	4621      	mov	r1, r4
 80092e6:	f7ff ff5f 	bl	80091a8 <__sflush_r>
 80092ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092ec:	07da      	lsls	r2, r3, #31
 80092ee:	4605      	mov	r5, r0
 80092f0:	d4e4      	bmi.n	80092bc <_fflush_r+0xc>
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	059b      	lsls	r3, r3, #22
 80092f6:	d4e1      	bmi.n	80092bc <_fflush_r+0xc>
 80092f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092fa:	f7ff fb8d 	bl	8008a18 <__retarget_lock_release_recursive>
 80092fe:	e7dd      	b.n	80092bc <_fflush_r+0xc>

08009300 <__swhatbuf_r>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	460c      	mov	r4, r1
 8009304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009308:	2900      	cmp	r1, #0
 800930a:	b096      	sub	sp, #88	@ 0x58
 800930c:	4615      	mov	r5, r2
 800930e:	461e      	mov	r6, r3
 8009310:	da0d      	bge.n	800932e <__swhatbuf_r+0x2e>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009318:	f04f 0100 	mov.w	r1, #0
 800931c:	bf14      	ite	ne
 800931e:	2340      	movne	r3, #64	@ 0x40
 8009320:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009324:	2000      	movs	r0, #0
 8009326:	6031      	str	r1, [r6, #0]
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	b016      	add	sp, #88	@ 0x58
 800932c:	bd70      	pop	{r4, r5, r6, pc}
 800932e:	466a      	mov	r2, sp
 8009330:	f000 f848 	bl	80093c4 <_fstat_r>
 8009334:	2800      	cmp	r0, #0
 8009336:	dbec      	blt.n	8009312 <__swhatbuf_r+0x12>
 8009338:	9901      	ldr	r1, [sp, #4]
 800933a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800933e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009342:	4259      	negs	r1, r3
 8009344:	4159      	adcs	r1, r3
 8009346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800934a:	e7eb      	b.n	8009324 <__swhatbuf_r+0x24>

0800934c <__smakebuf_r>:
 800934c:	898b      	ldrh	r3, [r1, #12]
 800934e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009350:	079d      	lsls	r5, r3, #30
 8009352:	4606      	mov	r6, r0
 8009354:	460c      	mov	r4, r1
 8009356:	d507      	bpl.n	8009368 <__smakebuf_r+0x1c>
 8009358:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	6123      	str	r3, [r4, #16]
 8009360:	2301      	movs	r3, #1
 8009362:	6163      	str	r3, [r4, #20]
 8009364:	b003      	add	sp, #12
 8009366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009368:	ab01      	add	r3, sp, #4
 800936a:	466a      	mov	r2, sp
 800936c:	f7ff ffc8 	bl	8009300 <__swhatbuf_r>
 8009370:	9f00      	ldr	r7, [sp, #0]
 8009372:	4605      	mov	r5, r0
 8009374:	4639      	mov	r1, r7
 8009376:	4630      	mov	r0, r6
 8009378:	f7ff fbbc 	bl	8008af4 <_malloc_r>
 800937c:	b948      	cbnz	r0, 8009392 <__smakebuf_r+0x46>
 800937e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009382:	059a      	lsls	r2, r3, #22
 8009384:	d4ee      	bmi.n	8009364 <__smakebuf_r+0x18>
 8009386:	f023 0303 	bic.w	r3, r3, #3
 800938a:	f043 0302 	orr.w	r3, r3, #2
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	e7e2      	b.n	8009358 <__smakebuf_r+0xc>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	6020      	str	r0, [r4, #0]
 8009396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093a2:	b15b      	cbz	r3, 80093bc <__smakebuf_r+0x70>
 80093a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f81d 	bl	80093e8 <_isatty_r>
 80093ae:	b128      	cbz	r0, 80093bc <__smakebuf_r+0x70>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f023 0303 	bic.w	r3, r3, #3
 80093b6:	f043 0301 	orr.w	r3, r3, #1
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	431d      	orrs	r5, r3
 80093c0:	81a5      	strh	r5, [r4, #12]
 80093c2:	e7cf      	b.n	8009364 <__smakebuf_r+0x18>

080093c4 <_fstat_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d07      	ldr	r5, [pc, #28]	@ (80093e4 <_fstat_r+0x20>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	4611      	mov	r1, r2
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	f7f8 fa9e 	bl	8001912 <_fstat>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d102      	bne.n	80093e0 <_fstat_r+0x1c>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	b103      	cbz	r3, 80093e0 <_fstat_r+0x1c>
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
 80093e2:	bf00      	nop
 80093e4:	20000494 	.word	0x20000494

080093e8 <_isatty_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4d06      	ldr	r5, [pc, #24]	@ (8009404 <_isatty_r+0x1c>)
 80093ec:	2300      	movs	r3, #0
 80093ee:	4604      	mov	r4, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f7f8 fa9d 	bl	8001932 <_isatty>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_isatty_r+0x1a>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_isatty_r+0x1a>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20000494 	.word	0x20000494

08009408 <_sbrk_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d06      	ldr	r5, [pc, #24]	@ (8009424 <_sbrk_r+0x1c>)
 800940c:	2300      	movs	r3, #0
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	602b      	str	r3, [r5, #0]
 8009414:	f7f8 faa6 	bl	8001964 <_sbrk>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_sbrk_r+0x1a>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_sbrk_r+0x1a>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20000494 	.word	0x20000494

08009428 <_init>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	bf00      	nop
 800942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942e:	bc08      	pop	{r3}
 8009430:	469e      	mov	lr, r3
 8009432:	4770      	bx	lr

08009434 <_fini>:
 8009434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009436:	bf00      	nop
 8009438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943a:	bc08      	pop	{r3}
 800943c:	469e      	mov	lr, r3
 800943e:	4770      	bx	lr
